<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA远程Debug调试配置</title>
      <link href="/posts/59241ebb.html"/>
      <url>/posts/59241ebb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>查看虚拟机ip</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711095129743-1341074553.png" alt="image-20230711095127887"></p><p>选择 <code>Edit Configurations..</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711095333007-1384409553.png" alt="image-20230711095333212"></p><p>点击 Add new 选择 <code>Remote JVM Debug</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711095610898-1421599583.png" alt="image-20230711095611363"></p><p>配置服务名称，主机地址，端口</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711100003664-505895083.png" alt="image-20230711100003615"></p><p>以Resin服务为例，须在Resin服务的JVM参数中新增JVM参数配置</p><p>Resin低版本相关配置文件目录为<code>Resin/conf/resin.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jvm-arg&gt;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9090&lt;/jvm-arg&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711100324808-1381934771.png" alt="image-20230711100325206"></p><p>Resin较高版本相关配置文件为<code>Resin/conf/resin.properties</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Arg passed directly to the JVM</span><br><span class="line"> jvm_args  : -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9090 -Xmx2789m -Xms2789m -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:-OmitStackTraceInFastThrow -XX:+UseParNewGC -XX:+DisableExplicitGC -javaagent:wagent.jar -javaagent:stophotdeploy.jar -Djdk.tls.ephemeralDHKeySize=2048 -Dfile.encoding=GBK -javaagent:rasp/rasp.jar</span><br><span class="line"> jvm_mode  : -server</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711105614120-1969171466.png" alt="image-20230711105614242"></p><p>在需要调试的位置打上断点</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711100522735-540194541.png" alt="image-20230711100523149"></p><p>点击debug即可开启远程调试</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711100607557-614681713.png" alt="image-20230711100607238"></p><p>服务端点击操作触发接口动作即可执行代码进行远程调试</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230711103729065-1522098422.png" alt="image-20230711103728331"></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li><p>本地代码需与服务端运行的代码保持一致</p></li><li><p>调式完毕后注意将断点去除或关闭远程调试</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>投屏神器Scrcpy基本使用</title>
      <link href="/posts/222d2de8.html"/>
      <url>/posts/222d2de8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>github</strong>: <a href="https://github.com/Genymobile/scrcpy">https://github.com/Genymobile/scrcpy</a></p></blockquote><p> <strong>选择下载版本</strong></p><p><img src="https://img-blog.csdnimg.cn/8b269d3465464b31a11a69b2c1e39b8d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pmC5YWJ5b-D5ZCR6Ziz,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><strong>下载操作系统相应的安装包</strong></p><p><img src="https://img-blog.csdnimg.cn/8d63811ef1c84149b89d3b92ba9624fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pmC5YWJ5b-D5ZCR6Ziz,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="Scrcpy-基本简介"><a href="#Scrcpy-基本简介" class="headerlink" title="Scrcpy 基本简介"></a>Scrcpy 基本简介</h2><p>简单地来说，scrcpy就是通过adb调试的方式来将手机屏幕投到电脑上，并可以通过电脑控制您的Android设备。它可以通过USB连接，也可以通过Wifi连接（类似于隔空投屏），而且不需要任何root权限，不需要在手机里安装任何程序。scrcpy同时适用于GNU &#x2F; Linux，Windows和macOS。</p><p><strong>更多详细介绍见</strong> ：<a href="https://github.com/Genymobile/scrcpy#readme">README.md</a></p><h2 id="Scrcpy-特征"><a href="#Scrcpy-特征" class="headerlink" title="Scrcpy 特征"></a>Scrcpy 特征</h2><p>它专注于：</p><ul><li><strong>亮度</strong>：原生，仅显示设备屏幕</li><li><strong>性能</strong>：30~120fps，取决于设备</li><li><strong>画质</strong>：1920×1080或以上</li><li><strong>低延迟</strong>：<a href="https://github.com/Genymobile/scrcpy/pull/646">35~70ms</a></li><li><strong>启动时间短</strong>：显示第一张图像约 1 秒</li><li><strong>非侵入性</strong>：设备上没有安装任何东西</li><li><strong>用户权益</strong>：无账户、无广告、无需网络</li><li><strong>自由</strong>：自由和开源软件</li></ul><p>其特点包括：</p><ul><li><a href="https://github.com/Genymobile/scrcpy#recording">记录</a></li><li>在<a href="https://github.com/Genymobile/scrcpy#turn-screen-off">设备屏幕关闭的情况下进行</a>镜像</li><li>双向<a href="https://github.com/Genymobile/scrcpy#copy-paste">复制粘贴</a></li><li><a href="https://github.com/Genymobile/scrcpy#capture-configuration">可配置的质量</a></li><li>设备屏幕<a href="https://github.com/Genymobile/scrcpy#v4l2loopback">作为网络摄像头 (V4L2)</a>（仅限 Linux）</li><li><a href="https://github.com/Genymobile/scrcpy#physical-keyboard-simulation-hid">物理键盘模拟 (HID)</a> （仅限 Linux）</li><li>和更多…</li></ul><h2 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h2><ol><li>Android设备至少需要API 21（Android 5.0以上版本）;</li><li>确保在您的设备上启用了<a href="https://developer.android.com/studio/command-line/adb.html#Enabling">adb调试</a>;</li><li>在某些设备上，您还需要启用<a href="https://github.com/Genymobile/scrcpy/issues/70#issuecomment-373286323">其他选项</a>以使用键盘和鼠标控制它。</li></ol><p>adb调试的开启一般是多次点击手机系统版本，</p><p>例如我的是  系统设置 &gt; 关于手机 &gt; 版本信息 &gt;  多次点击软件版本号，直到提示您已处于开发者模式，无需进行此操作</p><table><thead><tr><th></th><th align="center"><img src="https://img-blog.csdnimg.cn/7201b49ff8d94c218f981fa0de1dad03.png#pic_center" alt="在这里插入图片描述"></th><th></th></tr></thead></table><p>然后到系统设置 &gt; 开发者选项 &gt; 开启开发者选项 &gt;开启USB调试，如果有USB调试(安全模式)，一定要打开，开启USB调试，USB配置选择文件传输</p><table><thead><tr><th><img src="https://img-blog.csdnimg.cn/12ebfa2c4daf40ed9a44344a9aedb802.png#pic_center" alt="在这里插入图片描述"></th><th><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118160704909-1457463838.png" alt="image-20231118160704772"></th><th><img src="https://img-blog.csdnimg.cn/37a9751c754b495490687df732815a80.png#pic_center" alt="在这里插入图片描述"></th></tr></thead></table><h2 id="USB连接"><a href="#USB连接" class="headerlink" title="USB连接"></a>USB连接</h2><ol><li><p>手机通过USB连接电脑，首次连接会弹出是否信任该电脑，点击始终信任即可。</p></li><li><p>文件解压后在当前目录地址栏中输入<code>cmd</code>回车打开cmd窗口<br> <img src="https://img-blog.csdnimg.cn/eed7023ae12b4bcf8baccc81843e36ba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pmC5YWJ5b-D5ZCR6Ziz,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>  或者 <a href="https://blog.csdn.net/qq_50082325/article/details/121687653?spm=1001.2014.3001.5502">配置系统环境变量</a> 后 使用 Win + R 输入cmd 回车打开cmd窗口</p></li><li><p>执行命令 <code>adb usb</code> 查看是否连接成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files (x86)\scrcpy<span class="literal">-win64-v1</span>.<span class="number">21</span>&gt;adb usb</span><br><span class="line">restarting <span class="keyword">in</span> USB mode</span><br></pre></td></tr></table></figure></li><li><p>输入命令 <code>scrcpy</code> 即可</p></li></ol><h2 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h2><p>1.确保手机与电脑在同一局域网中(ip的前三段相同)</p><pre><code>电脑可通过 `ipconfig` 查看，此处我的为 `192.168.5.236` ,上方显示 `VMware Network Adapter   `为虚拟机ip</code></pre><p><img src="https://img-blog.csdnimg.cn/eb28cb2bbc0643f2be320d4b16c114c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pmC5YWJ5b-D5ZCR6Ziz,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><pre><code>    手机可通过 WLAN &gt; 已连接网络 &gt; IP 查看 &lt;img src=&quot;https://img-blog.csdnimg.cn/4c45f0c67d574db7b0759d49f0fd05a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pmC5YWJ5b-D5ZCR6Ziz,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center&quot; alt=&quot;image-20211202230435688&quot; style=&quot;zoom:50%;&quot; /&gt;                &lt;img src=&quot;https://img-blog.csdnimg.cn/ff75391524654429a895a155fb85c443.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pmC5YWJ5b-D5ZCR6Ziz,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center&quot; alt=&quot;image-20211202230300907&quot; style=&quot;zoom:50%;&quot; /&gt;         此处我电脑和手机的ip段均为  `192.168.5`  属于同一ip段，所以在同一局域网中</code></pre><ol start="2"><li><p>手机先通过USB连接电脑(让电脑知道连接那台设备)</p></li><li><p>在scrcpy目录打开cmd窗口，参见上文</p></li><li><p>执行命令 <code>adb tcpip 端口号</code> 默认端口号为5555</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files (x86)\scrcpy<span class="literal">-win64-v1</span>.<span class="number">21</span>&gt;adb tcpip <span class="number">5555</span></span><br><span class="line">restarting <span class="keyword">in</span> TCP mode port: <span class="number">5555</span></span><br></pre></td></tr></table></figure></li><li><p>断开USB连接</p></li><li><p>执行命令 <code>adb connect ip : 端口</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files (x86)\scrcpy-win64-v1.21&gt;adb connect 192.168.5.126:5555</span><br><span class="line">connected to 192.168.5.126:5555</span><br></pre></td></tr></table></figure></li><li><p>执行命令 <code>scrcpy</code> 进行无线连接即可</p></li></ol><h2 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h2><p>分为两种情况，一种是投屏状态下录屏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrcpy --record file.mp4</span><br><span class="line">scrcpy -r file.mkv</span><br></pre></td></tr></table></figure><p>一种是非投屏状态下录屏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrcpy --no-display --record file.mp4</span><br><span class="line">scrcpy -Nr file.mkv</span><br></pre></td></tr></table></figure><h2 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h2><p>在下面的列表中，MOD是快捷方式修饰符。<strong>默认情况下，它是 <code>(left)Alt</code>或 (left) Super</strong>。<br>可以使用 进行更改<code>--shortcut-mod</code>。可能的键<code>lctrl</code>，<code>rctrl</code>， <code>lalt</code>，<code>ralt</code>，<code>lsuper</code>和<code>rsuper</code>。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#使用 RCtrl 作为快捷方式</span><br><span class="line">scrcpy --shortcut-mod=rctrl  #使用右侧ctrl作为快捷方式</span><br><span class="line">scrcpy --shortcut-mod=lctrl+lalt,lsuper  #使用 LCtrl+LAlt 或 LSuper 作为快捷方式</span><br></pre></td></tr></table></figure><p><em><a href="https://en.wikipedia.org/wiki/Super_key_(keyboard_button)">Super</a>通常是Windows或Cmd键。</em></p><table><thead><tr><th>行动</th><th>捷径</th></tr></thead><tbody><tr><td>切换全屏模式</td><td>MOD+f</td></tr><tr><td>向左旋转显示</td><td>MOD+ ← <em>（左）</em></td></tr><tr><td>向右旋转显示</td><td>MOD+ → <em>（右）</em></td></tr><tr><td>将窗口大小调整为 1:1（像素完美）</td><td>MOD+g</td></tr><tr><td>调整窗口大小以去除黑色边框</td><td>MOD+ w| <em>双击左键¹</em></td></tr><tr><td>点击 <code>HOME</code>         （主页）</td><td>MOD+ h| <em>单击中键</em></td></tr><tr><td>点击 <code>BACK</code>            （返回）</td><td>MOD+ b| <em>右键单击²</em></td></tr><tr><td>点击 <code>APP_SWITCH</code>       （多任务栏）</td><td>MOD+ s| <em>第四次点击³</em></td></tr><tr><td>点击<code>MENU</code>（解锁屏幕）</td><td>MOD+m</td></tr><tr><td>点击 <code>VOLUME_UP</code>      （音量+）</td><td>MOD+ ↑ <em>（向上）</em></td></tr><tr><td>点击 <code>VOLUME_DOWN</code>          （音量-）</td><td>MOD+ ↓ <em>（下）</em></td></tr><tr><td>点击 <code>POWER</code></td><td>MOD+p</td></tr><tr><td>打开</td><td><em>右键单击²</em></td></tr><tr><td>关闭设备屏幕（保持镜像）</td><td>MOD+o</td></tr><tr><td>打开设备屏幕</td><td>MOD+Shift+o</td></tr><tr><td>旋转设备屏幕</td><td>MOD+r</td></tr><tr><td>展开通知面板</td><td>MOD+ n| <em>第 5 次点击³</em></td></tr><tr><td>展开设置面板</td><td>MOD+ n+ n| <em>双击 5 次点击³</em></td></tr><tr><td>折叠面板</td><td>MOD+Shift+n</td></tr><tr><td>复制到剪贴板⁴</td><td>MOD+c</td></tr><tr><td>剪切到剪贴板⁴</td><td>MOD+x</td></tr><tr><td>同步剪贴板和粘贴⁴</td><td>MOD+v</td></tr><tr><td>注入计算机剪贴板文本</td><td>MOD+Shift+v</td></tr><tr><td>启用&#x2F;禁用 FPS 计数器（在标准输出上）</td><td>MOD+i</td></tr><tr><td>双指缩放</td><td>Ctrl+<em>点击并移动</em></td></tr><tr><td>拖放 APK 文件</td><td>从电脑安装APK</td></tr><tr><td>拖放非 APK 文件</td><td><a href="https://github.com/Genymobile/scrcpy#push-file-to-device">推送文件到设备</a></td></tr></tbody></table><p><em>¹双击黑色边框将其删除。</em><br><em>²如果屏幕已关闭，则右键单击可打开屏幕，否则按 BACK。</em><br><em>³第四个和第五个鼠标按钮，如果你的鼠标有它们。</em><br><em>⁴仅适用于 Android &gt;&#x3D; 7。</em></p><p>带有重复键的快捷方式通过松开并再次按下该键来执行。例如，要执行“扩展设置面板”：</p><ol><li>按住MOD。</li><li>然后双击n。</li><li>最后，释放MOD。</li></ol><p>所有Ctrl+<em>键</em>的快捷方式被转发到该设备，所以它们被激活的应用程序来处理。</p><h2 id="投屏不清晰问题"><a href="#投屏不清晰问题" class="headerlink" title="投屏不清晰问题"></a>投屏不清晰问题</h2><p>找到 <code>scrcpy.exe</code> 右键 &gt; 属性 &gt; 兼容性 &gt; 更改高DPI设置 &gt; 勾选替代高DPI缩放行为 &gt; 确定应用即可</p><p><img src="https://img-blog.csdnimg.cn/ba3c612ed7a0462bafe0210d8c193534.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pmC5YWJ5b-D5ZCR6Ziz,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol><li><p><code>error: more than one device/emulator</code></p><p>报错原因：多个设备连接了电脑，导致adb无法识别操作具体哪台设备</p><p>可通过命令 <code>adb devices</code> 查看已连接设备</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files (x86)\scrcpy<span class="literal">-win64-v1</span>.<span class="number">21</span>&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">SKPN45IF8DBMRG59        device</span><br><span class="line"><span class="number">192.168</span>.<span class="number">5.126</span>:<span class="number">5555</span>      device</span><br></pre></td></tr></table></figure><ul><li><p>若想选择其中一个设备，可以执行以下命令连接其中一个设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrcpy --serial SKPN45IF8DBMRG59</span><br><span class="line"># 或者</span><br><span class="line">scrcpy -s SKPN45IF8DBMRG59</span><br></pre></td></tr></table></figure></li><li><p>也可以用<code>adb -s SKPN45IF8DBMRG59 shell</code>，进入该设备操作</p></li><li><p>若不想进入shell模式，则执行 <code>adb -s SKPN45IF8DBMRG59  指令</code>（如 adb -s SKPN45IF8DBMRG59 shell input keyevent 3）</p></li><li><p>如果只有一个模拟器和一个手机连着电脑</p><ul><li>可以用<code>adb -e</code> 来指明是操作模拟器（Emulator）</li><li>可以用<code>adb -d </code>来指明是操作设备（Device）</li></ul></li></ul><p>此处我是由于已进行无线连接（可以看到连接设备有 <code>192.168.5.126:5555      device</code>）又连接了US</p><p>只需拔掉USB，执行<code>scrcpy</code> 重新连接即可</p></li><li><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">server</span>] ERROR: Exception on thread Thread[<span class="type">main</span>,<span class="number">5</span>,<span class="type">main</span>]</span><br><span class="line">java.lang.IllegalStateException</span><br><span class="line">        at android.media.MediaCodec.native_dequeueOutputBuffer(Native Method)</span><br><span class="line">        at android.media.MediaCodec.dequeueOutputBuffer(MediaCodec.java:<span class="number">2792</span>)</span><br><span class="line">        at com.genymobile.scrcpy.ScreenEncoder.encode(ScreenEncoder.java:<span class="number">110</span>)</span><br><span class="line">        at com.genymobile.scrcpy.ScreenEncoder.internalStreamScreen(ScreenEncoder.java:<span class="number">91</span>)</span><br><span class="line">        at com.genymobile.scrcpy.ScreenEncoder.streamScreen(ScreenEncoder.java:<span class="number">65</span>)</span><br><span class="line">        at com.genymobile.scrcpy.Server.scrcpy(Server.java:<span class="number">93</span>)</span><br><span class="line">        at com.genymobile.scrcpy.Server.main(Server.java:<span class="number">309</span>)</span><br><span class="line">        at com.android.internal.os.RuntimeInit.nativeFinishInit(Native Method)</span><br><span class="line">        at com.android.internal.os.RuntimeInit.main(RuntimeInit.java:<span class="number">372</span>)</span><br><span class="line">INFO: Renderer: direct3d</span><br><span class="line">INFO: Initial texture: <span class="number">1080</span>x2336</span><br><span class="line">WARN: Device disconnected</span><br></pre></td></tr></table></figure><p>报错原因：已连接设备不支持默认分辨率设置</p><p>可使用如下命令打开</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三者任选其一</span></span><br><span class="line">scrcpy <span class="literal">-m</span> <span class="number">1920</span></span><br><span class="line">scrcpy <span class="literal">-m</span> <span class="number">1024</span></span><br><span class="line">scrcpy <span class="literal">-m</span> <span class="number">800</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>cannot connect to 192.168.X.X:5555: 由于目标计算机积极拒绝，无法连接。 (10061)</code></p><ol><li>首先检查要连接的手机是否已开启adb调试</li><li>开启手机adb服务端口及adb调试功能</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files (x86)\scrcpy-win64-v1.21&gt;adb shell # 进入安卓系统shell</span><br><span class="line">PD1831:/ $ setprop service.adb.tcp.port 5555 #设置adb服务端口为5555，打开adb网络调试功能</span><br><span class="line">PD1831:/ $ setprop service.adb.tcp.port -1  # 打开adb的usb调试功能。</span><br><span class="line">PD1831:/ $ exit # 退出shell</span><br></pre></td></tr></table></figure><ol start="3"><li>cmd输入命令  <code>adb tcpip 5555</code>   让设备在 5555 端口监听 TCP&#x2F;IP 连接。</li><li>cmd 输入命令 <code>adb connect ip:端口</code> 即可连接成功</li></ol></li></ol></li></ol><blockquote><p><strong>参考</strong></p><p><a href="https://blog.csdn.net/was172/article/details/99705855">scrcpy——Android投屏神器(使用教程)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrcpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私有化部署LobeChat</title>
      <link href="/posts/34bcc8fe.html"/>
      <url>/posts/34bcc8fe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、LobeChat介绍"><a href="#一、LobeChat介绍" class="headerlink" title="一、LobeChat介绍"></a>一、LobeChat介绍</h1><p>LobeChat 是开源的高性能聊天机器人框架，支持语音合成、多模态、可扩展的（<a href="https://sspai.com/post/81986">Function Call</a>）插件系统。<br>支持一键免费部署私人 ChatGPT&#x2F;LLM 网页应用程序。</p><p>官方 GitHub 地址：<a href="https://github.com/lobehub/lobe-chat">https://github.com/lobehub/lobe-chat</a><br>官方 Demo：<a href="https://chat-preview.lobehub.com/">https://chat-preview.lobehub.com</a><br>官方文档：<a href="https://github.com/lobehub/lobe-chat/wiki">https://github.com/lobehub/lobe-chat/wiki</a></p><h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><h2 id="一、Vercel一键部署"><a href="#一、Vercel一键部署" class="headerlink" title="一、Vercel一键部署"></a>一、Vercel一键部署</h2><p>点击 <a href="https://vercel.com/new/clone?repository-url=https://github.com/lobehub/lobe-chat&env=OPENAI_API_KEY&envDescription=Find%20your%20OpenAI%20API%20Key%20by%20click%20the%20right%20Learn%20More%20button.&envLink=https://platform.openai.com/account/api-keys&project-name=lobe-chat&repository-name=lobe-chat">一键部署</a>，登录账号</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222153218010-864679030.png" alt="image-20231222153219601"></p><p>创建仓库</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222153359196-575911394.png" alt="image-20231222153400768"></p><p>填写 OPEN_API_KEY</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222153426384-607924925.png" alt="image-20231222153427973"></p><p>点击Deploy进行部署，等待部署完成撒花即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222154915216-808373939.png" alt="image-20231222154916680"></p><p>然后就可以愉快地聊天了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222155527698-1740800352.png" alt="image-20231222155529190"></p><p>如果你想设置访问密码，可以在设置页面添加环境变量，变量名称为 <code>ACCESS_CODE</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222155512704-172738501.png" alt="image-20231222155514166"></p><p>然后重新部署下项目使配置生效</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222160400445-645353136.png" alt="image-20231222160401999"></p><p>设置访问密码后许输入正确的访问密码才能使用</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222162431466-555845917.png" alt="image-20231222162433068"></p><h2 id="二、Docker-Compose部署"><a href="#二、Docker-Compose部署" class="headerlink" title="二、Docker Compose部署"></a>二、Docker Compose部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/docker_data/lobe</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/docker_data/lobe</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文模式下输入 <code>i</code> ，粘贴以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  lobe-chat:</span><br><span class="line">    image: lobehub/lobe-chat</span><br><span class="line">    container_name: lobe-chat</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;3210:3210&#x27;</span></span><br><span class="line">    environment:</span><br><span class="line">      OPENAI_API_KEY: sk-xxxx</span><br><span class="line">      ACCESS_CODE: sglobe</span><br></pre></td></tr></table></figure><p>修改以下内容</p><p><code>OPENAI_API_KEY</code>: 你的 OpenAI key，可在登录OpenAi后访问<a href="https://platform.openai.com/api-keys">https://platform.openai.com/api-keys</a>  进行创建</p><p><code>ACCESS_CODE</code>: 访问密码，别人可以用你的访问密码进行登录，不过消耗的是你的Api额度</p><p>修改好之后，按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出</p><p>安全组放行 3210端口，也可调整为其他端口，例如调整为8080端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ports:</span><br><span class="line">      - <span class="string">&#x27;8080:3210&#x27;</span></span><br></pre></td></tr></table></figure><p>新增放行规则</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212232741703-57579546.png" alt="image-20231212232741903"></p><p>执行 <code>docker-compose up -d</code>  进行部署</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212215156853-1344483284.png" alt="image-20231212215152969"></p><p>部署成功后首次访问进入如下界面</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212233148729-1134227535.png" alt="image-20231212233148931"></p><p>使用以下命令即可使用一键启动 LobeChat 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 3210:3210 \</span><br><span class="line">  -e OPENAI_API_KEY=sk-xxxx \</span><br><span class="line">  -e ACCESS_CODE=lobe66 \</span><br><span class="line">  lobehub/lobe-chat</span><br></pre></td></tr></table></figure><p>如果你需要通过代理使用 OpenAI 服务，你可以使用 <code>OPENAI_PROXY_URL</code> 环境变量来配置代理地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 3210:3210 \</span><br><span class="line">  -e OPENAI_API_KEY=sk-xxxx \</span><br><span class="line">  -e OPENAI_PROXY_URL=https://api-proxy.com/v1 \</span><br><span class="line">  -e ACCESS_CODE=lobe66 \</span><br><span class="line">  lobehub/lobe-chat</span><br></pre></td></tr></table></figure><h3 id="2-1环境变量"><a href="#2-1环境变量" class="headerlink" title="2.1环境变量"></a>2.1环境变量</h3><p>该项目提供了一些额外的配置项，使用环境变量进行设置：</p><table><thead><tr><th>环境变量</th><th>类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>OPENAI_API_KEY</code></td><td>必选</td><td>这是你在 OpenAI 账户页面申请的 API 密钥</td><td><code>sk-xxxxxx...xxxxxx</code></td></tr><tr><td><code>OPENAI_PROXY_URL</code></td><td>可选</td><td>如果你手动配置了 OpenAI 接口代理，可以使用此配置项来覆盖默认的 OpenAI API 请求基础 URL</td><td><code>https://api.chatanywhere.cn/v1</code> 默认值: <code>https://api.openai.com/v1</code></td></tr><tr><td><code>OPENAI_FUNCTION_REGIONS</code></td><td>可选</td><td>当你使用 Vercel 部署 Lobe-Chat，而且有需求指定响应调用 OpenAI 接口的请求的 Edge Function 的 Region 时，可以使用该配置进行配置，该值的类型为逗号分隔的字符串数组</td><td><code>iad1,sfo1</code></td></tr><tr><td><code>ACCESS_CODE</code></td><td>可选</td><td>添加访问此服务的密码，你可以设置一个长密码以防被爆破</td><td><code>awCTe)re_r74</code> or <code>rtrt_ewee3@09!</code></td></tr></tbody></table><h3 id="2-2-更新"><a href="#2-2-更新" class="headerlink" title="2.2 更新"></a>2.2 更新</h3><blockquote><p>项目最近更新比较频繁，建议大家及时跟着更新。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/docker_data/lobe</span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><h3 id="2-3-卸载"><a href="#2-3-卸载" class="headerlink" title="2.3 卸载"></a>2.3 卸载</h3><p>同样进入安装页面，先停止所有容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/docker_data/lobe</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/docker_data/lobe  <span class="comment"># 完全删除</span></span><br></pre></td></tr></table></figure><h1 id="五、使用"><a href="#五、使用" class="headerlink" title="五、使用"></a>五、使用</h1><h2 id="1、设置自定义提示词"><a href="#1、设置自定义提示词" class="headerlink" title="1、设置自定义提示词"></a>1、设置自定义提示词</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222135305306-1362709418.png" alt="image-20231222135306808"></p><h2 id="2、内置角色"><a href="#2、内置角色" class="headerlink" title="2、内置角色"></a>2、内置角色</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222135041711-371853021.png" alt="image-20231222135042998"></p><h2 id="3、插件商店"><a href="#3、插件商店" class="headerlink" title="3、插件商店"></a>3、插件商店</h2><p>有天气、时钟、搜索引擎 和 网络爬虫等实用插件</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222135749892-1547570060.png" alt="image-20231222135751427"></p><p>例如用询问一下最近一周Github上star最多的项目</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222134040177-466104423.png" alt="image-20231222134041240"></p><p>使用该功能需绑定插件API密钥</p><p>联网插件API获取：<a href="https://serpapi.com/">https://serpapi.com/</a></p><p>注册需要邮箱即手机号验证</p><p>免费账号一个月有100次调用额度</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222134744785-835642275.png" alt="image-20231222134746196"></p><h2 id="4、语音功能"><a href="#4、语音功能" class="headerlink" title="4、语音功能"></a>4、语音功能</h2><p>点击小话筒可以语音输入，也可将反馈的结果语音朗读</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222140301226-1367517709.png" alt="image-20231222140257503"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ChatGPT </tag>
            
            <tag> AI </tag>
            
            <tag> Vercel </tag>
            
            <tag> LobeChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Notion搭建个人博客</title>
      <link href="/posts/a327d8e1.html"/>
      <url>/posts/a327d8e1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、注册Notion账号"><a href="#一、注册Notion账号" class="headerlink" title="一、注册Notion账号"></a>一、注册Notion账号</h1><p>官网地址： <a href="https://notion.so/">https://notion.so</a> </p><p>注册并登录后会进入以下界面</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203111834565-1985047491.png" alt="image-20231203111836563"></p><h2 id="复制Notion模版"><a href="#复制Notion模版" class="headerlink" title="复制Notion模版"></a>复制Notion模版</h2><p>登录账号之后，打开 <a href="https://mulberry-table-1ab.notion.site/6bff0ff4f0ee4e88866963af3df06459?v=7adb45c325184cbdb788d2a46151d693&pvs=4">Notion模版</a></p><p>点击  <code>Duplicating</code> 可将模板复制到自己网站了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203112446396-1262362748.png" alt="image-20231203112441593"></p><p>模版克隆到到个人账户之后，点击右上角的<code>Share</code>-&gt;<code>Publish</code>-&gt;<code>Publish to Web</code>，那么互联网上的用户就能使用这个链接来访问我们的个人页面了。</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203112908341-230980311.png" alt="image-20231203112855722"></p><h1 id="二、Github拉取NotionNext项目"><a href="#二、Github拉取NotionNext项目" class="headerlink" title="二、Github拉取NotionNext项目"></a>二、Github拉取NotionNext项目</h1><p>将 <a href="https://github.com/tangly1024/NotionNext">NotionNext</a>项目 fork到自己的github</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203134126939-2030233651.png" alt="image-20231203134120620"></p><p>这份代码就是我们搭建个人网站的关键，这个<code>NotionNext</code>调用了Notion的API来展示Notion的页面，同时提供了一些主题和特效，可以定制化我们的网站效果。</p><p>对于这个仓库，我们唯一需要关注的就是<code>blog.config.js</code>文件，我们的所有主题特效修改都只需要改这个配置文件即可。</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203134437080-543563237.png" alt="image-20231203134420553"></p><h1 id="三、Vercel部署"><a href="#三、Vercel部署" class="headerlink" title="三、Vercel部署"></a>三、Vercel部署</h1><p>注册或登录 <a href="https://vercel.com/">Vercel</a>，建议用github账号进行登录，选择添加新项目</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203134753235-548529958.png" alt="image-20231203134737665"></p><p>选择 <code>NotionNext</code> 项目点击 import 导入</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203134910892-18088007.png" alt="image-20231203134855110"></p><p>需要配置一下环境变量</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203135220773-1810457554.png" alt="image-20231203135215324"></p><p>即 <code>blog.config.js</code> 中的 <code>NOTION_PAGE_ID</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203135342963-1340418864.png" alt="image-20231203135326877"></p><p>复制Notion的分享链接</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203135418803-1658229512.png" alt="image-20231203135401960"></p><p>仅需复制id即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203135618676-442327012.png" alt="image-20231203135600686"></p><p>点击 <code>Add</code> 添加到环境变量，然后点击<code>Display</code>进行部署</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203135713622-320557183.png" alt="image-20231203135658205"></p><p>部署需要几分钟，部署成功如下所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203140132868-953470058.png" alt="image-20231203140116799"></p><h1 id="四、绑定域名"><a href="#四、绑定域名" class="headerlink" title="四、绑定域名"></a>四、绑定域名</h1><blockquote><p> 由于中国大陆专属的域名污染，vercel自动分配域名可能访问不成功,可以绑定注册好的域名进行访问</p></blockquote><p>可以直接点击<code>Add Domain</code>进行添加，也可以直接打开 <code>Setting</code> 页面进行添加</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203140459837-677598931.png" alt="image-20231203140449960"></p><p>填写已经注册好的域名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203140711224-1949075351.png" alt="image-20231203140655802"></p><p>添加后提示不合法，需要添加 A记录 和 CNAME 记录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203140759339-883355551.png" alt="image-20231203140743210"></p><p>到域名管理平台绑定域名，此处以 CloudFlare 为例，由于我已经添加过CNAME记录，再添加一条 A记录即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203141936268-76175839.png" alt="image-20231203141935573"></p><p>配置好可以看到已经显示配置合法了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203142135984-987814425.png" alt="image-20231203142135410"></p><p>点击域名即可直接访问了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203142641167-1244220942.png" alt="image-20231203142620968"></p><h1 id="五、信息修改"><a href="#五、信息修改" class="headerlink" title="五、信息修改"></a>五、信息修改</h1><h2 id="基本信息修改"><a href="#基本信息修改" class="headerlink" title="基本信息修改"></a>基本信息修改</h2><p>博客介绍的一些基本信息可以从 <code>blog.config.js </code>直接修改，也可以从Vercel的环境变量进行修改</p><p>具体操作为： <code>Project</code> &#x3D;&gt; <code>Settings</code> &#x3D;&gt;  <code>Environment Variables</code> 进行添加</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212155631939-2017769511.png" alt="image-20231212155632392"></p><p>所有带有<code>process.env</code>前缀的变量，都可以在<code>Notion</code>里面添加环境变量配置来覆盖，同<code>NOTION_PAGE_ID</code>一样，意味着如果你不想修改<code>NotionNext</code>代码仓库，是完全可行的。</p><p>同时NotionNext代码仓库还有着其它非常丰富的配置可以修改，甚至可以显示主题选项，随时一键切换主题，显示鼠标点击特效，动态特效，宠物挂件，音乐播放插件，等等。</p><p>在github上修改并提交后会触发Vercel自动部署</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203143558040-1030329818.png" alt="image-20231203143537013"></p><h2 id="Notion模版介绍"><a href="#Notion模版介绍" class="headerlink" title="Notion模版介绍"></a>Notion模版介绍</h2><p>这个模版是一个表格，表格的每一行是一篇博客，我们可以在表格上面进行编辑，</p><p>解释一下表格各个列的意义：</p><ul><li><code>type</code> - Post：博客，Menu: 菜单， SubMenu: 子菜单 ， Page：菜单（归档，留言，友链等），Notice：公告</li><li><code>status</code> - Published: 已发布，Invisible：不可见，Draft：草稿</li><li><code>title</code> - 具体的博客内容，点击Open即可打开编辑</li><li><code>slug</code> - 链接后缀，不填就是默认的notion的随机字符串，可读性不好，建议填写</li></ul><p>模板修改后需在Vercel上重新部署方可生效</p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缺少MSVCP140.dll导致软件无法打开</title>
      <link href="/posts/9a6fc6fc.html"/>
      <url>/posts/9a6fc6fc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="缺少-MSVCP140-dll-导致软件无法打开"><a href="#缺少-MSVCP140-dll-导致软件无法打开" class="headerlink" title="缺少 MSVCP140.dll 导致软件无法打开"></a>缺少 MSVCP140.dll 导致软件无法打开</h1><p>重装完系统后，打开之前在非系统盘安装的软件应用程序，提示 <code>由于找不到 MSVCP140.dll ,无法继续执行代码，重新安装程序可能会解决此问题</code>  的错误</p><p><img src="https://s1.vika.cn/space/2023/03/20/6afd36defb4344bfac499c4803850713" alt="image-20230204155654284"></p><p>解决方法 </p><p>安装微软常用运行库即可</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1s7nTrrYkV6uFZCO33Douew?pwd=ptlx">https://pan.baidu.com/s/1s7nTrrYkV6uFZCO33Douew?pwd=ptlx</a><br>提取码：ptlx</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费领取云服务器</title>
      <link href="/posts/162921c5.html"/>
      <url>/posts/162921c5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、注册账号"><a href="#一、注册账号" class="headerlink" title="一、注册账号"></a>一、注册账号</h1><p>云服务器账号注册链接：<a href="http://bit.ly/3GlfucW">http://bit.ly/3GlfucW</a></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203205035509-624210780.png" alt="image-20231203205020804"></p><p>可以在 <a href="http://cpdc.chinapost.com.cn/web/">邮政名企网</a>查询邮编</p><h1 id="二、申请服务资源"><a href="#二、申请服务资源" class="headerlink" title="二、申请服务资源"></a>二、申请服务资源</h1><p>注册好后点击 <a href="https://www.raksmart.com/home/article/details?a_id=242">活动链接</a> ，可以申请相关资源</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203205139642-1511878459.png" alt="image-20231203205124271"></p><p>点击立即申请，自定义配置选择 1核2G</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203205554758-253753913.png" alt="image-20231203205537229"></p><p>选择操作系统，此处我选择Ubuntu最新系统</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203205915225-308709913.png" alt="image-20231203205910607"></p><p>宽带类型选择 <code>大陆优化</code>，点击继续</p><p>进入到订单界面，支付方式选择 <code>alipay</code> ，同意条款协议，点击结账 (不会真正付款)</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203210153187-2132662155.png" alt="image-20231203210137471"></p><p>点击结账后会进入账单页面，无需继续操作</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203210446267-1935352790.png" alt="image-20231203210431212"></p><p>回到客户中心，可以看到未付款的账单</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203210540893-85140957.png" alt="image-20231203210525923"></p><p>点击 <code>查看服务</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203210710019-409391736.png" alt="image-20231203210655065"></p><p>继续点击 <code>新开工单</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203210747940-832804171.png" alt="image-20231203210732225"></p><p>主题填写 <code>申请免费云服务器</code>，信息可随意填写</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203210843124-1811545548.png" alt="image-20231203210827102"></p><p>提交完成后如下</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203210942682-1917242903.png" alt="image-20231203210938439"></p><p>可以回到客服中心查看我的工单</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203211149079-241912483.png" alt="image-20231203211133251"></p><p>此时状态为售后处理中，等待处理完毕即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203211216409-1569250275.png" alt="image-20231203211201737"></p><p>客服处理完毕后，状态会变为 <code>等您确认</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203214035765-209262970.png" alt="image-20231203214030587"></p><p>回到客服中心，点击我的服务，即可看到已有一台可用的服务器</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203214212401-1494549329.png" alt="image-20231203214156827"></p><p>点击拦截可查看服务器详情</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203214334434-1904347269.png" alt="image-20231203214313049"></p><h1 id="三、连接服务器"><a href="#三、连接服务器" class="headerlink" title="三、连接服务器"></a>三、连接服务器</h1><p>Windows开始菜单搜索 <code>PowerShell</code> </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203214450045-958990047.png" alt="image-20231203214427991"></p><p>输入 <code>ssh -p 端口 root@ip</code>，询问是否把该主机加入到Ip列表内，输入yes，然后输入密码即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203214910011-1237942758.png" alt="image-20231203214851247"></p><p>如登录失败，许把当前端口添加到安全组</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203215122861-1291129137.png" alt="image-20231203215118033"></p><p>安全组设置：<code>安全组</code>-&gt;<code>新建安全组</code>-&gt;<code>新增策略</code>-&gt;<code>规则方向（入）</code>-&gt;<code>协议（自定义TCP）</code>-&gt;<code>端口范围（填写端口号）</code>-&gt;<code>授权IP（0.0.0.0/0）</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203215402727-1835282132.png" alt="image-20231203215345983"></p><p>登录成功后，可以输入 <code>top</code> 命令查看当前服务器配置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231203215554152-870391678.png" alt="image-20231203215537936"></p>]]></content>
      
      
      <categories>
          
          <category> 白嫖福利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用CloudFlare获取无限邮箱</title>
      <link href="/posts/31741fba.html"/>
      <url>/posts/31741fba.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、创建自定义地址"><a href="#1、创建自定义地址" class="headerlink" title="1、创建自定义地址"></a>1、创建自定义地址</h1><p>点击开始使用</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222163925955-349664827.png" alt="image-20231222163927534"></p><p>填写自定义地址及目标地址，目标地址即最终你要用来接收邮件的邮箱</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222164730376-1457644879.png" alt="image-20231222164726908"></p><h1 id="2、验证目标地址"><a href="#2、验证目标地址" class="headerlink" title="2、验证目标地址"></a>2、验证目标地址</h1><p>添加你希望转发到的邮箱地址（可以是QQ邮箱、163.com等国内邮箱）</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222164913147-624826037.png" alt="image-20231222164904820"></p><p>点击添加记录并启用</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222165037766-1456785085.png" alt="image-20231222165039417"></p><p>启用后如下所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222165131481-1823263836.png" alt="image-20231222165133087"></p><p>此时就可以用自定义邮箱地址接收邮件，邮件最终会发送到你配置的目标邮箱上</p><h1 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h1><p>我们模拟给自定义邮箱发送一封邮件</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222165719777-94041044.png" alt="image-20231222165721332"></p><p>使用配置的目标邮箱查看收到的邮件，此邮件会显示代发详情</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222165908696-116199071.png" alt="image-20231222165910371"></p><h1 id="4、启用Catch-all地址"><a href="#4、启用Catch-all地址" class="headerlink" title="4、启用Catch-all地址"></a>4、启用Catch-all地址</h1><p>启用Catch-all地址，点击编辑</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222171315150-756936210.png" alt="image-20231222171316544"></p><p>操作选择发送到电子邮件，填写目标邮件地址，保存即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222171422622-757885814.png" alt="image-20231222171419233"></p><p>配置好以后，所有<code>xxxx@your_domain</code>的邮件都转发到你配置的目标邮件地址上了</p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CloudFlare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自定义导航网站</title>
      <link href="/posts/2ff113dc.html"/>
      <url>/posts/2ff113dc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>免费版地址<br><a href="https://www.iotheme.cn/store/webstack.html">https://www.iotheme.cn/store/webstack.html</a></p><p>付费版购买地址<br><a href="https://www.iotheme.cn/store/onenav.html">https://www.iotheme.cn/store/onenav.html</a></p><p>Webstack项目地址：<a href="https://github.com/HCLonely/hexo-theme-webstack">https://github.com/HCLonely/hexo-theme-webstack</a></p><p>其他主题推荐</p><p>TwoNav主题：<a href="https://github.com/tznb1/TwoNav">https://github.com/tznb1/TwoNav</a></p><h1 id="一、安装宝塔面板"><a href="#一、安装宝塔面板" class="headerlink" title="一、安装宝塔面板"></a>一、安装宝塔面板</h1><p>宝塔官网：<a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p><h2 id="Centos安装脚本"><a href="#Centos安装脚本" class="headerlink" title="Centos安装脚本"></a><strong>Centos安装脚本</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-Deepin安装脚本"><a href="#Ubuntu-Deepin安装脚本" class="headerlink" title="Ubuntu&#x2F;Deepin安装脚本"></a><strong>Ubuntu&#x2F;Deepin安装脚本</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh ed8484bec</span><br></pre></td></tr></table></figure><h2 id="Debian安装脚本"><a href="#Debian安装脚本" class="headerlink" title="Debian安装脚本"></a><strong>Debian安装脚本</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh ed8484bec</span><br></pre></td></tr></table></figure><h2 id="万能安装脚本"><a href="#万能安装脚本" class="headerlink" title="万能安装脚本"></a><strong>万能安装脚本</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ -f /usr/bin/curl ];then curl -sSO https://download.bt.cn/install/install_panel.sh;else wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;fi;bash install_panel.sh ed8484bec</span><br></pre></td></tr></table></figure><h2 id="国产龙芯架构安装脚本（其他CPU请勿使用）"><a href="#国产龙芯架构安装脚本（其他CPU请勿使用）" class="headerlink" title="国产龙芯架构安装脚本（其他CPU请勿使用）"></a><strong>国产龙芯架构安装脚本（其他CPU请勿使用）</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install_panel.sh https://download.bt.cn/install/0/loongarch64/loongarch64_install_panel.sh &amp;&amp; bash install_panel.sh ed8484bec</span><br></pre></td></tr></table></figure><p>安装完成后会提示访问地址及用户密码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231206214426925-781740990.png" alt="image-20231206214422816"></p><p>输入 <code>bt </code> 可查看宝塔面板相关命令</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212154329963-803845647.png" alt="image-20231212154330290"></p><h1 id="二、安装基础服务"><a href="#二、安装基础服务" class="headerlink" title="二、安装基础服务"></a>二、安装基础服务</h1><p>需安装 Nginx、Mysql（建议5.7及以上版本）、PHP</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205225047071-1102407633.png" alt="image-20231205225027722"></p><h2 id="三、安装wordpress服务"><a href="#三、安装wordpress服务" class="headerlink" title="三、安装wordpress服务"></a>三、安装wordpress服务</h2><h2 id="1、设置域名"><a href="#1、设置域名" class="headerlink" title="1、设置域名"></a>1、设置域名</h2><p>安装前可以先配置下域名，添加一条www的A记录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207130426491-2053203062.png" alt="image-20231207130419098"></p><h2 id="2、添加站点"><a href="#2、添加站点" class="headerlink" title="2、添加站点"></a>2、添加站点</h2><p>在宝塔面板添加站点，域名用刚才添加的域名，没有域名可直接用主机ip</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207130507881-1515336514.png" alt="image-20231207130505865"></p><p>站点创建成功后会再次弹框确认数据账号及密码，可写个文档记录起来</p><h2 id="3、上传资源文件"><a href="#3、上传资源文件" class="headerlink" title="3、上传资源文件"></a>3、上传资源文件</h2><p>点击根目录链接进入根目录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207130649488-1609283702.png" alt="image-20231207130647519"></p><p>清空该目录内所用文件并上传wordpress安装文件</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207130746013-1540082662.png" alt="image-20231207130743255"></p><p>上传完成后将文件进行解压</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207130836253-302310668.png" alt="image-20231207130833960"></p><p>解压后可以将原来的压缩包删除，然后将解压后的所有文件全选剪切到根目录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207130940939-746758842.png" alt="image-20231207130938113"></p><p>粘贴后可以将原来的wordpress空目录删除，所有文件在站点根目录同一级</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207131106123-1424813966.png" alt="image-20231207131103899"></p><p>此时通过域名及端口已能正常访问</p><p>若不能正常访问许检查80、443端口是否冲突，安全组是否放行所需端口，Nginx服务启动是否正常</p><p>若无以上错误，可尝试申请ssl证书后重新访问</p><h2 id="4、开启伪静态"><a href="#4、开启伪静态" class="headerlink" title="4、开启伪静态"></a>4、开启伪静态</h2><p>设置伪静态能提高网站检索权重</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207131535847-2120931197.png" alt="image-20231207131532237"></p><h2 id="5、设置SSL证书"><a href="#5、设置SSL证书" class="headerlink" title="5、设置SSL证书"></a>5、设置SSL证书</h2><p>申请 <code>Let&#39;s Encrypt</code> 免费证书</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231207131712914-292456289.png" alt="image-20231207131710560"></p><p>申请成功如下所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212153257314-251334608.png" alt="image-20231212153257736"></p><p>若证书申请失败，如图所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212153504902-1087186006.png" alt="image-20231212153505277"></p><p>仍需检查 所需端口是否被占用，一般为80，443端口</p><p>另外需检查Nginx配置是否添加站点server配置，若未添加需手动添加</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212152858112-1453010230.png" alt="image-20231212152858330"></p><h1 id="三、安装wordpress"><a href="#三、安装wordpress" class="headerlink" title="三、安装wordpress"></a>三、安装wordpress</h1><h2 id="1、选择使用语言"><a href="#1、选择使用语言" class="headerlink" title="1、选择使用语言"></a>1、选择使用语言</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231210183513480-1920467402.png" alt="image-20231210183513608"></p><h2 id="2、关联数据库"><a href="#2、关联数据库" class="headerlink" title="2、关联数据库"></a>2、关联数据库</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231210183945593-1548832551.png" alt="image-20231210183945886"></p><h2 id="3、执行安装程序"><a href="#3、执行安装程序" class="headerlink" title="3、执行安装程序"></a>3、执行安装程序</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231210184331574-24565961.png" alt="image-20231210184331851"></p><h2 id="4、设置站点信息"><a href="#4、设置站点信息" class="headerlink" title="4、设置站点信息"></a>4、设置站点信息</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231210184425019-425292561.png" alt="image-20231210184425231"></p><p>安装完成后会自动跳转到后台管理界面，管理界面地址： <code>域名或ip/wp-admin</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231210184732005-547247474.png" alt="image-20231210184732241"></p><h1 id="四、导航站主题配置"><a href="#四、导航站主题配置" class="headerlink" title="四、导航站主题配置"></a>四、导航站主题配置</h1><h2 id="1、安装主题"><a href="#1、安装主题" class="headerlink" title="1、安装主题"></a>1、安装主题</h2><p>外观 -&gt; 添加新主题 -&gt; 上传主题 -&gt; 上传主题</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211235404755-736567806.png" alt="image-20231211235358818"></p><p>安装好后如下所示，点击启用即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212001313462-1821521391.png" alt="image-20231212001308445"></p><p>启用后会多出 网址 一栏</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212001517506-1918188951.png" alt="image-20231212001500908"></p><h2 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h2><p>插件 &#x3D;&gt; 添加新插件 &#x3D;&gt; 上传插件，需安装 <code>redis-cache</code>  和 <code>wp-rocket</code> 插件，先不要启用</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212001657276-1669673131.png" alt="image-20231212001641534"></p><p>宝塔面板 &#x3D;&gt; 软件商店 &#x3D;&gt;  已安装  &#x3D;&gt; PHP &#x3D;&gt; 设置 &#x3D;&gt; 安装拓展  安装 <code>opcache</code> 和  <code>redis</code> 拓展 </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212002242404-1512309611.png" alt="image-20231212002226489"></p><p>插件 &#x3D;&gt; 已安装插件 &#x3D;&gt;  启用刚才上传的两个插件</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212002953247-1411174404.png" alt="image-20231212002946507"></p><h2 id="3、修改链接结构"><a href="#3、修改链接结构" class="headerlink" title="3、修改链接结构"></a>3、修改链接结构</h2><p>设置 &#x3D;&gt; 固定连接 &#x3D;&gt;  固定链接结构 &#x3D;&gt; 自定义结构，设置为 <code>/%post_id%.html</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212003351689-2050304142.png" alt="image-20231212003336337"></p><p>此时使用ip 或者域名就可以访问了</p><p><img src="C:/Users/shiguang/AppData/Roaming/Typora/typora-user-images/image-20231212003701150.png" alt="image-20231212003701150"></p><h2 id="4、基本功能"><a href="#4、基本功能" class="headerlink" title="4、基本功能"></a>4、基本功能</h2><p>网址 &#x3D;&gt; 网址分类</p><p>填写名称，描述，选择菜单图标，添加新网址目录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212010114639-1719071349.png" alt="image-20231212010057790"></p><p>网址 &#x3D;&gt; 添加网址</p><p>填写标题，描述，网址连接，图标路径，选择网址分类目录，发布即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212004857060-639422935.png" alt="image-20231212004852382"></p><p>添加后如下所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212005123156-942049595.png" alt="image-20231212005108353"></p><p>其他更多配置可在主题设置进行调整</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212005428556-1422541523.png" alt="image-20231212005413041"></p><h2 id="5、移除Fork-me-on-GitHub图标"><a href="#5、移除Fork-me-on-GitHub图标" class="headerlink" title="5、移除Fork me on GitHub图标"></a>5、移除<code>Fork me on GitHub</code>图标</h2><p>回到宝塔面板，进入站点根目录，找到 <code>/templates/header-banner.php</code> 文件，双击进行编辑</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212005813219-1522323104.png" alt="image-20231212005758285"></p><p>删除最后一段a链接保存即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212005935545-237471220.png" alt="image-20231212005929617"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔面板 </tag>
            
            <tag> wordpress </tag>
            
            <tag> 导航 </tag>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装并配置java</title>
      <link href="/posts/d1bb370f.html"/>
      <url>/posts/d1bb370f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装并配置java"><a href="#安装并配置java" class="headerlink" title="安装并配置java"></a>安装并配置java</h1><h2 id="一、安装java文件"><a href="#一、安装java文件" class="headerlink" title="一、安装java文件"></a>一、安装java文件</h2><p>首先去官网下载 <a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">java1.8</a></p><p><img src="https://s1.vika.cn/space/2023/03/20/6e2d2476b2cc4e8788f5d42fdae6403f" alt="image-20230204202921078"></p><p>运行下载好的应用程序</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223125869-633895081.png" alt="image-20231116223124512"></p><p>可以更改安装目录，且目录中不要包含中文，空格，特殊字符等</p><p><img src="https://s1.vika.cn/space/2023/03/20/301df4dda9854ef290f20208e8f126f3" alt="image-20230204203252352"></p><p>接下来安装jre,也可以调整安装目录</p><p><img src="https://s1.vika.cn/space/2023/03/20/c4849b2b4c32422db86e4dad1d43c891" alt="image-20230204203449018"></p><p>安装完成，点击关闭即可</p><p><img src="https://s1.vika.cn/space/2023/03/20/b5a763c9c0b04950bec9e72e8688c734" alt="image-20230204203700817"></p><h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p>此电脑右击 &gt; 属性</p><p><img src="https://s1.vika.cn/space/2023/03/20/00684b32777b4eefb327224ce5d4da09" alt="image-20230204210030682"></p><p>高级系统设置</p><p><img src="https://s1.vika.cn/space/2023/03/20/fd92e626dac64f1baf12ab63cb4d1c6f" alt="image-20230204210124091"></p><p>环境变量</p><p><img src="https://s1.vika.cn/space/2023/03/20/0ab143bc4f43441ead92cce1a56dde22" alt="image-20230204210200683"></p><p>在系统变量中新建</p><p><img src="https://s1.vika.cn/space/2023/03/20/e0e62ad802994a51ae0bd871eb89ec61" alt="image-20230204210315129"></p><p>变量名 <code>JAVA_HOME</code> ,变量值选择刚才安装的jdk目录</p><p><img src="https://s1.vika.cn/space/2023/03/20/42c245eff7f24ab68770c5fd737a5ad1" alt="image-20230204210608697"></p><p>双击打开 Path 系统变量</p><p><img src="https://s1.vika.cn/space/2023/03/20/19b036af6a0a4bd68b9e8025a04513eb" alt="image-20230204210905010"></p><p>点击新建 <code>%JAVA_HOME%\bin</code> </p><p><img src="https://s1.vika.cn/space/2023/03/20/d6104e683be64280ab5ceb343efe3af0" alt="image-20230204211206390"></p><p>点击上移，放到首位</p><p><img src="https://s1.vika.cn/space/2023/03/20/2ed2c1bb40c847c8a7fd982838755abd" alt="image-20230204211335225"></p><p>点击确定保存，注意有三次确认</p><p>查看是否安装 jre</p><p><img src="https://s1.vika.cn/space/2023/03/20/a0820aa4abdb4e20a9d026336052b4d9" alt="image-20230204213211094"></p><p>查看Java版本</p><p><img src="https://s1.vika.cn/space/2023/03/20/00a88ea53e4047c1957d7f34e0f03ad8" alt="image-20230204212759407"></p><p>注意：jdk1.8小版本号较低的查看版本号 用 <code>java --version</code> , 较高的 用 <code>java -version</code> </p><p>否则会报 <code>Could not create the Java Virtual Machine.</code> 错误</p><p><img src="https://s1.vika.cn/space/2023/03/20/5f352750eb6747a8a2b1a53eab1bb1a3" alt="image-20230204212922157"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows实现滑动关机</title>
      <link href="/posts/a3d190d8.html"/>
      <url>/posts/a3d190d8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img2023.cnblogs.com/blog/2233039/202212/2233039-20221206174902417-1946693415.png" alt="img"></p><p>可以先设置一个好看的锁屏壁纸   </p><p>桌面右键 &gt; 个性化 &gt; 锁屏界面   从本地选择一个喜欢的锁屏壁纸</p><p>在桌面右键 &gt; 新建 &gt; 快捷方式</p><p>对象位置输入 <code>SlideToShutDown</code> 下一页</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202212/2233039-20221206175019414-747739315.png" alt="img"></p><p>为快捷方式命名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202212/2233039-20221206175043454-170216497.png" alt="img"></p><p>点击完成会在桌面生成一个快捷方式，双击该快捷方式即可进行滑动关机</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202212/2233039-20221206175255550-1951998085.png" alt="img"></p><p>可以为快捷方式设置一个图标，在快捷方式上右键 &gt; 属性 &gt; 快捷方式 &gt; 更改图标</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202212/2233039-20221206175303839-1256423314.png" alt="img"></p><p>可以选择系统图标，也可以从本地选择其他图标</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202212/2233039-20221206175121838-369565798.png" alt="img"></p><p>点击完成即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202212/2233039-20221206175056240-1239631738.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows设置软件自启动</title>
      <link href="/posts/ae1986c1.html"/>
      <url>/posts/ae1986c1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Windows设置软件自启动"><a href="#Windows设置软件自启动" class="headerlink" title="Windows设置软件自启动"></a>Windows设置软件自启动</h1><p>win + r 打开运行窗口，输入 <code>shell:startup</code> 打开 自启动应用存放目录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116224316084-2044071923.png" alt="image-20231116224315195"></p><p>也可在资源管理器中打开该目录，目录地址为</p><p><code>C:\Users\xxxxxx\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p><p>将要开机自启的应用的快捷方式拖入到该目录即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116224328872-290859036.png" alt="image-20231116224327949"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows环境安装PostgreSQL</title>
      <link href="/posts/c859c859.html"/>
      <url>/posts/c859c859.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Windows环境安装PostgreSQL"><a href="#Windows环境安装PostgreSQL" class="headerlink" title="Windows环境安装PostgreSQL"></a>Windows环境安装PostgreSQL</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>要在Docker Desktop上安装PostgreSQL数据库，请按照以下步骤进行操作：</p><ol><li><p>首先，确保您已经安装了Docker Desktop，并且它正在运行。</p></li><li><p>打开终端或命令提示符，并输入以下命令来从Docker Hub下载并运行PostgreSQL镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres</span><br></pre></td></tr></table></figure><p>这将在Docker容器中运行一个名为”my-postgres”的PostgreSQL实例。您可以根据需要更改容器名称和密码。</p></li><li><p>等待一段时间，直到容器成功启动。您可以使用以下命令检查容器的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>如果容器正在运行，您将看到一个包含PostgreSQL容器的条目。</p></li><li><p>现在，您可以使用任何支持PostgreSQL的客户端工具连接到数据库。例如，您可以使用psql命令行工具连接到容器中的数据库：</p><p>使用完整的路径来运行 <code>psql</code> 命令：如果您知道 PostgreSQL 客户端工具的安装路径，可以直接使用完整的路径来运行 <code>psql</code> 命令。例如，在 Windows 上，您可以尝试运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\PostgreSQL\&lt;version&gt;\bin\psql&quot; -h localhost -p 5432 -U postgres</span><br></pre></td></tr></table></figure><p>请确保将 <code>&lt;version&gt;</code> 替换为您安装的 PostgreSQL 版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h localhost -p 5432 -U postgres</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container_id&gt; psql -U postgres</span><br></pre></td></tr></table></figure><p>将 <code>&lt;container_id&gt;</code> 替换为您的 PostgreSQL 容器的 ID 或名称。</p><p>输入密码时，请使用在第2步中设置的密码。</p></li><li><p>您已成功在Docker Desktop上安装和运行了PostgreSQL数据库。现在，您可以使用该数据库进行开发和测试。</p></li></ol><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>docker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:5432 -&gt; 0.0.0.0:0: listen tcp 0.0.0.0:5432: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</p><p>这个错误提示表明端口 5432 在您的系统上已被占用，因此 Docker 无法将容器的端口映射到主机上。要解决此问题，您可以尝试以下几种方法：</p><ol><li><p>检查端口占用情况：运行以下命令以查看系统上当前正在使用的端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr :5432</span><br></pre></td></tr></table></figure><p>如果该端口已被占用，您将看到相关的进程ID（PID）。请记下该PID。</p></li><li><p>停止占用端口的进程：使用以下命令停止占用端口的进程（将 <code>&lt;PID&gt;</code> 替换为在上一步中找到的进程ID）：</p><ul><li><p>在 Windows 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID &lt;PID&gt; /F</span><br></pre></td></tr></table></figure></li><li><p>在 macOS 或 Linux 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill &lt;PID&gt;</span><br></pre></td></tr></table></figure></li></ul><p>请注意，停止进程可能会影响正在运行的其他应用程序，请谨慎操作。</p></li><li><p>更改映射的端口：如果您不想停止占用端口的进程，您可以尝试将容器中的端口映射到主机上的其他可用端口。例如，您可以将 <code>-p 5432:5432</code> 修改为 <code>-p 5433:5432</code>，将容器的端口 5432 映射到主机的端口 5433。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5433:5432 -d postgres</span><br></pre></td></tr></table></figure><p>这样做后，您可以使用主机上的端口 5433 来连接到 PostgreSQL 数据库。</p></li></ol><p>请注意，以上方法可能需要管理员权限或超级用户权限（如在 macOS 或 Linux 上使用 <code>sudo</code> 命令）。如果问题仍然存在，请确保您的系统配置正确，并确保没有其他程序正在占用该端口。</p><p>如果端口未被占用仍然有以上提示，可以尝试在cmd终端以管理员身份执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net stop winnat</span><br><span class="line"></span><br><span class="line"># 然后运行docker</span><br><span class="line"></span><br><span class="line">net start winnat</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11 提示无法成功完成操作，因为文件包含病毒或潜在的垃圾软件</title>
      <link href="/posts/45d4b06b.html"/>
      <url>/posts/45d4b06b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Win11-提示无法成功完成操作，因为文件包含病毒或潜在的垃圾软件"><a href="#Win11-提示无法成功完成操作，因为文件包含病毒或潜在的垃圾软件" class="headerlink" title="Win11 提示无法成功完成操作，因为文件包含病毒或潜在的垃圾软件"></a>Win11 提示无法成功完成操作，因为文件包含病毒或潜在的垃圾软件</h1><p>在Windows安全中心 &gt; 保护历史记录 里操作为允许就可以了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118153629706-1536747479.png" alt="image-20231118153629828"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode使用指南</title>
      <link href="/posts/e0b7d590.html"/>
      <url>/posts/e0b7d590.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vscode使用指南"><a href="#Vscode使用指南" class="headerlink" title="Vscode使用指南"></a>Vscode使用指南</h1><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h2><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p>官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>根据电脑系统正常安装即可</p><h3 id="1-2-命令面板"><a href="#1-2-命令面板" class="headerlink" title="1.2 命令面板"></a>1.2 命令面板</h3><p>Ctrl + Shift + P 可调出命令面板</p><h3 id="1-3打开方式"><a href="#1-3打开方式" class="headerlink" title="1.3打开方式"></a>1.3打开方式</h3><ol><li><p>双击快捷键打开</p></li><li><p>通过命令行工具打开</p><p>打开终端工具，执行命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开指定文件夹 code 文件夹路径</span></span><br><span class="line">code D:\eclipse\workspace</span><br><span class="line"><span class="comment">//打开子文件夹 code ./子文件加名称</span></span><br><span class="line"> D:\eclipse\workspace&gt;code ./test    <span class="comment">//打开D:\eclipse\workspace下的test文件夹</span></span><br></pre></td></tr></table></figure><p>Windows自带两个命令行工具 CMD和PowerShell</p><p><strong>使用方法</strong></p><ol><li><p>Win+R输入cmd 或powershell</p></li><li><p>在指定目录地址栏输入cmd或powershell</p><p>进入到指定目录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118164829200-1622786743.png" alt="image-20231118164829420"><br>删除地址路径，输入cmd或powershell回车</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118164856057-1112541008.png" alt="image-20231118164856451"></p><p>效果如下：</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118165130163-1992659133.png" alt="image-20231118165130425"></p></li></ol></li></ol><h2 id="2-代码编辑"><a href="#2-代码编辑" class="headerlink" title="2.代码编辑"></a>2.代码编辑</h2><h3 id="2-1光标移动"><a href="#2-1光标移动" class="headerlink" title="2.1光标移动"></a>2.1光标移动</h3><p>移到行首: Home</p><p>移到行尾:End</p><p>移动到文档的开头和末尾：Ctrl+ Home&#x2F;End</p><h3 id="2-2-删除，移动，注释"><a href="#2-2-删除，移动，注释" class="headerlink" title="2.2 删除，移动，注释"></a>2.2 删除，移动，注释</h3><p>Alt+⬆：向上移动当前行</p><p>Alt +⬇: 向下移动当前行</p><p>Alt + Shift +⬆：向上复制当前行</p><p>Alt + Shift +⬇:  向下复制当前行</p><p>Shift + Del（光标位置会移至行首）&#x2F;Ctrl + Shift + K(光标位置不变) :删除当前行 </p><p>单行注释：Ctrl + &#x2F;</p><p>块注释：Alt + Shift +A</p><h3 id="2-3代码格式化"><a href="#2-3代码格式化" class="headerlink" title="2.3代码格式化"></a>2.3代码格式化</h3><p>Alt + Shift + F</p><h3 id="2-4-批量操作"><a href="#2-4-批量操作" class="headerlink" title="2.4 批量操作"></a>2.4 批量操作</h3><p>按住Alt 然后鼠标选择需要修改的位置即可进行批量修改</p><p>选中代码段后按Alt + Shift + i可进行批量插入操作，左右方向键选择具体插入位置</p><h2 id="3-插件推荐"><a href="#3-插件推荐" class="headerlink" title="3.插件推荐"></a>3.插件推荐</h2><h3 id="3-1-Auto-Rename-Tag"><a href="#3-1-Auto-Rename-Tag" class="headerlink" title="3.1 Auto Rename Tag"></a>3.1 Auto Rename Tag</h3><p>自动重命名标签</p><h3 id="3-2-Better-Solarized-Dark主题"><a href="#3-2-Better-Solarized-Dark主题" class="headerlink" title="3.2 Better Solarized Dark主题"></a>3.2 Better Solarized Dark主题</h3><h3 id="3-3Chinese-简体中文"><a href="#3-3Chinese-简体中文" class="headerlink" title="3.3Chinese 简体中文"></a>3.3Chinese 简体中文</h3><h3 id="3-4-Code-Runner"><a href="#3-4-Code-Runner" class="headerlink" title="3.4 Code Runner"></a>3.4 Code Runner</h3><p>右键运行代码</p><h3 id="3-5Open-in-Browser"><a href="#3-5Open-in-Browser" class="headerlink" title="3.5Open in Browser"></a>3.5Open in Browser</h3><p>在浏览器中预览</p><h3 id="3-6-gitignore"><a href="#3-6-gitignore" class="headerlink" title="3.6 gitignore"></a>3.6 gitignore</h3><p>添加文件或者文件夹到gitignore</p><h3 id="3-7-import-Cost"><a href="#3-7-import-Cost" class="headerlink" title="3.7 import Cost"></a>3.7 import Cost</h3><p>引入文件分析</p><h3 id="3-8-Paste-Image"><a href="#3-8-Paste-Image" class="headerlink" title="3.8 Paste Image"></a>3.8 Paste Image</h3><p>快速将截图粘贴到Markdown文件</p><h3 id="3-9-Project-Manager"><a href="#3-9-Project-Manager" class="headerlink" title="3.9 Project Manager"></a>3.9 Project Manager</h3><p>项目管理工具</p><h3 id="3-10-Live-Server"><a href="#3-10-Live-Server" class="headerlink" title="3.10 Live Server"></a>3.10 Live Server</h3><p>本地服务器，右键菜单可以运行</p><h3 id="3-11-VScode-icons"><a href="#3-11-VScode-icons" class="headerlink" title="3.11 VScode-icons"></a>3.11 VScode-icons</h3><p>VScode图标</p><h3 id="3-12Document-This"><a href="#3-12Document-This" class="headerlink" title="3.12Document This"></a>3.12Document This</h3><p>快速对类和函数添加注释，通过按两次Ctrl + Alt + D可以快速添加注释。</p><h3 id="3-13-Language-PL-SQL"><a href="#3-13-Language-PL-SQL" class="headerlink" title="3.13 Language PL&#x2F;SQL"></a>3.13 Language PL&#x2F;SQL</h3><p>支持SQL语句</p>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ufw简单使用</title>
      <link href="/posts/6ce2cf83.html"/>
      <url>/posts/6ce2cf83.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、更新软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>2、安装ufw</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ufw</span><br></pre></td></tr></table></figure><p>3、启动ufw</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，它将允许常见的服务端口（如 SSH、HTTP、HTTPS）通过，而其他所有端口将被拒绝</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>4、检测防火墙状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p>5、放行指定端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow &lt;端口号&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ufw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL含空格字段查询方式</title>
      <link href="/posts/65e26047.html"/>
      <url>/posts/65e26047.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SQL含空格字段查询方式"><a href="#SQL含空格字段查询方式" class="headerlink" title="SQL含空格字段查询方式"></a>SQL含空格字段查询方式</h3><h4 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h4><p>mysql 中使用 &#96;&#96; 符号包裹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `Job Task No_` from JobJobTaskSyncLog;</span><br></pre></td></tr></table></figure><h4 id="SQLSERVER"><a href="#SQLSERVER" class="headerlink" title="SQLSERVER"></a>SQLSERVER</h4><p>sqlserver中使用中括号[]包裹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select [Job Task No_] from JobJobTaskSyncLog;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SqlServer设置主键自增</title>
      <link href="/posts/eb31b1e8.html"/>
      <url>/posts/eb31b1e8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SqlServer设置主键自增"><a href="#SqlServer设置主键自增" class="headerlink" title="SqlServer设置主键自增"></a>SqlServer设置主键自增</h1><p>首先 : 如果想修改某列为自增长列,必须要 删除重建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">–删除主键约束 (如果要修改列存在约束,需要删除约束)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> pkidName</span><br><span class="line">–删除字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> id</span><br><span class="line">–增加自增长字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">ADD</span> id <span class="type">int</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">–增加主键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">Add</span> <span class="keyword">constraint</span> pkidName <span class="keyword">primary</span> key (id)</span><br></pre></td></tr></table></figure><p>新建表时创建自增长列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableName</span><br><span class="line">(ID <span class="type">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">COL1 <span class="type">NCHAR</span>(<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> PKID <span class="keyword">PRIMARY</span> KEY (ID)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果想要在查询时生成一个索引列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">SELECT</span> <span class="keyword">NULL</span>)) <span class="keyword">AS</span> UniqueID,</span><br><span class="line">  id,</span><br><span class="line">  lastname</span><br><span class="line"><span class="keyword">FROM</span> tablename</span><br></pre></td></tr></table></figure><blockquote><p>本文参考CSDN博主「baojiangfeng」<br>原文链接：<a href="https://blog.csdn.net/baojiangfeng/article/details/72829243">https://blog.csdn.net/baojiangfeng/article/details/72829243</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SqlServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat 查看本地连接密码</title>
      <link href="/posts/1df3824e.html"/>
      <url>/posts/1df3824e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Navicat-查看本地连接密码"><a href="#Navicat-查看本地连接密码" class="headerlink" title="Navicat 查看本地连接密码"></a>Navicat 查看本地连接密码</h3><h4 id="第一步，找到数据库连接登录密码（密文显示）"><a href="#第一步，找到数据库连接登录密码（密文显示）" class="headerlink" title="第一步，找到数据库连接登录密码（密文显示）"></a>第一步，找到数据库连接登录密码（密文显示）</h4><h5 id="方案一，用-navicat-导出连接，查看密码（推荐）"><a href="#方案一，用-navicat-导出连接，查看密码（推荐）" class="headerlink" title="方案一，用 navicat 导出连接，查看密码（推荐）"></a>方案一，用 navicat 导出连接，查看密码（推荐）</h5><p>文件 &gt; 导出连接</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223602608-1797248032.png" alt="image-20231116223601739"></p><p>选择要导出的连接，勾选导出密码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223613539-218168637.png" alt="image-20211109142548787"></p><p>这样就得到了加密显示的连接密码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223630441-2084299929.png" alt="image-20211109142824853"></p><h5 id="方案二，通过注册表查看加密显示的密码"><a href="#方案二，通过注册表查看加密显示的密码" class="headerlink" title="方案二，通过注册表查看加密显示的密码"></a>方案二，通过注册表查看加密显示的密码</h5><p>按快捷键 Win+R 在弹出的运行窗口中输入 regedit  点击确定 打开注册表编辑器</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223644861-290599067.png" alt="image-20211109143350339"></p><p>找到   计算机\HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\NavicatMSSQL\Servers</p><p>Servers 目录下就是保存在本地的连接</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223654798-491183201.png" alt="image-20211109143737524"></p><p>双击右侧Pwd 即可赋值加密显示的密码字符串</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223709300-540846032.png" alt="image-20211109144046434"></p><h4 id="第二步，对密码解密"><a href="#第二步，对密码解密" class="headerlink" title="第二步，对密码解密"></a>第二步，对密码解密</h4><p>复制如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">FatSmallTools</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavicatPassword</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$version</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesKey</span> = <span class="string">&#x27;libcckeylibcckey&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesIv</span> = <span class="string">&#x27;libcciv libcciv &#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowString</span> = <span class="string">&#x27;3DC5CA39&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowKey</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowIv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$version</span> = <span class="number">12</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;version = <span class="variable">$version</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowKey = <span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;3DC5CA39&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowIv = <span class="title function_ invoke__">hex2bin</span>(<span class="string">&#x27;d9c7c3c8870d64bd&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptEleven</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>), <span class="variable">$currentVector</span>));</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$temp</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">xorBytes</span>(<span class="params"><span class="variable">$str1</span>, <span class="variable">$str2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str1</span>[<span class="variable">$i</span>]) ^ <span class="title function_ invoke__">ord</span>(<span class="variable">$str2</span>[<span class="variable">$i</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptTwelve</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptEleven</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$encryptedBlock</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">decryptBlock</span>(<span class="variable">$encryptedBlock</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$encryptedBlock</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptTwelve</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">FatSmallTools</span>\<span class="title">NavicatPassword</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//需要指定版本，11或12</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//$navicatPassword = new NavicatPassword(12);</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$navicatPassword</span> = <span class="keyword">new</span> <span class="title class_">NavicatPassword</span>(<span class="number">11</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="variable">$decode</span> = <span class="variable">$navicatPassword</span>-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="string">&#x27;15057D7BA390&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$decode</span>.<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>打开网页  <a href="https://tool.lu/coderunner/">https://tool.lu/coderunner/</a>   或   <a href="http://www.dooccn.com/php7/">http://www.dooccn.com/php7/</a>  可在线运行代码</p><p>将原来内容替换为复制的代码块，将密码替换，点击执行 即可对密码进行解密</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223725447-1652122857.png" alt="image-20211109144818913"></p><p>如果执行后的密码乱码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223743077-749080589.png" alt="image-20211109145143891"></p><p>更改一下版本即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116223755429-136772544.png" alt="image-20211109145235122"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql判空陷阱</title>
      <link href="/posts/6cc01012.html"/>
      <url>/posts/6cc01012.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Mysql使用 <code>&lt;&gt; &#39;&#39;</code> 判空时数值类型字段会过滤掉值为0 的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230714170917798-1473273873.png" alt="image-20230714170917169"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE userid &lt;&gt; &#x27;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230714171220997-28391343.png" alt="image-20230714171221940"></p><p>文本类型字段可以过滤掉为null 和空串的数据并且不会把为0的数据过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE Sname &lt;&gt; &#x27;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202307/2233039-20230714171127769-998504998.png" alt="image-20230714171128337"></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法使用表情符号</title>
      <link href="/posts/9e32f743.html"/>
      <url>/posts/9e32f743.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>语法代码</p></blockquote><p><strong>使用语法</strong>：<code>&amp;#x符号编码;</code> </p><p>其中符号编码可以从   <a href="https://apps.timwhitlock.info/emoji/tables/unicode#block-4-enclosed-characters">Emoji Unicode Tables</a>  中获取到</p><p>例如我要用下面这个小火箭图标 它的编码是1F680 ，那么就是  <code>&amp;#x1F680;</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120215955198-1479885006.png" alt="image-20231120215954819"></p><blockquote><p>也可以直接复制</p></blockquote><p>有很多网站 将表情符号按类别进行收录，例如 <a href="http://www.fhdq.net/emoji/emojifuhao.html">emoji符号大全</a></p><blockquote><p>常用</p></blockquote><p>🌹🍀🍎💰📱🌙🍁🍂🍃🌷💎🔪🔫🏀⚽⚡👄👍🔥</p><blockquote><p>表情</p></blockquote><p>😀😃😄😁😆😅🤣😂🙂🙃😉😊😇🥰😍🤩😘😗☺️😚😙🥲😋😛😜🤪😝🤑🤗🤭🤫🤔🤐🤨😐😑😶😏😒🙄😬🤥😌😔😪🤤😴😷🤒🤕🤢🤮🤧🥵🥶🥴😵🤯🤠🥳🥸😎🤓🧐😕😟🙁☹️😮😯😲😳🥺😦😧😨😰😥😢😭😱😖😣😞😓😩😫🥱😤😡😠🤬</p><blockquote><p>人物</p></blockquote><p>👶🧒👦👧🧑👱👨🧔👨‍🦰👨‍🦱👨‍🦳👨‍🦲👩👩‍🦰🧑‍🦰👩‍🦱🧑‍🦱👩‍🦳🧑‍🦳👩‍🦲🧑‍🦲👱‍♀️👱‍♂️🧓👴👵🙍🙍‍♂️🙍‍♀️🙎🙎‍♂️🙎‍♀️🙅🙅‍♂️🙅‍♀️🙆🙆‍♂️🙆‍♀️💁💁‍♂️💁‍♀️🙋🙋‍♂️🙋‍♀️🧏🧏‍♂️🧏‍♀️🙇🙇‍♂️🙇‍♀️🤦🤦‍♂️🤦‍♀️🤷🤷‍♂️🤷‍♀️🧑‍⚕️👨‍⚕️👩‍⚕️🧑‍🎓👨‍🎓👩‍🎓🧑‍🏫👨‍🏫👩‍🏫🧑‍⚖️👨‍⚖️👩‍⚖️🧑‍🌾👨‍🌾👩‍🌾🧑‍🍳👨‍🍳👩‍🍳🧑‍🔧👨‍🔧👩‍🔧🧑‍🏭👨‍🏭👩‍🏭🧑‍💼👨‍💼👩‍💼🧑‍🔬👨‍🔬👩‍🔬🧑‍💻👨‍💻👩‍💻🧑‍🎤👨‍🎤👩‍🎤🧑‍🎨👨‍🎨👩‍🎨🧑‍✈️👨‍✈️👩‍✈️🧑‍🚀👨‍🚀👩‍🚀🧑‍🚒👨‍🚒👩‍🚒👮👮‍♂️👮‍♀️🕵️🕵️‍♂️🕵️‍♀️💂💂‍♂️💂‍♀️🥷👷👷‍♂️👷‍♀️🤴👸👳👳‍♂️👳‍♀️👲🧕🤵🤵‍♂️🤵‍♀️👰👰‍♂️👰‍♀️🤰🤱👩‍🍼👨‍🍼🧑‍🍼👼🎅🤶🧑‍🎄🦸🦸‍♂️🦸‍♀️🦹🦹‍♂️🦹‍♀️🧙🧙‍♂️🧙‍♀️🧚🧚‍♂️🧚‍♀️🧛🧛‍♂️🧛‍♀️🧜🧜‍♂️🧜‍♀️🧝🧝‍♂️🧝‍♀️🧞🧞‍♂️🧞‍♀️🧟🧟‍♂️🧟‍♀️💆💆‍♂️💆‍♀️💇💇‍♂️💇‍♀️🚶🚶‍♂️🚶‍♀️🧍🧍‍♂️🧍‍♀️🧎🧎‍♂️🧎‍♀️🧑‍🦯👨‍🦯👩‍🦯🧑‍🦼👨‍🦼👩‍🦼🧑‍🦽👨‍🦽👩‍🦽🏃🏃‍♂️🏃‍♀️💃🕺🕴️👯👯‍♂️👯‍♀️🧖🧖‍♂️🧖‍♀️🧘🧑‍🤝‍🧑👭👫👬💏👩‍❤️‍💋‍👨👨‍❤️‍💋‍👨👩‍❤️‍💋‍👩💑👩‍❤️‍👨👨‍❤️‍👨👩‍❤️‍👩👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧👨‍👦👨‍👦‍👦👨‍👧👨‍👧‍👦👨‍👧‍👧👩‍👦👩‍👦‍👦👩‍👧👩‍👧‍👦👩‍👧‍👧🗣️👤👥🫂</p><blockquote><p>手势</p></blockquote><p>👋🤚🖐️✋🖖👌🤌🤏✌️🤞🤟🤘🤙👈👉👆🖕👇☝️👍👎✊👊🤛🤜👏🙌👐🤲🤝🙏✍️💅🤳💪</p><blockquote><p>日常</p></blockquote><p>👣👀👁️👄💋👂🦻👃👅🧠🫀🫁🦷🦴💪🦾🦿🦵🦶👓🕶️🥽🥼🦺👔👕👖🧣🧤🧥🧦👗👘🥻🩱🩲🩳👙👚👛👜👝🎒🩴👞👟🥾🥿👠👡🩰👢👑👒🎩🎓🧢🪖⛑️💄💅💍💼🌂☂️💈🛀🛌💥💫💦💨</p><blockquote><p>其他网页推荐</p></blockquote><p><a href="http://emojixd.com/">Emoji表情大全，颜文字百科</a></p><p><a href="https://www.zfuhao.com/emoji">找符号网</a></p><p><a href="https://bj.96weixin.com/emoji/">96编辑器</a></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/posts/d0edc1ed.html"/>
      <url>/posts/d0edc1ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>重置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- <span class="string">&#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;</span>) -d 11 -v 64 -p lion123 -port 22</span><br></pre></td></tr></table></figure><p><strong>更新环境</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update -y &amp;&amp; apt upgrade -y &amp;&amp; apt install -y curl wget sudo socat</span><br></pre></td></tr></table></figure><p><strong>安装 Docker</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | sh</span><br></pre></td></tr></table></figure><p>查看端口是否被占用 <code>lsof -i :port</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211213321639-124871882.png" alt="image-20231211213320802"></p><p>或者 <code>netstat -anp |grep port</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211225358748-1749741549.png" alt="image-20231211225357973"></p><p>结束进程 <code>kill -9 pid</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211213647745-122213543.png" alt="image-20231211213647203"></p><p>查看ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c</span><br></pre></td></tr></table></figure><p>docker </p><p>docker 查看容器 <code>docker ps</code>   </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211213450226-277229003.png" alt="image-20231211213449696"></p><p>部署docker-compose容器  <code>docker-compose up -d</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211214853543-1527502799.png" alt="image-20231211214852943"></p><p>查看 Docker 内网地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPTV电视直播源搜索引擎推荐</title>
      <link href="/posts/d2a1d350.html"/>
      <url>/posts/d2a1d350.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、工具介绍"><a href="#一、工具介绍" class="headerlink" title="一、工具介绍"></a>一、工具介绍</h1><p>可以聚合搜索个平台直播源</p><p>地址：<a href="https://www.foodieguide.com/iptvsearch/">https://www.foodieguide.com/iptvsearch/</a></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217101716762-411465724.png" alt="image-20231217101714726"></p><h1 id="二、使用说明"><a href="#二、使用说明" class="headerlink" title="二、使用说明"></a>二、使用说明</h1><p>以 CCTV13 新闻频道为例，搜索 CCTV13 新闻，凭感觉找一下，复制链接地址</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217102014129-1408157893.png" alt="image-20231217102008527"></p><p>打开PotPlayer &#x3D;&gt; 打开 &#x3D;&gt; 打开链接 </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217102225331-1469596908.png" alt="image-20231217102213631"></p><p>粘贴复制的链接地址，点击确定后会自动解析并播放</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217102349289-913865895.png" alt="image-20231217102337387"></p><p>效果如下</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217102015111-948307728.png" alt="image-20231217102002046"></p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键</title>
      <link href="/posts/610bdf07.html"/>
      <url>/posts/610bdf07.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + F</td><td align="left">在当前文件进行文本查找 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + R</td><td align="left">在当前文件进行文本替换 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Z</td><td align="left">撤销 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Y</td><td align="left">删除光标所在行 或 删除选中的行 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + X</td><td align="left">剪切光标所在行 或 剪切选择内容</td></tr><tr><td align="left">Ctrl + C</td><td align="left">复制光标所在行 或 复制选择内容</td></tr><tr><td align="left">Ctrl + D</td><td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + W</td><td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + E</td><td align="left">显示最近打开的文件记录列表</td></tr><tr><td align="left">Ctrl + N</td><td align="left">根据输入的 <strong>类名</strong> 查找类文件</td></tr><tr><td align="left">Ctrl + G</td><td align="left">在当前文件跳转到指定行处</td></tr><tr><td align="left">Ctrl + J</td><td align="left">插入自定义动态代码模板</td></tr><tr><td align="left">Ctrl + P</td><td align="left">方法参数提示显示</td></tr><tr><td align="left">Ctrl + Q</td><td align="left">光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td align="left">Ctrl + U</td><td align="left">前往当前光标所在的方法的父类的方法 &#x2F; 接口定义</td></tr><tr><td align="left">Ctrl + B</td><td align="left">进入光标所在的方法&#x2F;变量的接口或是定义出，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td align="left">Ctrl + K</td><td align="left">版本控制提交项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="left">Ctrl + T</td><td align="left">版本控制更新项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="left">Ctrl + H</td><td align="left">显示当前类的层次结构</td></tr><tr><td align="left">Ctrl + O</td><td align="left">选择可重写的方法</td></tr><tr><td align="left">Ctrl + I</td><td align="left">选择可继承的方法</td></tr><tr><td align="left">Ctrl + +</td><td align="left">展开代码</td></tr><tr><td align="left">Ctrl + -</td><td align="left">折叠代码</td></tr><tr><td align="left">Ctrl + &#x2F;</td><td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + [</td><td align="left">移动光标到当前所在代码的花括号开始位置</td></tr><tr><td align="left">Ctrl + ]</td><td align="left">移动光标到当前所在代码的花括号结束位置</td></tr><tr><td align="left">Ctrl + F1</td><td align="left">在光标所在的错误代码出显示错误信息</td></tr><tr><td align="left">Ctrl + F3</td><td align="left">调转到所选中的词的下一个引用位置</td></tr><tr><td align="left">Ctrl + F4</td><td align="left">关闭当前编辑文件</td></tr><tr><td align="left">Ctrl + F8</td><td align="left">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td align="left">Ctrl + F9</td><td align="left">执行 Make Project 操作</td></tr><tr><td align="left">Ctrl + F11</td><td align="left">选中文件 &#x2F; 文件夹，使用助记符设定 &#x2F; 取消书签</td></tr><tr><td align="left">Ctrl + F12</td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td align="left">Ctrl + Enter</td><td align="left">智能分隔行</td></tr><tr><td align="left">Ctrl + End</td><td align="left">跳到文件尾</td></tr><tr><td align="left">Ctrl + Home</td><td align="left">跳到文件头</td></tr><tr><td align="left">Ctrl + Space</td><td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Delete</td><td align="left">删除光标后面的单词或是中文句</td></tr><tr><td align="left">Ctrl + BackSpace</td><td align="left">删除光标前面的单词或是中文句</td></tr><tr><td align="left">Ctrl + 1,2,3…9</td><td align="left">定位到对应数值的书签位置</td></tr><tr><td align="left">Ctrl + 左键单击</td><td align="left">在打开的文件标题上，弹出该文件路径</td></tr><tr><td align="left">Ctrl + 光标定位</td><td align="left">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td></tr><tr><td align="left">Ctrl + 左方向键</td><td align="left">光标跳转到当前单词 &#x2F; 中文句的左侧开头位置</td></tr><tr><td align="left">Ctrl + 右方向键</td><td align="left">光标跳转到当前单词 &#x2F; 中文句的右侧开头位置</td></tr><tr><td align="left">Ctrl + 前方向键</td><td align="left">等效于鼠标滚轮向前效果</td></tr><tr><td align="left">Ctrl + 后方向键</td><td align="left">等效于鼠标滚轮向后效果</td></tr></tbody></table><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Alt + &#96;</td><td align="left">显示版本控制常用操作菜单弹出层</td></tr><tr><td align="left">Alt + Q</td><td align="left">弹出一个提示，显示当前类的声明 &#x2F; 上下文信息</td></tr><tr><td align="left">Alt + F1</td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td align="left">Alt + F2</td><td align="left">对于前面页面，显示各类浏览器打开目标选择弹出层</td></tr><tr><td align="left">Alt + F3</td><td align="left">选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td align="left">Alt + F7</td><td align="left">查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方</td></tr><tr><td align="left">Alt + F8</td><td align="left">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td align="left">Alt + Home</td><td align="left">定位 &#x2F; 显示到当前文件的 <code>Navigation Bar</code></td></tr><tr><td align="left">Alt + Enter</td><td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td></tr><tr><td align="left">Alt + Insert</td><td align="left">代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</td></tr><tr><td align="left">Alt + 左方向键</td><td align="left">按左方向切换当前已打开的文件视图</td></tr><tr><td align="left">Alt + 右方向键</td><td align="left">按右方向切换当前已打开的文件视图</td></tr><tr><td align="left">Alt + 前方向键</td><td align="left">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td align="left">Alt + 后方向键</td><td align="left">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td align="left">Alt + 1,2,3…9</td><td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Shift + F1</td><td align="left">如果有外部文档可以连接外部文档</td></tr><tr><td align="left">Shift + F2</td><td align="left">跳转到上一个高亮错误 或 警告位置</td></tr><tr><td align="left">Shift + F3</td><td align="left">在查找模式下，查找匹配上一个</td></tr><tr><td align="left">Shift + F4</td><td align="left">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td align="left">Shift + F6</td><td align="left">对文件 &#x2F; 文件夹 重命名</td></tr><tr><td align="left">Shift + F7</td><td align="left">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td align="left">Shift + F8</td><td align="left">在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td></tr><tr><td align="left">Shift + F9</td><td align="left">等效于点击工具栏的 <code>Debug</code> 按钮</td></tr><tr><td align="left">Shift + F10</td><td align="left">等效于点击工具栏的 <code>Run</code> 按钮</td></tr><tr><td align="left">Shift + F11</td><td align="left">弹出书签显示层</td></tr><tr><td align="left">Shift + Tab</td><td align="left">取消缩进</td></tr><tr><td align="left">Shift + ESC</td><td align="left">隐藏当前 或 最后一个激活的工具窗口</td></tr><tr><td align="left">Shift + End</td><td align="left">选中光标到当前行尾位置</td></tr><tr><td align="left">Shift + Home</td><td align="left">选中光标到当前行头位置</td></tr><tr><td align="left">Shift + Enter</td><td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="left">Shift + 左键单击</td><td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr><tr><td align="left">Shift + 滚轮前后滚动</td><td align="left">当前文件的横向滚动轴滚动</td></tr></tbody></table><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Alt + L</td><td align="left">格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Alt + O</td><td align="left">优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Alt + I</td><td align="left">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td align="left">Ctrl + Alt + T</td><td align="left">对选中的代码弹出环绕选项弹出层</td></tr><tr><td align="left">Ctrl + Alt + J</td><td align="left">弹出模板选择窗口，讲选定的代码加入动态模板中</td></tr><tr><td align="left">Ctrl + Alt + H</td><td align="left">调用层次</td></tr><tr><td align="left">Ctrl + Alt + B</td><td align="left">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td align="left">Ctrl + Alt + V</td><td align="left">快速引进变量</td></tr><tr><td align="left">Ctrl + Alt + Y</td><td align="left">同步、刷新</td></tr><tr><td align="left">Ctrl + Alt + S</td><td align="left">打开 IntelliJ IDEA 系统设置</td></tr><tr><td align="left">Ctrl + Alt + F7</td><td align="left">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td></tr><tr><td align="left">Ctrl + Alt + F11</td><td align="left">切换全屏模式</td></tr><tr><td align="left">Ctrl + Alt + Enter</td><td align="left">光标所在行上空出一行，光标定位到新行</td></tr><tr><td align="left">Ctrl + Alt + Home</td><td align="left">弹出跟当前文件有关联的文件弹出层</td></tr><tr><td align="left">Ctrl + Alt + Space</td><td align="left">类名自动完成</td></tr><tr><td align="left">Ctrl + Alt + 左方向键</td><td align="left">退回到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td></tr><tr><td align="left">Ctrl + Alt + 右方向键</td><td align="left">前进到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td></tr><tr><td align="left">Ctrl + Alt + 前方向键</td><td align="left">在查找模式下，跳到上个查找的文件</td></tr><tr><td align="left">Ctrl + Alt + 后方向键</td><td align="left">在查找模式下，跳到下个查找的文件</td></tr></tbody></table><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + F</td><td align="left">根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + R</td><td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + J</td><td align="left">自动将下一行合并到当前行末尾 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + Z</td><td align="left">取消撤销 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + W</td><td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + N</td><td align="left">通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + U</td><td align="left">对选中的代码进行大 &#x2F; 小写轮流转换 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + T</td><td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td align="left">Ctrl + Shift + C</td><td align="left">复制当前文件磁盘路径到剪贴板</td></tr><tr><td align="left">Ctrl + Shift + V</td><td align="left">弹出缓存的最近拷贝的内容管理器弹出层</td></tr><tr><td align="left">Ctrl + Shift + E</td><td align="left">显示最近修改的文件列表的弹出层</td></tr><tr><td align="left">Ctrl + Shift + H</td><td align="left">显示方法层次结构</td></tr><tr><td align="left">Ctrl + Shift + B</td><td align="left">跳转到类型声明处</td></tr><tr><td align="left">Ctrl + Shift + I</td><td align="left">快速查看光标所在的方法 或 类的定义</td></tr><tr><td align="left">Ctrl + Shift + A</td><td align="left">查找动作 &#x2F; 设置</td></tr><tr><td align="left">Ctrl + Shift + &#x2F;</td><td align="left">代码块注释 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + [</td><td align="left">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td align="left">Ctrl + Shift + ]</td><td align="left">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td align="left">Ctrl + Shift + +</td><td align="left">展开所有代码</td></tr><tr><td align="left">Ctrl + Shift + -</td><td align="left">折叠所有代码</td></tr><tr><td align="left">Ctrl + Shift + F7</td><td align="left">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td align="left">Ctrl + Shift + F8</td><td align="left">在 Debug 模式下，指定断点进入条件</td></tr><tr><td align="left">Ctrl + Shift + F9</td><td align="left">编译选中的文件 &#x2F; 包 &#x2F; Module</td></tr><tr><td align="left">Ctrl + Shift + F12</td><td align="left">编辑器最大化</td></tr><tr><td align="left">Ctrl + Shift + Space</td><td align="left">智能代码提示</td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">自动结束代码，行末自动添加分号 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + Backspace</td><td align="left">退回到上次修改的地方</td></tr><tr><td align="left">Ctrl + Shift + 1,2,3…9</td><td align="left">快速添加指定数值的书签</td></tr><tr><td align="left">Ctrl + Shift + 左方向键</td><td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句</td></tr><tr><td align="left">Ctrl + Shift + 右方向键</td><td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句</td></tr><tr><td align="left">Ctrl + Shift + 左方向键</td><td align="left">在光标焦点是在工具选项卡上，缩小选项卡区域</td></tr><tr><td align="left">Ctrl + Shift + 右方向键</td><td align="left">在光标焦点是在工具选项卡上，扩大选项卡区域</td></tr><tr><td align="left">Ctrl + Shift + 前方向键</td><td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td align="left">Ctrl + Shift + 后方向键</td><td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Alt + Shift + N</td><td align="left">选择 &#x2F; 添加 task</td></tr><tr><td align="left">Alt + Shift + F</td><td align="left">显示添加到收藏夹弹出层</td></tr><tr><td align="left">Alt + Shift + C</td><td align="left">查看最近操作项目的变化情况列表</td></tr><tr><td align="left">Alt + Shift + F</td><td align="left">添加到收藏夹</td></tr><tr><td align="left">Alt + Shift + I</td><td align="left">查看项目当前文件</td></tr><tr><td align="left">Alt + Shift + F7</td><td align="left">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr><tr><td align="left">Alt + Shift + F9</td><td align="left">弹出 <code>Debug</code> 的可选择菜单</td></tr><tr><td align="left">Alt + Shift + F10</td><td align="left">弹出 <code>Run</code> 的可选择菜单</td></tr><tr><td align="left">Alt + Shift + 左键双击</td><td align="left">选择被双击的单词 &#x2F; 中文句，按住不放，可以同时选择其他单词 &#x2F; 中文句</td></tr><tr><td align="left">Alt + Shift + 前方向键</td><td align="left">移动光标所在行向上移动</td></tr><tr><td align="left">Alt + Shift + 后方向键</td><td align="left">移动光标所在行向下移动</td></tr></tbody></table><h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + Alt + V</td><td align="left">无格式黏贴</td></tr><tr><td align="left">Ctrl + Shift + Alt + N</td><td align="left">前往指定的变量 &#x2F; 方法</td></tr><tr><td align="left">Ctrl + Shift + Alt + S</td><td align="left">打开当前项目设置</td></tr><tr><td align="left">Ctrl + Shift + Alt + C</td><td align="left">复制参考信息</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">F2</td><td align="left">跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td></tr><tr><td align="left">F3</td><td align="left">在查找模式下，定位到下一个匹配处</td></tr><tr><td align="left">F4</td><td align="left">编辑源</td></tr><tr><td align="left">F7</td><td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td align="left">F8</td><td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td align="left">F9</td><td align="left">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td align="left">F11</td><td align="left">添加书签</td></tr><tr><td align="left">F12</td><td align="left">回到前一个工具窗口</td></tr><tr><td align="left">Tab</td><td align="left">缩进</td></tr><tr><td align="left">ESC</td><td align="left">从工具窗口进入代码文件窗口</td></tr><tr><td align="left">连按两次Shift</td><td align="left">弹出 <code>Search Everywhere</code> 弹出层</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git快速入门</title>
      <link href="/posts/4a382a13.html"/>
      <url>/posts/4a382a13.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143145322-413927943.png" alt="image-20231118143145163"> <code>everything-is-local</code> </p><blockquote><p>Author：Shine</p><p>Version：9.0.2</p><p>视频教程：<a href="https://www.bilibili.com/video/BV1Mf4y117f3?p=5">https://www.bilibili.com/video/BV1Mf4y117f3?p=5</a></p><p>文章来自B站博主，如有侵权联系删除</p></blockquote><p>[TOC]</p><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr><blockquote><ul><li><p>在单人开发过程中，需要进行版本管理，以利于开发进度的控制。</p></li><li><p>在多人开发过程中，不仅需要<strong>版本管理</strong>，还需要进行<strong>多人协同控制</strong>。</p></li></ul></blockquote><h3 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h3><hr><blockquote><ul><li>Git是一个<strong>开源的分布式版本控制系统</strong>，用于敏捷高效地处理任何或小或大的项目。</li><li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li><li>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></li></ul></blockquote><h3 id="三、Git安装"><a href="#三、Git安装" class="headerlink" title="三、Git安装"></a>三、Git安装</h3><hr><h4 id="3-1-下载Git"><a href="#3-1-下载Git" class="headerlink" title="3.1 下载Git"></a>3.1 下载Git</h4><blockquote><p>下载Git <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></blockquote><table><thead><tr><th align="center">下载git</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143203621-2006321301.png" alt="image-20231118143203855"></td></tr></tbody></table><h4 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h4><blockquote><p>安装，除了安装位置外，其他一直下一步即可</p></blockquote><h4 id="3-3-基本配置"><a href="#3-3-基本配置" class="headerlink" title="3.3 基本配置"></a>3.3 基本配置</h4><blockquote><ul><li><p>安装后，打开git的cmd窗口 ，自报家门</p></li><li><p>如下信息会在提交代码时要使用，记录在你的每次提交中。以后才知道哪次提交是谁做的。</p></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;  #用户名</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;  #邮箱</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看信息</span></span><br><span class="line">git config -l </span><br></pre></td></tr></table></figure><h4 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h4><blockquote><p>测试：cmd中执行 ,查看git版本</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version  </span><br></pre></td></tr></table></figure><h3 id="四、架构"><a href="#四、架构" class="headerlink" title="四、架构"></a>四、架构</h3><hr><blockquote><ul><li><p>版本库：工作区中有一个隐藏目录 <code>.git</code>，这个目录不属于工作区，而是git的 <code>版本库</code>，是git管理的所有内容 </p></li><li><p>暂存区：版本库中包含一个临时区域，保存下一步要提交的文件。</p></li><li><p>分支：版本库中包含若干分支，提交的文件存储在分支中</p></li></ul></blockquote><table><thead><tr><th align="center">架构图</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143254796-1303010917.jpg" alt="暂存区"></td></tr></tbody></table><h3 id="五、仓库"><a href="#五、仓库" class="headerlink" title="五、仓库"></a>五、仓库</h3><hr><blockquote><p>对应的就是一个<a href="">目录</a>，这个目录中的所有文件被git管理起来。</p><p>以后会将一个<a href="">项目的根目录</a>，作为仓库。</p><p>仓库中的每个文件的改动 都由git跟踪。</p></blockquote><h4 id="5-1-新建仓库"><a href="#5-1-新建仓库" class="headerlink" title="5.1 新建仓库"></a>5.1 新建仓库</h4><blockquote><p>选择一个目录，执行指令：<a href="">git init</a></p></blockquote><table><thead><tr><th align="center">新建仓库</th><th align="center">仓库目录</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143314450-1391681047.png" alt="image-20231118143314616"></td><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143325501-711159843.png" alt="image-20231118143325822"></td></tr></tbody></table><h4 id="5-2-工作区"><a href="#5-2-工作区" class="headerlink" title="5.2 工作区"></a>5.2 工作区</h4><blockquote><p>执行<a href="">git init</a>的目录即为工作区，如上例，<a href="">D:\repo1</a>目录即为工作区【不包含<a href="">.git</a>目录】</p></blockquote><blockquote><p>所有文件，都首先在工作区新建，然后可以存入仓库(版本库)，进行版本控制。</p></blockquote><h4 id="5-3-暂存区"><a href="#5-3-暂存区" class="headerlink" title="5.3 暂存区"></a>5.3 暂存区</h4><blockquote><p>暂存区也在 <a href="">.git</a> 目录内，工作区的文件进入仓库时，要先进入暂存区。</p></blockquote><h4 id="5-4-分支"><a href="#5-4-分支" class="headerlink" title="5.4 分支"></a>5.4 分支</h4><blockquote><p>版本控制，简单说，就是记录文件的诸多版本，分支就是这些版本的最终记录位置。</p></blockquote><h3 id="六、基本操作"><a href="#六、基本操作" class="headerlink" title="六、基本操作"></a>六、基本操作</h3><hr><h4 id="6-1-查看仓库状态"><a href="#6-1-查看仓库状态" class="headerlink" title="6.1 查看仓库状态"></a>6.1 查看仓库状态</h4><blockquote><p>执行 <a href="">git  status</a> 可以看到工作区中文件的状态</p></blockquote><table><thead><tr><th align="center">未记录过的文件，是未跟踪状态</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143339822-1000730504.png" alt="image-20231118143339996"></td></tr></tbody></table><h4 id="6-2-暂存文件"><a href="#6-2-暂存文件" class="headerlink" title="6.2 暂存文件"></a>6.2 暂存文件</h4><blockquote><p>执行 <a href="">git add .</a> 将工作区中的文件全部<a href="">存入暂存区</a></p></blockquote><table><thead><tr><th align="center">将工作区中的文件存入暂存区</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143353117-1494446251.png" alt="image-20231118143353312"></td></tr></tbody></table><h4 id="6-3-提交文件"><a href="#6-3-提交文件" class="headerlink" title="6.3 提交文件"></a>6.3 提交文件</h4><blockquote><p>执行 <a href="">git commit -m “这里写提交的描述信息”</a> 作用是将暂存区的文件存入分支，形成一个版本</p></blockquote><table><thead><tr><th align="center">提交文件，形成一个版本</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143405386-1075167476.png" alt="image-20231118143405652"></td></tr></tbody></table><h3 id="七、远程仓库"><a href="#七、远程仓库" class="headerlink" title="七、远程仓库"></a>七、远程仓库</h3><hr><blockquote><p>第5章中的仓库，其实是本地仓库。</p><p>当多人协同开发时，每人都在自己的本地仓库维护版本。</p><p>但很重要的一点是，多人之间需要共享代码、合并代码，此时就需要一个<a href="">远程仓库</a>。</p></blockquote><h4 id="7-1-远程仓库工作模式"><a href="#7-1-远程仓库工作模式" class="headerlink" title="7.1 远程仓库工作模式"></a>7.1 远程仓库工作模式</h4><table><thead><tr><th align="center">远程仓库工作模式</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143432213-672457768.png" alt="image-20231118143432369"></td></tr></tbody></table><h4 id="7-2-远程仓库选型"><a href="#7-2-远程仓库选型" class="headerlink" title="7.2 远程仓库选型"></a>7.2 远程仓库选型</h4><blockquote><ul><li><p>有很多远程仓库可以选择，比如 github(<a href="https://github.com/">https://github.com/</a>),码云(<a href="https://gitee.com/">https://gitee.com/</a>)；</p><p> 此两种可以注册自己测试使用，但如果是商业项目，需要更多支持需要付费。</p></li><li><p>公司内部也可以有自己构建的远程仓库(<a href="http://qianfeng.qfjava.cn:8087/users/sign_in">http://qianfeng.qfjava.cn:8087/users/sign_in</a>)。</p></li></ul></blockquote><h4 id="7-3-基本操作"><a href="#7-3-基本操作" class="headerlink" title="7.3 基本操作"></a>7.3 基本操作</h4><blockquote><p>每个开发人员，在面对远程仓库时，会面临的一些基本操作。</p></blockquote><h5 id="7-3-1-注册git服务器账号"><a href="#7-3-1-注册git服务器账号" class="headerlink" title="7.3.1 注册git服务器账号"></a>7.3.1 注册git服务器账号</h5><blockquote><p>在 <a href="https://gitee.com/">码云</a> 注册账号，并登录。</p><p>进入公司后，很可能会使用公司自己搭建的git服务器，则账号向领导索要即可</p></blockquote><table><thead><tr><th align="center">点击注册，完成注册过程</th><th align="center"></th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143445731-1150239316.png" alt="image-20231118143446024"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">登录后显示主页</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143454963-1648476417.png" alt="image-20231118143455176"></td></tr></tbody></table><h5 id="7-3-2-新建远程仓库"><a href="#7-3-2-新建远程仓库" class="headerlink" title="7.3.2 新建远程仓库"></a>7.3.2 新建远程仓库</h5><table><thead><tr><th align="center">创建远程私有仓库-01</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143507151-1782049653.png" alt="image-20231118143507432"></td></tr></tbody></table><table><thead><tr><th align="center">创建远程私有仓库-02</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143522420-251528464.png" alt="image-20231118143522580"></td></tr></tbody></table><table><thead><tr><th align="center">创建远程私有仓库-03</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143544560-1907469803.png" alt="image-20231118143544615"></td></tr></tbody></table><h5 id="7-3-3-本地关联远程仓库"><a href="#7-3-3-本地关联远程仓库" class="headerlink" title="7.3.3 本地关联远程仓库"></a>7.3.3 本地关联远程仓库</h5><blockquote><p>本文档中选用仓库的 https协议的地址，将此地址关联到本地git中</p></blockquote><table><thead><tr><th align="center">如此后，本地即可用“origin” 代指远程仓库</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143559478-2029771024.png" alt="image-20231118143559692"></td></tr></tbody></table><h5 id="7-3-4-推送文件到远程仓库"><a href="#7-3-4-推送文件到远程仓库" class="headerlink" title="7.3.4 推送文件到远程仓库"></a>7.3.4 推送文件到远程仓库</h5><blockquote><p>将本地仓库中已经commit的内容push到远程仓库，以共享自己的代码。</p></blockquote><table><thead><tr><th align="center">push</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143611832-385341346.png" alt="image-20231118143611899"></td></tr></tbody></table><table><thead><tr><th align="center">输入凭证，如此码云才能接受此次上传的内容</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143619342-1220170260.png" alt="image-20231118143619627"></td></tr></tbody></table><h5 id="7-3-5-克隆远程仓库"><a href="#7-3-5-克隆远程仓库" class="headerlink" title="7.3.5 克隆远程仓库"></a>7.3.5 克隆远程仓库</h5><blockquote><p>如果仓库已经由别人创建完毕，我们需要其中的内容，则可以通过 <a href="">git clone</a> 将其复制到本地。</p></blockquote><table><thead><tr><th align="center">新建目录“repo2”，然后在其中执行 git clone</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143631629-1109707034.png" alt="image-20231118143631870"></td></tr></tbody></table><table><thead><tr><th align="center">远程仓库，复制到本地，并自动初始化为一个本地仓库</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143640754-1026926648.png" alt="image-20231118143641007"></td></tr></tbody></table><h5 id="7-3-6-代码共享"><a href="#7-3-6-代码共享" class="headerlink" title="7.3.6 代码共享"></a>7.3.6 代码共享</h5><blockquote><p>多人协同开发时，写好代码的<a href="">git push</a> 上传到远程仓库；需要代码的 <a href="">git pull</a> 拉取代码即可。 </p></blockquote><table><thead><tr><th align="center">有人再次将本地仓库内容，上传到了远程仓库</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143656532-1079550092.png" alt="image-20231118143656646"></td></tr></tbody></table><table><thead><tr><th align="center">重点：此时另一方如果想获得更新，则需要做一次拉取 git pull</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143717784-116025964.png" alt="image-20231118143717839"></td></tr></tbody></table><h5 id="7-3-7-命令汇总"><a href="#7-3-7-命令汇总" class="headerlink" title="7.3.7 命令汇总"></a>7.3.7 命令汇总</h5><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git   remote   add  标识名(master)  远程地址</td><td>本地关联远程仓库</td></tr><tr><td>git   push  标识名  master</td><td>将本地仓库内容上传到远程仓库</td></tr><tr><td>git   pull  标识名   master</td><td>从远程仓库下载内容到本地仓库</td></tr><tr><td>git   clone  远程地址</td><td>将远程仓库复制到本地，并自动形成一个本地仓库</td></tr></tbody></table><h3 id="八、分支"><a href="#八、分支" class="headerlink" title="八、分支"></a>八、分支</h3><hr><h4 id="8-1-分支简介"><a href="#8-1-分支简介" class="headerlink" title="8.1 分支简介"></a>8.1 分支简介</h4><blockquote><ul><li><p>分支，是一个个版本最终存储的位置。</p></li><li><p>分支，就是一条时间线，每次<a href="">git commit</a>形成一个个版本，一个个版本依次存储在分支的一个个提交点上。</p></li></ul></blockquote><table><thead><tr><th align="center">分支由多个提交点组成，分支上会有一个指针，默认总是指向最新的提交点</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143731726-714202560.png" alt="image-20231118143732008"></td></tr></tbody></table><h4 id="8-2-分支操作"><a href="#8-2-分支操作" class="headerlink" title="8.2 分支操作"></a>8.2 分支操作</h4><h5 id="8-2-1-查看分支"><a href="#8-2-1-查看分支" class="headerlink" title="8.2.1 查看分支"></a>8.2.1 查看分支</h5><blockquote><ul><li><p>查看当前仓库的分支 <a href="">git branch</a></p></li><li><p>仓库中默认只有 master 分支</p></li><li><p>执行<a href="">git commit</a>时，默认是在master分支上保存版本。</p></li></ul></blockquote><table><thead><tr><th align="center">默认只有master分支</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143742537-332084392.png" alt="image-20231118143742800"></td></tr></tbody></table><h5 id="8-2-2-创建分支"><a href="#8-2-2-创建分支" class="headerlink" title="8.2.2 创建分支"></a>8.2.2 创建分支</h5><blockquote><ul><li><p>在商业项目开发过程中，我们不会轻易的在<a href="">master</a>分支上做操作。</p></li><li><p>我们会新建一个<a href="">开发用的分支</a>，在此分支上做版本的记录。</p><p>当代码确实没有问题时，才会将开发分支上成熟的代码版本添加到<a href="">master</a>分支上。</p></li><li><p>保证开发过程中，可以及时记录版本，又保证<a href="">master</a>分支上每个提交点都是稳健版本。</p></li></ul></blockquote><table><thead><tr><th align="center">创建分支</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143754848-957556736.png" alt="image-20231118143755022"></td></tr></tbody></table><h5 id="8-2-3-切换分支"><a href="#8-2-3-切换分支" class="headerlink" title="8.2.3 切换分支"></a>8.2.3 切换分支</h5><blockquote><ul><li><p>默认情况下，当前使用的分支是 master分支</p></li><li><p>可以切换到 dev分支，则后续的<a href="">git commit</a> 便会在dev分支上新建版本(提交点)</p></li></ul></blockquote><table><thead><tr><th align="center">切换分支</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143804217-1900571447.png" alt="image-20231118143804500"></td></tr></tbody></table><table><thead><tr><th align="center">再次查看分支情况</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143825025-689730459.png" alt="image-20231118143825278"></td></tr></tbody></table><h4 id="8-3-新建分支细节"><a href="#8-3-新建分支细节" class="headerlink" title="8.3 新建分支细节"></a>8.3 新建分支细节</h4><blockquote><p>新建分支时，新分支，默认有哪些内容？分支中包含了哪些次提交？</p></blockquote><h5 id="8-3-1-新分支初始内容"><a href="#8-3-1-新分支初始内容" class="headerlink" title="8.3.1 新分支初始内容"></a>8.3.1 新分支初始内容</h5><blockquote><p>每个分支都有一个<a href="">指针</a>，新建一个分支，首先是新建一个<a href="">指针</a>。</p><p>而且新分支的指针会和当前分支指向<a href="">同一个提交点</a>。</p><p>新分支包含的提交点就是从第一个提交点到分支指针指向的提交点。</p></blockquote><table><thead><tr><th align="center">每个分支都有一个指针，新建一个分支，首先是新建一个指针</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143834749-218331524.png" alt="image-20231118143834977"></td></tr></tbody></table><h5 id="8-3-2-多分支走向"><a href="#8-3-2-多分支走向" class="headerlink" title="8.3.2 多分支走向"></a>8.3.2 多分支走向</h5><blockquote><p>在master分支和新分支，分别进行 <a href="">git add</a> 和 <a href="">git commit</a></p><p>分支情况如下图：</p></blockquote><table><thead><tr><th align="center">master分支未动，在dev分支增加一次commit</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143844729-1685646913.png" alt="image-20231118143844920"></td></tr></tbody></table><table><thead><tr><th align="center">master分支增加一个commit，dev分支再增加一个commit</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143853761-2100266460.png" alt="image-20231118143854036"></td></tr></tbody></table><h5 id="8-3-3-分支提交日志"><a href="#8-3-3-分支提交日志" class="headerlink" title="8.3.3 分支提交日志"></a>8.3.3 分支提交日志</h5><blockquote><p>查看分支的提交日志，进而看到分支中提交点的详细情况。</p></blockquote><table><thead><tr><th align="center">提交情况如下</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143903270-1996358778.png" alt="image-20231118143903443"></td></tr></tbody></table><table><thead><tr><th align="center">查看当前分支的提交日志</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143914236-1573204487.png" alt="image-20231118143914437"></td></tr></tbody></table><h4 id="8-4-分支合并"><a href="#8-4-分支合并" class="headerlink" title="8.4 分支合并"></a>8.4 分支合并</h4><blockquote><p>两个分支内容的合并</p></blockquote><blockquote><p><a href="">git merge 分支a</a>  合并分支a</p></blockquote><blockquote><p>合并的方式有两种：快速合并 和  三方合并。</p></blockquote><h5 id="8-4-1-快速合并"><a href="#8-4-1-快速合并" class="headerlink" title="8.4.1 快速合并"></a>8.4.1 快速合并</h5><blockquote><p>如果分支A当前的修改，是完全基于分支B的修改而来，则B分支合并A分支，就是移动指针即可。</p></blockquote><table><thead><tr><th align="center">合并前分支状态</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143925643-969778620.png" alt="image-20231118143925883"></td></tr></tbody></table><table><thead><tr><th align="center">快速合并效果（master 合并 dev）</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143935005-1043958158.png" alt="image-20231118143935281"></td></tr></tbody></table><h5 id="8-4-2-三方合并"><a href="#8-4-2-三方合并" class="headerlink" title="8.4.2 三方合并"></a>8.4.2 三方合并</h5><blockquote><p>在不具备快速合并的条件下，会采用三方合并。</p></blockquote><table><thead><tr><th align="center">合并前，分支状态</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143943357-1762914460.png" alt="image-20231118143943601"></td></tr></tbody></table><table><thead><tr><th align="center">三方合并，将<code>2</code>和<code>3</code>的更改都累加在<code>1</code>上，形成新的提交点</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118143952957-919511155.png" alt="image-20231118143953218"></td></tr></tbody></table><blockquote><p>三方合并,它是把两个分支的最新快照（2 和 3）以及二者最近的共同祖先（1）进行三方合并，合并的结果是生成一个新的快照（并提交）</p></blockquote><h5 id="8-4-3-合并冲突"><a href="#8-4-3-合并冲突" class="headerlink" title="8.4.3 合并冲突"></a>8.4.3 合并冲突</h5><blockquote><p>两个分支进行合并，但它们含有对同一个文件的修改，则在合并时出现冲突，git无法决断该保留改文件哪个分支的修改。</p></blockquote><h6 id="8-4-3-1-冲突演示"><a href="#8-4-3-1-冲突演示" class="headerlink" title="8.4.3.1 冲突演示"></a>8.4.3.1 冲突演示</h6><blockquote><p>场景模拟如下：</p></blockquote><table><thead><tr><th align="center">master分支修改hig.txt文件</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144006702-745001772.png" alt="image-20231118144006786"></td></tr></tbody></table><table><thead><tr><th align="center">dev分支修改hig.txt</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144015375-1657289655.png" alt="image-20231118144015573"></td></tr></tbody></table><blockquote><p>在master分支 合并 dev分支</p></blockquote><table><thead><tr><th align="center">合并dev分支</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144026872-143489176.png" alt="image-20231118144027122"></td></tr></tbody></table><blockquote><p>此时，打开hig.txt 文件：</p></blockquote><table><thead><tr><th align="center">冲突后，git会将两个分支的内容都展示在文件中</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144036387-1048232826.png" alt="image-20231118144036653"></td></tr></tbody></table><h6 id="8-4-3-2-冲突解决"><a href="#8-4-3-2-冲突解决" class="headerlink" title="8.4.3.2 冲突解决"></a>8.4.3.2 冲突解决</h6><blockquote><p>出现冲突后，如要由两个开发人员当面协商，该如何取舍，为冲突文件定义最终内容。</p><p>解决方案：</p><ol><li>保留某一方的，删除另一方的</li><li>保留双方的</li><li>但无论如何，要记得删除  <a href="">&lt;&lt;&lt;&lt;  &#x3D;&#x3D;&#x3D;&#x3D;  &gt;&gt;&gt;&gt;</a> 这些</li><li>本质是两人协商为冲突的内容，定制出合理的内容。</li></ol></blockquote><table><thead><tr><th align="center">根据协商，再次编辑文件</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144045018-327103143.png" alt="image-20231118144045314"></td></tr></tbody></table><table><thead><tr><th align="center">提交 再次编辑后的文件</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144052315-1857104333.png" alt="image-20231118144052541"></td></tr></tbody></table><h3 id="九、Idea关联Git"><a href="#九、Idea关联Git" class="headerlink" title="九、Idea关联Git"></a>九、Idea关联Git</h3><hr><h4 id="9-1-关联Git"><a href="#9-1-关联Git" class="headerlink" title="9.1 关联Git"></a>9.1 关联Git</h4><blockquote><p><a href="">File &gt; Settings</a>  关联过程是自动的</p></blockquote><table><thead><tr><th align="center">此处关联是Idea可以自动完成的</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144102276-1322951384.png" alt="image-20231118144102453"></td></tr></tbody></table><h4 id="9-2-创建仓库"><a href="#9-2-创建仓库" class="headerlink" title="9.2 创建仓库"></a>9.2 创建仓库</h4><blockquote><ul><li><p>新建项目后，将项目目录创建为git仓库</p></li><li><p>注意： 要在建仓库前，设置<a href="">忽略文件 “.gitignore”</a></p><p>作用：被忽略的文件会被版本记录忽略，版本中不包含它们。</p><p>范围：不需要和其他开发共享的文件，具体见下图。</p></li></ul></blockquote><table><thead><tr><th align="center">创建仓库前，先添加忽略文件</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144114639-1865611775.png" alt="image-20231118144114831"></td></tr></tbody></table><table><thead><tr><th align="center">将项目目录初始化为一个仓库</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144127524-757573136.png" alt="image-20231118144127703"></td></tr><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144138727-831760856.png" alt="image-20231118144138949"></td></tr></tbody></table><h4 id="9-3-提交-commit"><a href="#9-3-提交-commit" class="headerlink" title="9.3 提交-commit"></a>9.3 提交-commit</h4><blockquote><p>创建好仓库后，做第一次提交。</p></blockquote><table><thead><tr><th align="center">选择提交菜单</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144148240-2083438892.png" alt="image-20231118144148478"></td></tr></tbody></table><table><thead><tr><th align="center">选择提交文件，定义提交信息</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144159202-828407079.png" alt="image-20231118144159392"></td></tr></tbody></table><table><thead><tr><th align="center">之后会有些友好提示，可以忽略，点击<code>“commit”</code>即可</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144221102-1985964648.png" alt="image-20231118144221350"></td></tr></tbody></table><h4 id="9-4-创建分支"><a href="#9-4-创建分支" class="headerlink" title="9.4 创建分支"></a>9.4 创建分支</h4><blockquote><p>新建开发分支</p></blockquote><table><thead><tr><th align="center">点击右下角链接，即可</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144234827-1002888359.png" alt="image-20231118144235117"></td></tr></tbody></table><table><thead><tr><th align="center">新建分支</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144245538-757811888.png" alt="image-20231118144245774"></td></tr></tbody></table><table><thead><tr><th align="center">查看当前分支</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144254918-773075157.png" alt="image-20231118144255200"></td></tr></tbody></table><h4 id="9-5-上传到远程仓库-push"><a href="#9-5-上传到远程仓库-push" class="headerlink" title="9.5 上传到远程仓库(push)"></a>9.5 上传到远程仓库(push)</h4><blockquote><ul><li><p>请首先参照第7章，创建一个远程仓库。</p></li><li><p>要求是裸库，且建议库名和项目名同名。</p></li></ul></blockquote><table><thead><tr><th align="center">选择<code>push</code>菜单</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144306655-424837620.png" alt="image-20231118144306707"></td></tr></tbody></table><table><thead><tr><th align="center">定义远程仓库地址</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144317202-300046318.png" alt="image-20231118144317457"></td></tr></tbody></table><table><thead><tr><th align="center">执行，push操作</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144325365-236094702.png" alt="image-20231118144325553"></td></tr></tbody></table><table><thead><tr><th align="center">push成功后 ，弹窗提示</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144338788-1427910688.png" alt="image-20231118144339015"></td></tr></tbody></table><h4 id="9-6-复制到本地仓库-clone"><a href="#9-6-复制到本地仓库-clone" class="headerlink" title="9.6 复制到本地仓库(clone)"></a>9.6 复制到本地仓库(clone)</h4><blockquote><p>如果有建好的远程仓库，比如公司内已经在用的仓库，或者github，码云上的一些公开仓库，</p><p>可以将远程仓库的项目复制到本地使用。</p></blockquote><table><thead><tr><th align="center">点击克隆菜单</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144349025-1428039724.png" alt="image-20231118144349039"></td></tr></tbody></table><table><thead><tr><th align="center">输入如远程仓库地址</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144357535-1083350856.png" alt="image-20231118144357724"></td></tr></tbody></table><table><thead><tr><th align="center">打开项目</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144406040-1306685056.png" alt="image-20231118144406209"></td></tr></tbody></table><table><thead><tr><th align="center">打开项目，选项</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144418593-293642869.png" alt="image-20231118144418880"></td></tr></tbody></table><h4 id="9-7-更新本地项目"><a href="#9-7-更新本地项目" class="headerlink" title="9.7 更新本地项目"></a>9.7 更新本地项目</h4><blockquote><p>如果远程仓库有更新，则你的本地项目也需要一起更新。</p></blockquote><table><thead><tr><th align="center">选择pull菜单</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144431806-432832249.png" alt="image-20231118144431994"></td></tr></tbody></table><table><thead><tr><th align="center">执行 pull操作</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144442620-1316725797.png" alt="image-20231118144442863"></td></tr></tbody></table><table><thead><tr><th align="center">更新日志显示</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144450713-2041852087.png" alt="image-20231118144450831"></td></tr></tbody></table><h4 id="9-8-冲突解决"><a href="#9-8-冲突解决" class="headerlink" title="9.8 冲突解决"></a>9.8 冲突解决</h4><blockquote><p>合并分支时，如果出现冲突，则需要解决冲突。</p></blockquote><table><thead><tr><th align="center">冲突出现，弹窗中可以选择如下</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144502121-1922182008.png" alt="image-20231118144502253"></td></tr></tbody></table><table><thead><tr><th align="center">也可以直接修改冲突文件，然后commit即可</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144510394-2088787457.png" alt="image-20231118144510675"></td></tr></tbody></table><h3 id="十、多人协同开发"><a href="#十、多人协同开发" class="headerlink" title="十、多人协同开发"></a>十、多人协同开发</h3><hr><blockquote><p>多人开发协同，git操作</p></blockquote><h4 id="10-1-项目管理员-项目经理"><a href="#10-1-项目管理员-项目经理" class="headerlink" title="10.1 项目管理员( 项目经理 )"></a>10.1 项目管理员( 项目经理 )</h4><blockquote><p>1&gt; 由管理员负责创建一个远程库，初始的库中什么也没有，为裸库。库的名称建议和项目同名</p></blockquote><blockquote><p>2&gt; 管理员会在idea中创建一个初始项目,其中包含.gitignore文件。                                                                                           并在项目根目录下 建立本地库。并建立 dev分支。</p></blockquote><blockquote><p>3&gt; 管理员将本地库上传到远程库</p></blockquote><blockquote><p>4&gt; 将其他开发人员拉入远程库的 <a href="">开发成员列表中</a> ，使得其他开发人员可以访问该远程库。</p><p>流程如下：</p></blockquote><table><thead><tr><th align="center">点击添加成员</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231117174343518-1649653212.jpg" alt="添加开发成员"></td></tr></tbody></table><table><thead><tr><th align="center">选择直接添加</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231117174419353-504100498.jpg" alt="添加开发成员2"></td></tr></tbody></table><table><thead><tr><th align="center">提交</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144522067-221438997.png" alt="image-20231118144522350"></td></tr></tbody></table><table><thead><tr><th align="center">查看已添加的开发成员</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144530181-1345299533.png" alt="image-20231118144530320"></td></tr></tbody></table><blockquote><p>5&gt; master分支设置为 <a href="">protected分支</a>，只有管理员有权限将代码合并到其中。dev分支设置为 <a href="">常规分支</a>所有开发人员 都可以其中合并代码</p></blockquote><table><thead><tr><th align="center">进入分支设置</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144538253-1478156974.png" alt="image-20231118144538428"></td></tr></tbody></table><table><thead><tr><th align="center">设置保护分支，让master分支不能被随更改</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144545130-945317719.png" alt="image-20231118144545311"></td></tr></tbody></table><h4 id="10-2-开发人员"><a href="#10-2-开发人员" class="headerlink" title="10.2 开发人员"></a>10.2 开发人员</h4><blockquote><ul><li><p>初始化：在idea中clone 远程库，获得项目。会建立本地库</p></li><li><p>后续的开发中，都要在dev分支上进行。开发完一个功能并测试通过后就commit  提交到本地的dev分支中，然后 上传(push)到远程dev分支中。</p></li><li><p>需要更新项目内容时，通过 pull 从远程仓库拉取内容。   </p></li><li><p>注意：多人协同时，每次在 push 到远程库前，都先做一次pull，一来是把远程最新内容合并到本地，二来是核实本地内容是否和远程内容有冲突。</p></li><li><p>后续的开发，会接到一个个的功能任务，往复操作 2&gt;、3&gt;、4&gt; 而已。</p></li></ul></blockquote><h3 id="十一、经典问题"><a href="#十一、经典问题" class="headerlink" title="十一、经典问题"></a>十一、经典问题</h3><hr><blockquote><p>在使用https协议做push时，如果曾经使用过码云，但密码有过改动，此时会报错</p></blockquote><table><thead><tr><th align="center">使用https协议报错</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144556070-402910135.png" alt="image-20231118144556356"></td></tr></tbody></table><blockquote><p>解决方案:  <a href="">控制面板  》 凭据管理器 》</a> 删除对应凭证，再次使用时会提示重新输入密码。</p></blockquote><table><thead><tr><th align="center">删除之前的码云凭证，然后重新push即可</th></tr></thead><tbody><tr><td align="center"><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118144603377-2004414503.png" alt="image-20231118144603568"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitignore 配置语法</title>
      <link href="/posts/edc87c1b.html"/>
      <url>/posts/edc87c1b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Gitignore-配置语法"><a href="#Gitignore-配置语法" class="headerlink" title="Gitignore 配置语法"></a>Gitignore 配置语法</h1><blockquote><p>原文地址：<a href="http://kuanghy.github.io/2016/05/17/gitignore">http://kuanghy.github.io/2016/05/17/gitignore</a></p></blockquote><p>Git 的 <code>.gitignore</code> 配置文件用于配置不需要加入到版本管理中的文件，配置好该文件能够为项目的管理带来很大的便利。它的配置与 <code>.gitconfig</code> 一样可以分为全局和局部两种。通过修改全局配置 git config 中的 excludesfile 配置向可以指定全局忽略文件。设置方法为：</p><blockquote><p>$git config –global core.excludesfile ~&#x2F;.gitignore</p></blockquote><p>这样，修改 <code>~/.gitignore</code> 这个文件将作用于所有 git 项目，并且作用于项目实例中的所有被跟踪的目录。比如说我们可以在该文件中添加 *.o 来忽略所有 .o 文件。</p><p>局部的配置只需要在项目目录中创建 <code>.gitignore</code> 文件即可。</p><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><ul><li>空行或是以#开头的行即注释行将被忽略；</li><li>以斜杠 “&#x2F;” 结尾表示目录；</li><li>以星号 “*” 通配多个字符；</li><li>以问号 “?” 通配单个字符</li><li>以方括号 “[]” 包含单个字符的匹配列表；</li><li>以叹号 “!” 表示不忽略(跟踪)匹配到的文件或目录；</li><li>可以在前面添加斜杠 “&#x2F;” 来避免递归,下面的例子中可以很明白的看出来与下一条的区别。</li></ul><h2 id="配置文件示例"><a href="#配置文件示例" class="headerlink" title="配置文件示例"></a>配置文件示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 忽略 .a 文件</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># 但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># 仅在当前目录下忽略 TODO 文件， 但不包括子目录下的 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># 忽略 build/ 文件夹下的所有文件</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># 忽略 doc/notes.txt, 不包括 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># 忽略所有的 .pdf 文件 在 doc/ directory 下的</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h2 id="配置文件模板"><a href="#配置文件模板" class="headerlink" title="配置文件模板"></a>配置文件模板</h2><p><a href="https://github.com/">Github</a> 上为开发者提供了各种环境以及各种编程语言的 gitignore 文件配置模板</p><p><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令速查</title>
      <link href="/posts/da9d62dc.html"/>
      <url>/posts/da9d62dc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、-Git常用命令速查"><a href="#一、-Git常用命令速查" class="headerlink" title="一、 Git常用命令速查"></a>一、 Git常用命令速查</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># 查看本地所有分支</span></span><br><span class="line">git status <span class="comment"># 查看当前状态 </span></span><br><span class="line">git commit <span class="comment"># 提交 </span></span><br><span class="line">git branch -a <span class="comment"># 查看所有的分支</span></span><br><span class="line">git branch -r <span class="comment"># 查看远程所有分支</span></span><br><span class="line">git commit -am <span class="string">&quot;init&quot;</span> <span class="comment"># 提交并且加注释 </span></span><br><span class="line">git remote add origin git@192.168.1.119:ndshow</span><br><span class="line">git push origin master <span class="comment"># 将文件给推到服务器上 </span></span><br><span class="line">git remote show origin <span class="comment"># 显示远程库origin里的资源 </span></span><br><span class="line">git push origin master:develop</span><br><span class="line">git push origin master:hb-dev <span class="comment"># 将本地库与服务器上的库进行关联 </span></span><br><span class="line">git checkout --track origin/dev <span class="comment"># 切换到远程dev分支</span></span><br><span class="line">git branch -D master develop <span class="comment"># 删除本地库develop</span></span><br><span class="line">git checkout -b dev <span class="comment"># 建立一个新的本地分支dev</span></span><br><span class="line">git merge origin/dev <span class="comment"># 将分支dev与当前分支进行合并</span></span><br><span class="line">git checkout dev <span class="comment"># 切换到本地dev分支</span></span><br><span class="line">git remote show <span class="comment"># 查看远程库</span></span><br><span class="line">git add .</span><br><span class="line">git <span class="built_in">rm</span> 文件名(包括路径) <span class="comment"># 从git中删除指定文件</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git <span class="comment"># 从服务器上将代码给拉下来</span></span><br><span class="line">git config --list <span class="comment"># 看所有用户</span></span><br><span class="line">git ls-files <span class="comment"># 看已经被提交的</span></span><br><span class="line">git <span class="built_in">rm</span> [file name] <span class="comment"># 删除一个文件</span></span><br><span class="line">git commit -a <span class="comment"># 提交当前repos的所有的改变</span></span><br><span class="line">git add [file name] <span class="comment"># 添加一个文件到git index</span></span><br><span class="line">git commit -v <span class="comment"># 当你用－v参数的时候可以看commit的差异</span></span><br><span class="line">git commit -m <span class="string">&quot;This is the message describing the commit&quot;</span> <span class="comment"># 添加commit信息</span></span><br><span class="line">git commit -a <span class="comment"># -a是代表add，把所有的change加到git index里然后再commit</span></span><br><span class="line">git commit -a -v <span class="comment"># 一般提交命令</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment"># 看你commit的日志</span></span><br><span class="line">git diff <span class="comment"># 查看尚未暂存的更新</span></span><br><span class="line">git <span class="built_in">rm</span> a.a <span class="comment"># 移除文件(从暂存区和工作区中删除)</span></span><br><span class="line">git <span class="built_in">rm</span> --cached a.a <span class="comment"># 移除文件(只从暂存区中删除)</span></span><br><span class="line">git commit -m <span class="string">&quot;remove&quot;</span> <span class="comment"># 移除文件(从Git中删除)</span></span><br><span class="line">git <span class="built_in">rm</span> -f a.a <span class="comment"># 强行移除修改后文件(从暂存区和工作区中删除)</span></span><br><span class="line">git diff --cached 或 $ git diff --staged <span class="comment"># 查看尚未提交的更新</span></span><br><span class="line">git stash push <span class="comment"># 将文件给push到一个临时空间中</span></span><br><span class="line">git stash pop <span class="comment"># 将文件从临时空间pop下来</span></span><br><span class="line">\---------------------------------------------------------</span><br><span class="line">git remote add origin git@github.com:username/Hello-World.git</span><br><span class="line">git push origin master <span class="comment"># 将本地项目给提交到服务器中</span></span><br><span class="line">\-----------------------------------------------------------</span><br><span class="line">git pull <span class="comment"># 本地与服务器端同步</span></span><br><span class="line">\-----------------------------------------------------------------</span><br><span class="line">git push (远程仓库名) (分支名) <span class="comment"># 将本地分支推送到服务器上去。</span></span><br><span class="line">git push origin serverfix:awesomebranch</span><br><span class="line">\------------------------------------------------------------------</span><br><span class="line">git fetch <span class="comment"># 相当于是从远程获取最新版本到本地，不会自动merge</span></span><br><span class="line">git commit -a -m <span class="string">&quot;log_message&quot;</span> <span class="comment"># (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：</span></span><br><span class="line">git branch branch_0.1 master <span class="comment"># 从主分支master创建branch_0.1分支</span></span><br><span class="line">git branch -m branch_0.1 branch_1.0 <span class="comment"># 将branch_0.1重命名为branch_1.0</span></span><br><span class="line">git checkout branch_1.0/master <span class="comment"># 切换到branch_1.0/master分支</span></span><br><span class="line"><span class="built_in">du</span> -hs</span><br><span class="line"></span><br><span class="line">git branch <span class="comment"># 删除远程branch</span></span><br><span class="line">git push origin :branch_remote_name</span><br><span class="line">git branch -r -d branch_remote_name</span><br></pre></td></tr></table></figure><p>初始化版本库，并提交到远程服务器端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> WebApp</span><br><span class="line"><span class="built_in">cd</span> WebApp</span><br><span class="line">git init <span class="comment"># 本地初始化</span></span><br><span class="line"><span class="built_in">touch</span> README</span><br><span class="line">git add README <span class="comment"># 添加文件</span></span><br><span class="line">git commit -m <span class="string">&#x27;first commit&#x27;</span></span><br><span class="line">git remote add origin git@github.com:daixu/WebApp.git</span><br></pre></td></tr></table></figure><p>增加一个远程服务器端</p><p>上面的命令会增加URL地址为‘<a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#109;</a>:daixu&#x2F;WebApp.git’，名称为origin的远程服务器库，以后提交代码的时候只需要使用 origin别名即可</p><h2 id="二、-Git-命令速查表"><a href="#二、-Git-命令速查表" class="headerlink" title="二、 Git 命令速查表"></a>二、 Git 命令速查表</h2><h3 id="1、常用的Git命令"><a href="#1、常用的Git命令" class="headerlink" title="1、常用的Git命令"></a>1、常用的Git命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git add</td><td>添加至暂存区</td></tr><tr><td>git add–interactive</td><td>交互式添加</td></tr><tr><td>git apply</td><td>应用补丁</td></tr><tr><td>git am</td><td>应用邮件格式补丁</td></tr><tr><td>git annotate</td><td>同义词，等同于 git blame</td></tr><tr><td>git archive</td><td>文件归档打包</td></tr><tr><td>git bisect</td><td>二分查找</td></tr><tr><td>git blame</td><td>文件逐行追溯</td></tr><tr><td>git branch</td><td>分支管理</td></tr><tr><td>git cat-file</td><td>版本库对象研究工具</td></tr><tr><td>git checkout</td><td>检出到工作区、切换或创建分支</td></tr><tr><td>git cherry-pick</td><td>提交拣选</td></tr><tr><td>git citool</td><td>图形化提交，相当于 git gui 命令</td></tr><tr><td>git clean</td><td>清除工作区未跟踪文件</td></tr><tr><td>git clone</td><td>克隆版本库</td></tr><tr><td>git commit</td><td>提交</td></tr><tr><td>git config</td><td>查询和修改配置</td></tr><tr><td>git describe</td><td>通过里程碑直观地显示提交ID</td></tr><tr><td>git diff</td><td>差异比较</td></tr><tr><td>git difftool</td><td>调用图形化差异比较工具</td></tr><tr><td>git fetch</td><td>获取远程版本库的提交</td></tr><tr><td>git format-patch</td><td>创建邮件格式的补丁文件。参见 git am 命令</td></tr><tr><td>git grep</td><td>文件内容搜索定位工具</td></tr><tr><td>git gui</td><td>基于Tcl&#x2F;Tk的图形化工具，侧重提交等操作</td></tr><tr><td>git help</td><td>帮助</td></tr><tr><td>git init</td><td>版本库初始化</td></tr><tr><td>git init-db*</td><td>同义词，等同于 git init</td></tr><tr><td>git log</td><td>显示提交日志</td></tr><tr><td>git merge</td><td>分支合并</td></tr><tr><td>git mergetool</td><td>图形化冲突解决</td></tr><tr><td>git mv</td><td>重命名</td></tr><tr><td>git pull</td><td>拉回远程版本库的提交</td></tr><tr><td>git push</td><td>推送至远程版本库</td></tr><tr><td>git rebase</td><td>分支变基</td></tr><tr><td>git rebase–interactive</td><td>交互式分支变基</td></tr><tr><td>git reflog</td><td>分支等引用变更记录管理</td></tr><tr><td>git remote</td><td>远程版本库管理</td></tr><tr><td>git repo-config*</td><td>同义词，等同于 git config</td></tr><tr><td>git reset</td><td>重置改变分支“游标”指向</td></tr><tr><td>git rev-parse</td><td>将各种引用表示法转换为哈希值等</td></tr><tr><td>git revert</td><td>反转提交</td></tr><tr><td>git rm</td><td>删除文件</td></tr><tr><td>git show</td><td>显示各种类型的对象</td></tr><tr><td>git stage*</td><td>同义词，等同于 git add</td></tr><tr><td>git stash</td><td>保存和恢复进度</td></tr><tr><td>git status</td><td>显示工作区文件状态</td></tr><tr><td>git tag</td><td>里程碑管理</td></tr></tbody></table><h3 id="2、对象库操作相关命令"><a href="#2、对象库操作相关命令" class="headerlink" title="2、对象库操作相关命令"></a>2、对象库操作相关命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git commit-tree</td><td>从树对象创建提交</td></tr><tr><td>git hash-object</td><td>从标准输入或文件计算哈希值或创建对象</td></tr><tr><td>git ls-files</td><td>显示工作区和暂存区文件</td></tr><tr><td>git ls-tree</td><td>显示树对象包含的文件</td></tr><tr><td>git mktag</td><td>读取标准输入创建一个里程碑对象</td></tr><tr><td>git mktree</td><td>读取标准输入创建一个树对象</td></tr><tr><td>git read-tree</td><td>读取树对象到暂存区</td></tr><tr><td>git update-index</td><td>工作区内容注册到暂存区及暂存区管理</td></tr><tr><td>git unpack-file</td><td>创建临时文件包含指定 blob 的内容</td></tr><tr><td>git write-tree</td><td>从暂存区创建一个树对象</td></tr></tbody></table><h3 id="3、引用操作相关命令"><a href="#3、引用操作相关命令" class="headerlink" title="3、引用操作相关命令"></a>3、引用操作相关命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git check-ref-format</td><td>检查引用名称是否符合规范</td></tr><tr><td>git for-each-ref</td><td>引用迭代器，用于shell编程</td></tr><tr><td>git ls-remote</td><td>显示远程版本库的引用</td></tr><tr><td>git name-rev</td><td>将提交ID显示为友好名称</td></tr><tr><td>git peek-remote*</td><td>过时命令，请使用 git ls-remote</td></tr><tr><td>git rev-list</td><td>显示版本范围</td></tr><tr><td>git show-branch</td><td>显示分支列表及拓扑关系</td></tr><tr><td>git show-ref</td><td>显示本地引用</td></tr><tr><td>git symbolic-ref</td><td>显示或者设置符号引用</td></tr><tr><td>git update-ref</td><td>更新引用的指向</td></tr><tr><td>git verify-tag</td><td>校验 GPG 签名的Tag</td></tr></tbody></table><h3 id="4、版本库管理相关命令"><a href="#4、版本库管理相关命令" class="headerlink" title="4、版本库管理相关命令"></a>4、版本库管理相关命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git count-objects</td><td>显示松散对象的数量和磁盘占用</td></tr><tr><td>git filter-branch</td><td>版本库重构</td></tr><tr><td>git fsck</td><td>对象库完整性检查</td></tr><tr><td>git fsck-objects*</td><td>同义词，等同于 git fsck</td></tr><tr><td>git gc</td><td>版本库存储优化</td></tr><tr><td>git index-pack</td><td>从打包文件创建对应的索引文件</td></tr><tr><td>git lost-found*</td><td>过时，请使用 git fsck –lost-found 命令</td></tr><tr><td>git pack-objects</td><td>从标准输入读入对象ID，打包到文件</td></tr><tr><td>git pack-redundant</td><td>查找多余的 pack 文件</td></tr><tr><td>git pack-refs</td><td>将引用打包到 .git&#x2F;packed-refs 文件中</td></tr><tr><td>git prune</td><td>从对象库删除过期对象</td></tr><tr><td>git prune-packed</td><td>将已经打包的松散对象删除</td></tr><tr><td>git relink</td><td>为本地版本库中相同的对象建立硬连接</td></tr><tr><td>git repack</td><td>将版本库未打包的松散对象打包</td></tr><tr><td>git show-index</td><td>读取包的索引文件，显示打包文件中的内容</td></tr><tr><td>git unpack-objects</td><td>从打包文件释放文件</td></tr><tr><td>git verify-pack</td><td>校验对象库打包文件</td></tr></tbody></table><h3 id="5、数据传输相关命令"><a href="#5、数据传输相关命令" class="headerlink" title="5、数据传输相关命令"></a>5、数据传输相关命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git fetch-pack</td><td>执行 git fetch 或 git pull 命令时在本地执行此命令，用于从其他版本库获取缺失的对象</td></tr><tr><td>git receive-pack</td><td>执行 git push 命令时在远程执行的命令，用于接受推送的数据</td></tr><tr><td>git send-pack</td><td>执行 git push 命令时在本地执行的命令，用于向其他版本库推送数据</td></tr><tr><td>git upload-archive</td><td>执行 git archive –remote 命令基于远程版本库创建归档时，远程版本库执行此命令传送归档</td></tr><tr><td>git upload-pack</td><td>执行 git fetch 或 git pull 命令时在远程执行此命令，将对象打包、上传</td></tr></tbody></table><h3 id="6、邮件相关命令"><a href="#6、邮件相关命令" class="headerlink" title="6、邮件相关命令"></a>6、邮件相关命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git imap-send</td><td>将补丁通过 IMAP 发送</td></tr><tr><td>git mailinfo</td><td>从邮件导出提交说明和补丁</td></tr><tr><td>git mailsplit</td><td>将 mbox 或 Maildir 格式邮箱中邮件逐一提取为文件</td></tr><tr><td>git request-pull</td><td>创建包含提交间差异和执行PULL操作地址的信息</td></tr><tr><td>git send-email</td><td>发送邮件</td></tr></tbody></table><h3 id="7、协议相关命令"><a href="#7、协议相关命令" class="headerlink" title="7、协议相关命令"></a>7、协议相关命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git daemon</td><td>实现Git协议</td></tr><tr><td>git http-backend</td><td>实现HTTP协议的CGI程序，支持智能HTTP协议</td></tr><tr><td>git instaweb</td><td>即时启动浏览器通过 gitweb 浏览当前版本库</td></tr><tr><td>git shell</td><td>受限制的shell，提供仅执行Git命令的SSH访问</td></tr><tr><td>git update-server-info</td><td>更新哑协议需要的辅助文件</td></tr><tr><td>git http-fetch</td><td>通过HTTP协议获取版本库</td></tr><tr><td>git http-push</td><td>通过HTTP&#x2F;DAV协议推送</td></tr><tr><td>git remote-ext</td><td>由Git命令调用，通过外部命令提供扩展协议支持</td></tr><tr><td>git remote-fd</td><td>由Git命令调用，使用文件描述符作为协议接口</td></tr><tr><td>git remote-ftp</td><td>由Git命令调用，提供对FTP协议的支持</td></tr><tr><td>git remote-ftps</td><td>由Git命令调用，提供对FTPS协议的支持</td></tr><tr><td>git remote-http</td><td>由Git命令调用，提供对HTTP协议的支持</td></tr><tr><td>git remote-https</td><td>由Git命令调用，提供对HTTPS协议的支持</td></tr><tr><td>git remote-testgit</td><td>协议扩展示例脚本</td></tr></tbody></table><h3 id="8、版本库转换和交互相关命令"><a href="#8、版本库转换和交互相关命令" class="headerlink" title="8、版本库转换和交互相关命令"></a>8、版本库转换和交互相关命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git archimport</td><td>导入Arch版本库到Git</td></tr><tr><td>git bundle</td><td>提交打包和解包，以便在不同版本库间传递</td></tr><tr><td>git cvsexportcommit</td><td>将Git的一个提交作为一个CVS检出</td></tr><tr><td>git cvsimport</td><td>导入CVS版本库到Git。或者使用 cvs2git</td></tr><tr><td>git cvsserver</td><td>Git的CVS协议模拟器，可供CVS命令访问Git版本库</td></tr><tr><td>git fast-export</td><td>将提交导出为 git-fast-import 格式</td></tr><tr><td>git fast-import</td><td>其他版本库迁移至Git的通用工具</td></tr><tr><td>git svn</td><td>Git 作为前端操作 Subversion</td></tr></tbody></table><h3 id="9、合并相关的辅助命令"><a href="#9、合并相关的辅助命令" class="headerlink" title="9、合并相关的辅助命令"></a>9、合并相关的辅助命令</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git merge-base</td><td>供其他脚本调用，找到两个或多个提交最近的共同祖先</td></tr><tr><td>git merge-file</td><td>针对文件的两个不同版本执行三向文件合并</td></tr><tr><td>git merge-index</td><td>对index中的冲突文件调用指定的冲突解决工具</td></tr><tr><td>git merge-octopus</td><td>合并两个以上分支。参见 git merge 的octopus合并策略</td></tr><tr><td>git merge-one-file</td><td>由 git merge-index 调用的标准辅助程序</td></tr><tr><td>git merge-ours</td><td>合并使用本地版本，抛弃他人版本。参见 git merge 的ours合并策略</td></tr><tr><td>git merge-recursive</td><td>针对两个分支的三向合并。参见 git merge 的recursive合并策略</td></tr><tr><td>git merge-resolve</td><td>针对两个分支的三向合并。参见 git merge 的resolve合并策略</td></tr><tr><td>git merge-subtree</td><td>子树合并。参见 git merge 的 subtree 合并策略</td></tr><tr><td>git merge-tree</td><td>显式三向合并结果，不改变暂存区</td></tr><tr><td>git fmt-merge-msg</td><td>供执行合并操作的脚本调用，用于创建一个合并提交说明</td></tr><tr><td>git rerere</td><td>重用所记录的冲突解决方案</td></tr></tbody></table><h3 id="10、-杂项"><a href="#10、-杂项" class="headerlink" title="10、 杂项"></a>10、 杂项</h3><table><thead><tr><th>命令</th><th>简要说明</th></tr></thead><tbody><tr><td>git bisect–helper</td><td>由 git bisect 命令调用，确认二分查找进度</td></tr><tr><td>git check-attr</td><td>显示某个文件是否设置了某个属性</td></tr><tr><td>git checkout-index</td><td>从暂存区拷贝文件至工作区</td></tr><tr><td>git cherry</td><td>查找没有合并到上游的提交</td></tr><tr><td>git diff-files</td><td>比较暂存区和工作区，相当于 git diff –raw</td></tr><tr><td>git diff-index</td><td>比较暂存区和版本库，相当于 git diff –cached –raw</td></tr><tr><td>git diff-tree</td><td>比较两个树对象，相当于 git diff –raw A B</td></tr><tr><td>git difftool–helper</td><td>由 git difftool 命令调用，默认要使用的差异比较工具</td></tr><tr><td>git get-tar-commit-id</td><td>从 git archive 创建的 tar 包中提取提交ID</td></tr><tr><td>git gui–askpass</td><td>命令 git gui 的获取用户口令输入界面</td></tr><tr><td>git notes</td><td>提交评论管理</td></tr><tr><td>git patch-id</td><td>补丁过滤行号和空白字符后生成补丁唯一ID</td></tr><tr><td>git quiltimport</td><td>将Quilt补丁列表应用到当前分支</td></tr><tr><td>git replace</td><td>提交替换</td></tr><tr><td>git shortlog</td><td>对 git log 的汇总输出，适合于产品发布说明</td></tr><tr><td>git stripspace</td><td>删除空行，供其他脚本调用</td></tr><tr><td>git submodule</td><td>子模组管理</td></tr><tr><td>git tar-tree</td><td>过时命令，请使用 git archive</td></tr><tr><td>git var</td><td>显示 Git 环境变量</td></tr><tr><td>git web–browse</td><td>启动浏览器以查看目录或文件</td></tr><tr><td>git whatchanged</td><td>显示提交历史及每次提交的改动</td></tr><tr><td>git-mergetool–lib</td><td>包含于其他脚本中，提供合并&#x2F;差异比较工具的选择和执行</td></tr><tr><td>git-parse-remote</td><td>包含于其他脚本中，提供操作远程版本库的函数</td></tr><tr><td>git-sh-setup</td><td>包含于其他脚本中，提供 shell 编程的函数库</td></tr></tbody></table><p>Git 常用命令速查表。点击查看大图。</p><p><a href="http://files.jb51.net/file_images/article/201409/git_big_jb51.jpg"><img src="http://files.jb51.net/file_images/article/201409/git_big_jb51.jpg" alt="img"></a></p><p>Git命令参考手册(文本版)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">git init                         <span class="comment"># 初始化本地git仓库（创建新仓库） </span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span>            <span class="comment"># 配置用户名 </span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.com&quot;</span>       <span class="comment"># 配置邮件 </span></span><br><span class="line">git config --global color.ui <span class="literal">true</span>             <span class="comment"># git status等命令自动着色 </span></span><br><span class="line">git config --global color.status auto </span><br><span class="line">git config --global color.diff auto </span><br><span class="line">git config --global color.branch auto </span><br><span class="line">git config --global color.interactive auto </span><br><span class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git       <span class="comment"># clone远程仓库 </span></span><br><span class="line">git status                        <span class="comment"># 查看当前版本状态（是否修改） </span></span><br><span class="line">git add xyz                        <span class="comment"># 添加xyz文件至index </span></span><br><span class="line">git add .                         <span class="comment"># 增加当前子目录下所有更改过的文件至index </span></span><br><span class="line">git commit -m <span class="string">&#x27;xxx&#x27;</span>                    <span class="comment"># 提交 </span></span><br><span class="line">git commit --amend -m <span class="string">&#x27;xxx&#x27;</span>                <span class="comment"># 合并上一次提交（用于反复修改） </span></span><br><span class="line">git commit -am <span class="string">&#x27;xxx&#x27;</span>                   <span class="comment"># 将add和commit合为一步 </span></span><br><span class="line">git <span class="built_in">rm</span> xxx                        <span class="comment"># 删除index中的文件 </span></span><br><span class="line">git <span class="built_in">rm</span> -r *                        <span class="comment"># 递归删除 </span></span><br><span class="line">git <span class="built_in">log</span>                          <span class="comment"># 显示提交日志 </span></span><br><span class="line">git <span class="built_in">log</span> -1                        <span class="comment"># 显示1行日志 -n为n行 </span></span><br><span class="line">git <span class="built_in">log</span> -5</span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                      <span class="comment"># 显示提交日志及相关变动文件 </span></span><br><span class="line">git <span class="built_in">log</span> -p -m </span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818     <span class="comment"># 显示某个提交的详细内容 </span></span><br><span class="line">git show dfb02                      <span class="comment"># 可只用commitid的前几位 </span></span><br><span class="line">git show HEAD                       <span class="comment"># 显示HEAD提交日志 </span></span><br><span class="line">git show HEAD^                      <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本 </span></span><br><span class="line">git tag                          <span class="comment"># 显示已存在的tag </span></span><br><span class="line">git tag -a v2.0 -m <span class="string">&#x27;xxx&#x27;</span>                 <span class="comment"># 增加v2.0的tag </span></span><br><span class="line">git show v2.0                       <span class="comment"># 显示v2.0的日志及详细内容 </span></span><br><span class="line">git <span class="built_in">log</span> v2.0                       <span class="comment"># 显示v2.0的日志 </span></span><br><span class="line">git diff                         <span class="comment"># 显示所有未添加至index的变更 </span></span><br><span class="line">git diff --cached                     <span class="comment"># 显示所有已添加index但还未commit的变更 </span></span><br><span class="line">git diff HEAD^                      <span class="comment"># 比较与上一个版本的差异 </span></span><br><span class="line">git diff HEAD -- ./lib                  <span class="comment"># 比较与HEAD版本lib目录的差异 </span></span><br><span class="line">git diff origin/master..master              <span class="comment"># 比较远程分支master上有本地分支master上没有的 </span></span><br><span class="line">git diff origin/master..master --<span class="built_in">stat</span>           <span class="comment"># 只显示差异的文件，不显示具体内容 </span></span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch） </span></span><br><span class="line">git branch                        <span class="comment"># 显示本地分支 </span></span><br><span class="line">git branch --contains 50089                <span class="comment"># 显示包含提交50089的分支 </span></span><br><span class="line">git branch -a                       <span class="comment"># 显示所有分支 </span></span><br><span class="line">git branch -r                       <span class="comment"># 显示所有原创分支 </span></span><br><span class="line">git branch --merged                    <span class="comment"># 显示所有已合并到当前分支的分支 </span></span><br><span class="line">git branch --no-merged                  <span class="comment"># 显示所有未合并到当前分支的分支 </span></span><br><span class="line">git branch -m master master_copy             <span class="comment"># 本地分支改名 </span></span><br><span class="line">git checkout -b master_copy                <span class="comment"># 从当前分支创建新分支master_copy并检出 </span></span><br><span class="line">git checkout -b master master_copy            <span class="comment"># 上面的完整版 </span></span><br><span class="line">git checkout features/performance             <span class="comment"># 检出已存在的features/performance分支 </span></span><br><span class="line">git checkout --track hotfixes/BJVEP933          <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class="line">git checkout v2.0                     <span class="comment"># 检出版本v2.0</span></span><br><span class="line">git checkout -b devel origin/develop           <span class="comment"># 从远程分支develop创建新本地分支devel并检出 </span></span><br><span class="line">git checkout -- README                  <span class="comment"># 检出head版本的README文件（可用于修改错误回退） </span></span><br><span class="line">git merge origin/master                  <span class="comment"># 合并远程master分支至当前分支 </span></span><br><span class="line">git cherry-pick ff44785404a8e               <span class="comment"># 合并提交ff44785404a8e的修改 </span></span><br><span class="line">git push origin master                  <span class="comment"># 将当前分支push到远程master分支 </span></span><br><span class="line">git push origin :hotfixes/BJVEP933            <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支 </span></span><br><span class="line">git push --tags                      <span class="comment"># 把所有tag推送到远程仓库 </span></span><br><span class="line">git fetch                         <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge） </span></span><br><span class="line">git fetch --prune                     <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支 </span></span><br><span class="line">git pull origin master                  <span class="comment"># 获取远程分支master并merge到当前分支 </span></span><br><span class="line">git <span class="built_in">mv</span> README README2                   <span class="comment"># 重命名文件README为README2 </span></span><br><span class="line">git reset --hard HEAD                   <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退） </span></span><br><span class="line">git rebase </span><br><span class="line">git branch -d hotfixes/BJVEP933              <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支） </span></span><br><span class="line">git branch -D hotfixes/BJVEP933              <span class="comment"># 强制删除分支hotfixes/BJVEP933 </span></span><br><span class="line">git ls-files                       <span class="comment"># 列出git index包含的文件 </span></span><br><span class="line">git show-branch                      <span class="comment"># 图示当前分支历史 </span></span><br><span class="line">git show-branch --all                   <span class="comment"># 图示所有分支历史 </span></span><br><span class="line">git whatchanged                      <span class="comment"># 显示提交历史对应的文件修改 </span></span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818    <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 </span></span><br><span class="line">git ls-tree HEAD                     <span class="comment"># 内部命令：显示某个git对象 </span></span><br><span class="line">git rev-parse v2.0                    <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH </span></span><br><span class="line">git reflog                        <span class="comment"># 显示所有提交，包括孤立节点 </span></span><br><span class="line">git show HEAD@&#123;5&#125; </span><br><span class="line">git show master@&#123;yesterday&#125;                <span class="comment"># 显示master分支昨天的状态 </span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;%h %s&#x27;</span> --graph          <span class="comment"># 图示提交日志 </span></span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476 </span><br><span class="line">git stash                         <span class="comment"># 暂存当前修改，将所有至为HEAD状态 </span></span><br><span class="line">git stash list                      <span class="comment"># 查看所有暂存 </span></span><br><span class="line">git stash show -p stash@&#123;0&#125;                <span class="comment"># 参考第一次暂存 </span></span><br><span class="line">git stash apply stash@&#123;0&#125;                 <span class="comment"># 应用第一次暂存 </span></span><br><span class="line">git grep <span class="string">&quot;delete from&quot;</span>                  <span class="comment"># 文件中搜索文本“delete from” </span></span><br><span class="line">git grep -e <span class="string">&#x27;#define&#x27;</span> --and -e SORT_DIRENT </span><br><span class="line">git gc </span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure><p><a href="http://gitref.org/index.html">Git</a> 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</p><h2 id="三、Git常用操作命令："><a href="#三、Git常用操作命令：" class="headerlink" title="三、Git常用操作命令："></a>三、Git常用操作命令：</h2><h3 id="1、远程仓库相关命令"><a href="#1、远程仓库相关命令" class="headerlink" title="1、远程仓库相关命令"></a>1、远程仓库相关命令</h3><p>检出仓库：<code>git clone git://github.com/jquery/jquery.git</code></p><p>查看远程仓库：<code> git remote -v</code></p><p>添加远程仓库：<code> git remote add [name] [url]</code></p><p>删除远程仓库：<code>git remote rm [name]</code></p><p>修改远程仓库：<code>git remote set-url --push [name] [newUrl]</code></p><p>拉取远程仓库：<code>git pull [remoteName] [localBranchName]</code></p><p>推送远程仓库：<code>git push [remoteName] [localBranchName]</code></p><p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="built_in">test</span>:master     <span class="comment"># 提交本地test分支作为远程的master分支</span></span><br><span class="line"></span><br><span class="line">git push origin <span class="built_in">test</span>:<span class="built_in">test</span>        <span class="comment"># 提交本地test分支作为远程的test分支</span></span><br></pre></td></tr></table></figure><h3 id="2、分支-branch-操作相关命令"><a href="#2、分支-branch-操作相关命令" class="headerlink" title="2、分支(branch)操作相关命令"></a>2、分支(branch)操作相关命令</h3><p>查看本地分支： <code>git branch</code></p><p>查看远程分支： <code>git branch -r</code></p><p>创建本地分支： <code>git branch [name]</code> —-注意新分支创建后不会自动切换为当前分支</p><p>切换分支：<code>git checkout [name]</code></p><p>创建新分支并立即切换到新分支<code> git checkout -b [name]</code></p><p>删除分支： <code>git branch -d [name]</code> —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p><p>合并分支： <code>git merge [name]</code> —-将名称为[name]的分支与当前分支合并</p><p>创建远程分支(本地分支push到远程)： <code>git push origin [name]</code></p><p>删除远程分支： <code>git push origin :heads/[name]</code> 或  <code>gitpush origin :[name] </code></p><p>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git symbolic-ref HEAD refs/heads/[name]</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> .git/index</span><br><span class="line"></span><br><span class="line">git clean -fdx</span><br></pre></td></tr></table></figure><h3 id="3、版本-tag-操作相关命令"><a href="#3、版本-tag-操作相关命令" class="headerlink" title="3、版本(tag)操作相关命令"></a>3、版本(tag)操作相关命令</h3><p>查看版本：<code>git tag</code></p><p>创建版本：<code>git tag [name]</code></p><p>删除版本：<code>git tag -d [name]</code></p><p>查看远程版本： <code>git tag -r</code></p><p>创建远程版本(本地版本push到远程)： <code>git push origin [name]</code></p><p>删除远程版本： <code>git push origin :refs/tags/[name]</code></p><p>合并远程仓库的tag到本地：<code>git pull origin --tags</code></p><p>上传本地tag到远程仓库： <code>git push origin --tags</code></p><p>创建带注释的tag： <code>git tag -a [name] -m &#39;yourMessage&#39;</code></p><h3 id="4、子模块-submodule-相关操作命令"><a href="#4、子模块-submodule-相关操作命令" class="headerlink" title="4、子模块(submodule)相关操作命令"></a>4、子模块(submodule)相关操作命令</h3><p>添加子模块：<code> git submodule add [url] [path]</code></p><p>  如：<code>git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</code></p><p>初始化子模块： <code>git submodule init</code>  —-只在首次检出仓库时运行一次就行</p><p>更新子模块：<code>git submodule update</code> —-每次更新或切换分支后都需要运行一下</p><p>删除子模块：（分4步走哦）</p><ol><li><p><code>git rm --cached [path]</code></p></li><li><p>编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</p></li><li><p>编辑“ .git&#x2F;config”文件，将子模块的相关配置节点删除掉</p></li><li><p>手动删除子模块残留的目录</p></li></ol><h3 id="5、忽略一些文件、文件夹不提交"><a href="#5、忽略一些文件、文件夹不提交" class="headerlink" title="5、忽略一些文件、文件夹不提交"></a>5、忽略一些文件、文件夹不提交</h3><p>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target</span><br><span class="line"></span><br><span class="line">bin</span><br><span class="line"></span><br><span class="line">*.db</span><br></pre></td></tr></table></figure><p>Git 常用命令图表 </p><p><img src="https://img-blog.csdn.net/20180620113451746?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbGFvZGE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><blockquote><p>原文地址：<a href="https://blog.csdn.net/halaoda/article/details/78661334">https://blog.csdn.net/halaoda/article/details/78661334</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E9安装手册</title>
      <link href="/posts/e22f3fe3.html"/>
      <url>/posts/e22f3fe3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="E9安装手册"><a href="#E9安装手册" class="headerlink" title="E9安装手册"></a>E9安装手册</h1><h2 id="安装包获取"><a href="#安装包获取" class="headerlink" title="安装包获取"></a>安装包获取</h2><p>安装所需文件可在泛微emobile技术门户获取，泛微会定期维护</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114224500581-1299887758.png" alt="image-20231114224459866"></p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><h3 id="1、通过-SSH-工具连接上-linux，创建应用程序目录"><a href="#1、通过-SSH-工具连接上-linux，创建应用程序目录" class="headerlink" title="1、通过 SSH 工具连接上 linux，创建应用程序目录"></a>1、通过 SSH 工具连接上 linux，创建应用程序目录</h3><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114182415612-2082326022.png" alt="image-20231114182416386"></p><p>可根据客户实际要求创建在任何路径下，保证有足够的空间即可，相关命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/weaver</span><br></pre></td></tr></table></figure><h3 id="2、通过-FTP-工具上传程序"><a href="#2、通过-FTP-工具上传程序" class="headerlink" title="2、通过 FTP 工具上传程序"></a>2、通过 FTP 工具上传程序</h3><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114183225920-1661277848.png" alt="image-20231114183226839"></p><p>将本地的 ECOLOGY相关程序上传到创建好的 weaver 目录下。共四个，JDK，RESIN，ECOLOGY 和 Ecology_setup_forLinux_*.py 文件。<strong>（JDK 必须提前下载好）</strong></p><h3 id="3、执行-Ecology-setup-forLinux-py"><a href="#3、执行-Ecology-setup-forLinux-py" class="headerlink" title="3、执行 Ecology_setup_forLinux_*.py"></a>3、执行 Ecology_setup_forLinux_*.py</h3><p>即输入命令：python Ecology_setup_forLinux_*.py 回车，此处我使用的版本为v2.66</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Ecology_setup_forLinux_v2<span class="number">.66</span>.py</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114183453528-1838303529.png" alt="image-20231114183454149"></p><p>如果选择 1 自动执行以下三步操作： </p><p>第一步：解压缩。（Linux 必须支持 unzip 及 tar 命令，没有需要提前安装好，否则无法解压） </p><p>第二步：给 ecology、jdk、resin 三个目录赋权。 </p><p>第三步：修改配置文件。设置路径、内存、端口。（内存和端口可在安装过程中进行调整）。 </p><p>如果选择 2 自动解压缩失败可在手动解压好的情况下，进行第二步和第三步配置。 </p><p>如果选择 3 查看配置好的相关参数，仅查看，若要调整，可再选择 2 或手动调整。</p><p>此处输入1</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114184102932-842439474.png" alt="image-20231114184103511"></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114184352271-147344098.png" alt="image-20231114184352829"></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114184505473-1544093421.png" alt="image-20231114184506165"></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114193416303-1152725752.png" alt="image-20231114193414751"></p><p>本页面为配置完成后，切换到 Resin4&#x2F;bin (或者Resin&#x2F;bin) 目录后，启动 resin 服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/weaver/Resin4/bin</span><br><span class="line">./startresin.sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114193716924-2136306748.png" alt="image-20231114193711901"></p><p>服务启动好后，访问服务器ip及刚才设置的端口即可进入数据库初始化页面</p><p>能打开此页面代表Resin服务部署成功</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114221800304-1317730758.png" alt="image-20231114221759787"></p><p>如果 自动部署操作不成功，那就只能手动部署。 </p><h2 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h2><h3 id="（1）端口（三个端口）"><a href="#（1）端口（三个端口）" class="headerlink" title="（1）端口（三个端口）"></a>（1）端口（三个端口）</h3><p>http 端口（Resin&#x2F;conf&#x2F;resin.properties）浏览器访问时用到的端口，根据实际调整 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.http : 80</span><br></pre></td></tr></table></figure><p>server 端口（Resin&#x2F;conf&#x2F;resin.properties）默认不需要修改 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_servers : 127.0.0.1:6800</span><br></pre></td></tr></table></figure><p>watchdog 端口（Resin&#x2F;conf&#x2F;resin.xml）默认不需要修改 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server-multi</span> <span class="attr">id-prefix</span>=<span class="string">&quot;app-&quot;</span> <span class="attr">address-list</span>=<span class="string">&quot;$&#123;app_servers&#125;&quot;</span> <span class="attr">port</span>=<span class="string">&quot;6800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">watchdog-port</span>&gt;</span>6600<span class="tag">&lt;/<span class="name">watchdog-port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server-multi</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（2）内存（Resin-conf-resin-properties）"><a href="#（2）内存（Resin-conf-resin-properties）" class="headerlink" title="（2）内存（Resin&#x2F;conf&#x2F;resin.properties）"></a>（2）内存（Resin&#x2F;conf&#x2F;resin.properties）</h3><p>根据实际可用内存调整，不要低于 3550</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Arg passed directly to the JVM</span><br><span class="line"> jvm_args  : -Xmx5550m -Xms5550m -XX:CompileThreshold=100000 -XX:ReservedCodeCacheSize=512m -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:-OmitStackTraceInFastThrow -XX:+UseParNewGC -XX:+DisableExplicitGC -javaagent:wagent.jar -javaagent:stophotdeploy.jar -Djdk.tls.ephemeralDHKeySize=2048 -Dfile.encoding=GBK -javaagent:rasp/rasp.jar</span><br></pre></td></tr></table></figure><h3 id="（3）路径（两个路径）"><a href="#（3）路径（两个路径）" class="headerlink" title="（3）路径（两个路径）"></a>（3）路径（两个路径）</h3><p>JDK 路径（Resin&#x2F;conf&#x2F;resin.xml）根据实际调整</p><p>官方部署文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> - You can change the compiler to &quot;javac&quot;, &quot;eclipse&quot; or &quot;internal&quot;.</span><br><span class="line"> --&gt;</span><br><span class="line"> &lt;javac compiler=&quot;/usr/weaver/jdk1.8.0_151/bin/javac&quot; args=&quot;-encoding UTF-8&quot;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我本地实际为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">     - You can change the compiler to &quot;javac&quot;, &quot;eclipse&quot; or &quot;internal&quot;.</span><br><span class="line">    --&gt;</span><br><span class="line">   &lt;javac compiler=&quot;internal&quot; args=&quot;-encoding UTF-8&quot;/&gt;</span><br></pre></td></tr></table></figure><p>应用程序路径（Resin&#x2F;conf&#x2F;resin.xml）根据实际调整</p><p><code>&lt;web-app id=&quot;/&quot; root-directory=&quot;/usr/weaver/ecology&quot;&gt;</code></p><p>官方部署文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- the default host, matching any host name --&gt;</span><br><span class="line"> &lt;host id=&quot;&quot; root-directory=&quot;.&quot;&gt;</span><br><span class="line"> &lt;!--</span><br><span class="line"> - webapps can be overridden/extended in the resin.xml</span><br><span class="line"> --&gt;</span><br><span class="line"> &lt;web-app id=&quot;/&quot; root-directory=&quot;/usr/weaver/ecology&quot;&gt;</span><br><span class="line">&lt;servlet-mapping url-pattern=&#x27;/weaver/*&#x27; servlet-name=&#x27;invoker&#x27;/&gt;</span><br><span class="line"> &lt;/web-app&gt;</span><br><span class="line"> &lt;/host&gt;</span><br></pre></td></tr></table></figure><p>我本地实际为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;host id=&quot;&quot; root-directory=&quot;.&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;access-log path=&quot;logs/access.log&quot; archive-format=&quot;access-%Y%m%d.log.gz&quot; format=&#x27;%s` %&#123;loginidweaver&#125;c` %D` %h` %n` %u` &quot;%t&quot;` &quot;%r&quot;`  &quot;%&#123;Referer&#125;i&quot;&#x27; rollover-period=&quot;1D&quot;&gt;</span><br><span class="line">   &lt;exclude&gt;\.gif$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.jpg$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.png$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.js$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.css$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.html$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.htm$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.swf$&lt;/exclude&gt;</span><br><span class="line">   &lt;exclude&gt;\.cur$&lt;/exclude&gt;</span><br><span class="line">&lt;/access-log&gt;</span><br><span class="line"></span><br><span class="line">&lt;stdout-log path=&quot;log/stdout.log&quot; archive-format=&quot;stdout-%Y%m%d.log.gz&quot; timestamp=&quot;[%Y.%m.%d %H:%M:%S.%s]&quot; rollover-period=&quot;1D&quot;/&gt;</span><br><span class="line">&lt;stderr-log path=&quot;log/stderr.log&quot; archive-format=&quot;stderr-%Y%m%d.log.gz&quot; timestamp=&quot;[%Y.%m.%d %H:%M:%S.%s]&quot; rollover-period=&quot;1D&quot;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!--</span><br><span class="line">         - webapps can be overridden/extended in the resin.xml</span><br><span class="line">        --&gt;</span><br><span class="line">      &lt;web-app id=&quot;/&quot; root-directory=&quot;/usr/weaver/ecology&quot;&gt;</span><br><span class="line">&lt;servlet-mapping url-pattern=&#x27;/weaver/*&#x27; servlet-name=&#x27;invoker&#x27;/&gt;</span><br><span class="line">&lt;form-parameter-max&gt;100000&lt;/form-parameter-max&gt;</span><br><span class="line">      &lt;/web-app&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/host&gt;</span><br></pre></td></tr></table></figure><h3 id="（4）-服务（三个文件）"><a href="#（4）-服务（三个文件）" class="headerlink" title="（4） 服务（三个文件）"></a>（4） 服务（三个文件）</h3><p>resin.sh(Resin4&#x2F;bin&#x2F;resin.sh)根据实际设置 JDK 路径 </p><p>JAVA_HOME&#x3D;<font color = red><strong>&#x2F;usr&#x2F;weaver&#x2F;jdk1.8.0_151</strong></font></p><p>startresin.sh(Resin4&#x2F;bin&#x2F;startresin.sh)根据实际设置 resin.sh 路径 </p><p>ulimit -n 65535 </p><p>export LC_ALL&#x3D;zh_CN.gbk </p><p>export LANG&#x3D;zh_CN.gbk</p><p> <font color = red>&#x2F;usr&#x2F;weaver&#x2F;Resin4&#x2F;bin&#x2F;resin.sh</font>&gt; start </p><p><strong>stopresin.sh</strong>(Resin4&#x2F;bin&#x2F;stopresin.sh) 根据实际设置 resin.sh 路径 </p><p><font color = red>&#x2F;usr&#x2F;weaver&#x2F;Resin4&#x2F;bin&#x2F;resin.sh</font> stop</p><h3 id="（5）-检查字符集"><a href="#（5）-检查字符集" class="headerlink" title="（5） 检查字符集"></a>（5） 检查字符集</h3><p><font color=red>不建议修改，修改后Linux环境会乱码，可跳过</font></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115214450615-1786737702.png" alt="image-20231115214449680"></p><p>检查当前系统是不是使用 zh_CN.gbk </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env | grep LANG</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114214458667-1551846510.png" alt="image-20231114214453735"></p><p>若不是 zh_CN.gbk 字符集，则通过 <code>export LANG=zh_CN.gbk</code> 命令来指定</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114214607453-1678677455.png" alt="image-20231114214606820"></p><p>这种方式在重启系统后将失效，若要一直有效，可编辑<code>/etc/profile</code> 文件</p><p>在最后添加 <code>export LANG=zh_CN.gbk</code></p><h3 id="（6）对目录赋予权限"><a href="#（6）对目录赋予权限" class="headerlink" title="（6）对目录赋予权限"></a>（6）对目录赋予权限</h3><p>对Resin 和 jdk 目录使用 <code>chmod +x </code>赋予可执行权限</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114215811531-645230160.png" alt="image-20231114215810827"></p><p>命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/weaver/</span><br><span class="line">chmod +x Resin4/*</span><br><span class="line">chmod +x jdk1.8.0_151/*</span><br></pre></td></tr></table></figure><h3 id="（7）检查文件格式"><a href="#（7）检查文件格式" class="headerlink" title="（7）检查文件格式"></a>（7）检查文件格式</h3><p>（在 windows 下编写的脚本文件，放到 Linux 中无法识别）</p><p>切换到Resin的bin目录，使用 <code>vi</code>命令查看shell脚本内容 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/weaver/Resin4/bin</span><br><span class="line">vi startresin.sh </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114220051926-1511995118.png" alt="image-20231114220051405"></p><p>显示内容如下</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114220549524-1712176701.png" alt="image-20231114220548940"></p><p>如果是这个结果，则代表文件格式是正确的，直接输入<code>:q!</code> (冒号+q+感叹号表示不保存修) 改直接退出 vi 操作</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114220638753-1823912521.png" alt="image-20231114220638213"></p><p>如果是这个结果，则代表文件格式是错误的，需要转换格式，否则无法启动</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114220713509-403661258.png" alt="image-20231114220713062"></p><p>输入<code>:set ff=unix</code> (冒号+set+空格+ff 等于 unix 表示把文件格式由 dos 转换为 unix)</p><p> 回车后再输入<code>:wq</code> (冒号+w+q 表示保存之前的修改并退出 vi 操作)</p><p> 除了 startresin.sh 外，resin.sh 和 stopresin.sh 也必须检查，保证文件格式正确</p><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><h3 id="修改验证码"><a href="#修改验证码" class="headerlink" title="修改验证码"></a>修改验证码</h3><p>为方便记忆及日后license维护，可以修改验证码默认值为1</p><p>验证码默认值为<code>wEAver2018</code>可在文件 <code>ecology\WEB-INF\code.key</code> 中查看</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114222545494-920588789.png" alt="image-20231114222537960"></p><p>可直接修改<code>code.key</code> 文件，也可通过初始化页面修改</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114222716045-1613342454.png" alt="image-20231114222715608"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>因为无论是否使用现有数据库，数据库均需手动到数据库中创建，程序无法自动生成</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114223330170-2022909818.png" alt="image-20231114223322650"></p><p>手动创建数据库</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114223233386-79675942.png" alt="image-20231114223232833"></p><p>创建好后即可开始初始化数据库，初始化耗时较长，需耐心等待</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114223529763-1002787339.png" alt="image-20231114223529239"></p><p>若想重新初始化数据库将<code>ecology\WEB-INF\prop\weaver.properties</code>文件内容清空</p><p>重启服务后重新访问OA地址即可重新进入初始化界面</p><p>当然，也可直接修改数据库连接地址，数据库名，用户名，密码等配置信息</p><p>数据库初始化完成之后重新登录系统即可,管理员初始密码为 <code>Weaver@2001</code>,可通过sql改为1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将用户登录密码改为1   默认密码 Weaver@2001</span></span><br><span class="line"><span class="keyword">update</span> hrmresource <span class="keyword">set</span> password<span class="operator">=</span><span class="string">&#x27;C4CA4238A0B923820DCC509A6F75849B&#x27;</span> </span><br><span class="line"><span class="comment">-- 系统管理员登录密码改为1</span></span><br><span class="line"><span class="keyword">update</span> hrmresourcemanager <span class="keyword">set</span> password<span class="operator">=</span><span class="string">&#x27;C4CA4238A0B923820DCC509A6F75849B&#x27;</span> </span><br></pre></td></tr></table></figure><p>首次登录需要提交license授权文件，授权后会进入Ecology升级确认页面，按操作指引操作即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115125011991-1623633147.png" alt="image-20231115125011884"></p><h2 id="启用非标功能"><a href="#启用非标功能" class="headerlink" title="启用非标功能"></a>启用非标功能</h2><h3 id="申请非标包"><a href="#申请非标包" class="headerlink" title="申请非标包"></a>申请非标包</h3><p>可通过<code>Ecology功能及版本升级申请流程</code> 申请本地DEMO非标包</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115131356664-529486860.png" alt="image-20231115131356893"></p><p>申请时需注意以下信息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115131226869-1922554369.png" alt="image-20231115131226722"></p><h3 id="升级非标"><a href="#升级非标" class="headerlink" title="升级非标"></a>升级非标</h3><p>将非标包解压后直接覆盖到ecology目录，重启Resin服务</p><p>重启后重新访问OA进入升级页面</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115220236614-1231633897.png" alt="image-20231115220235973"></p><p>使用系统管理员账号登录，进行升级操作</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115220326442-1582505146.png" alt="image-20231115220325965"></p><p>填写数据库地址后六位信息及数据库名后三位</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115220737085-1842553394.png" alt="image-20231115220736382"></p><p>详细信息可在 <code>ecology/WEB-INF/prop/weaver.properties</code> 中查看</p><p>以我本地服务为例，数据库地址为 127.0.0.1，后六位为 .0.0.1；数据库名为ecology,后三位为ogy</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115221002253-1830263147.png" alt="image-20231115221001654"></p><p>重要提醒确认</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115221154375-881579704.png" alt="image-20231115221153868"></p><p>确认其他配置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115221214671-1405785337.png" alt="image-20231115221214071"></p><p>点击确定后开始执行sql脚本</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115221319940-1568502724.png" alt="image-20231115221319203"></p><p>脚本执行完毕后重新登录OA进入<strong>Ecology升级完成确认页面</strong>，按照操作指引一次点击下一步即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115223622481-1394942944.png" alt="image-20231115223621537"></p><h3 id="启用非标"><a href="#启用非标" class="headerlink" title="启用非标"></a>启用非标</h3><p>使用系统管理员登录OA后右上角设置按钮点击授权信息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115223817514-1164129625.png" alt="image-20231115223816956"></p><p>此时非标功能启用情况已启用数量为0</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115223907249-868811263.png" alt="image-20231115223906464"></p><p>点击蓝色链接进入非标功能管理界面，勾选需要启用的非标进行启用</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115224035412-509391539.png" alt="image-20231115224034684"></p><p>启用时会有相应提醒</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115224133592-5872113.png" alt="image-20231115224132848"></p><p>启用后可重新查看已启用数量确认</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231115224239180-1488921123.png" alt="image-20231115224238550"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ecology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简介</title>
      <link href="/posts/76390e98.html"/>
      <url>/posts/76390e98.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是：Build, Ship and Run Any App, Anywhere，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP及其运行环境能做到一次镜像,处处运行。</p><h1 id="传统虚拟机和容器"><a href="#传统虚拟机和容器" class="headerlink" title="传统虚拟机和容器"></a>传统虚拟机和容器</h1><p>传统虚拟机（virtual machine）：</p><p>传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（如VirtualBox、VMware等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装从操作系统，在从操作系统中安装部署各种应用。</p><p>缺点：资源占用多、冗余步骤多、启动慢</p><p>Linux容器（Linux Container，简称LXC）：</p><p>Linux容器是与系统其他部分分隔开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p><p>Linux容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一的运行。</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231107223123022-585346617.png" alt="image-20231107223128089"></p><p>对比：</p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>大小</td><td>一般为Mb</td><td>一般为Gb</td></tr><tr><td>速度</td><td>接近原生</td><td>比较慢</td></tr><tr><td>系统支持数量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><p> Docker运行速度快的原因 </p><p>Docker有比虚拟机更少的抽象层：</p><p>由于Docker不需要Hypervisor（虚拟机）实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在CPU、内存利用率上docker有明显优势。</p><p>Docker利用的是宿主机的内核，而不需要加载操作系统OS内核：</p><p>当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较耗时耗资源的过程。当新建一个虚拟机时，虚拟机软件需要加载OS，返回新建过程是分钟级别的。而Docker由于直接利用宿主机的操作系统，则省略了返回过程，因此新建一个docker容器只需要几秒钟。</p><p>Docker容器的本质就是一个进程。</p><p> Docker软件 </p><p>Docker并非一个通用的容器工具，它依赖于已经存在并运行的Linux内核环境。（在Windows上安装Docker时需要依赖WLS，也即Windows下的Linux子系统）。</p><p>Docker实质上是在已经运行的Linux下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的Linux主机。</p><p>Docker的基本组成部分：</p><p>●镜像（image）</p><p>●容器（container）</p><p>●仓库（repository）</p><p> Docker镜像 </p><p>Docker镜像就是一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建多个容器。</p><p> Docker容器 </p><p>Docker利用容器独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。</p><p> Docker仓库 </p><p>Docker仓库是集中存放镜像文件的场所。</p><p>仓库分为公开仓库和私有仓库两种。</p><p>最大的公开仓库是Docker官方的Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p> Docker架构 </p><p>Docker是一个 C&#x2F;S（Client-Server） 结构的系统，后端是一个松耦合架构，众多模块各司其职。</p><p>Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从容器接收命令并管理运行在主机上的容器。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/svg/12911942/1652093339897-20255a0a-e981-43e3-9e9e-654b8da3b2c8.svg" alt="architecture.svg"></p><p>Docker运行的基本流程为：</p><p>1用户是使用Docker Client 与 Docker Daemon 建立通信，并发送请求给后者</p><p>2Docker Daemon 作为 Docker 架构的主体部分，首先提供 Docker Server 的功能使其可以接收 Docker Client 的请求</p><p>3Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式存在</p><p>4Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph Driver 将下载镜像以 Graph 的形式存储</p><p>5当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境</p><p>6当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Exec driver 来完成</p><p>7Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12911942/1652093347909-4fcf65d1-da12-47cb-9a2f-0c4528d7e4c9.png?x-oss-process=image/resize,w_750,limit_0" alt="flow.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建青龙面板</title>
      <link href="/posts/5e73aab9.html"/>
      <url>/posts/5e73aab9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>青龙面板是一个支持 Python3、JavaScript、Shell、Typescript 的定时任务管理平台</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205221951329-737339706.png" alt="image-20231205221920409"></p><p>支持多种脚本语言（python3、javaScript、shell、typescript）<br>支持在线管理脚本、环境变量、配置文件<br>支持在线查看任务日志<br>支持秒级任务设置<br>支持系统级通知<br>支持暗黑模式<br>支持手机端操作</p><h1 id="二、部署服务"><a href="#二、部署服务" class="headerlink" title="二、部署服务"></a>二、部署服务</h1><p> 创建并切换到文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir qinglong;cd qinglong </span><br></pre></td></tr></table></figure><p>创建 <code>docker-compose.yml</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>粘贴以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="comment"># alpine 基础镜像版本</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">whyour/qinglong:latest</span></span><br><span class="line">    <span class="comment"># debian-slim 基础镜像版本</span></span><br><span class="line">    <span class="comment"># image: whyour/qinglong:debian  </span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/ql/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:5700:5700&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 部署路径非必须，以斜杠开头和结尾，比如 /test/</span></span><br><span class="line">      <span class="attr">QlBaseUrl:</span> <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>运行 docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>运行成功后可以执行 <code>docker-compose ps</code> 查看运行状态</p><p>输入 ip 加默认端口即可进行访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:5700</span><br></pre></td></tr></table></figure><p>四、初始化配置</p><p>通过网页访问，进行初始化配置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205220413863-813001235.png" alt="image-20231205220401595"></p><p>设置用户名及密码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205220526597-2003164793.png" alt="image-20231205220501728"></p><p>设置通知方式</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205220541673-1757040949.png" alt="image-20231205220510411"></p><p>安装完成</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205220750182-340117331.png" alt="image-20231205220606658"></p><p>登录后界面如下所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205220833255-908296039.png" alt="image-20231205220811482"></p><h1 id="三、更新服务"><a href="#三、更新服务" class="headerlink" title="三、更新服务"></a>三、更新服务</h1><p>停止容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>拉取最新镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose pull</span><br></pre></td></tr></table></figure><p>重新启动容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><h1 id="四、绑定域名"><a href="#四、绑定域名" class="headerlink" title="四、绑定域名"></a>四、绑定域名</h1><p>以 <code>Nginx Proxy Manager</code> 为例</p><p>域名添加一条A记录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205221234746-2116909395.png" alt="image-20231205221155402"></p><p>登录 npm，添加一条反向代理</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205221348035-1998798022.png" alt="image-20231205221248328"></p><p>按照如下配置，添加刚才设置的域名，ip及端口</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205221508079-1838260150.png" alt="image-20231205221458581"></p><p>添加一个ssl证书</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205221626245-1228236582.png" alt="image-20231205221600781"></p><p>填写通知邮箱，点击保存即可</p><p>点击域名即可自动进行页面跳转</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205221820605-1799615561.png" alt="image-20231205221753941"></p><p>可直接输入域名进行访问</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231205221844826-1394535746.png" alt="image-20231205221823640"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署去中心化聊天室</title>
      <link href="/posts/9b7f5b43.html"/>
      <url>/posts/9b7f5b43.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p>需要搭建 <code>Matrix</code> 服务和 <code>Element</code> Web端应用</p><p>Matrix 是一个开放的通信协议，用于实时通信，包括即时消息、音频和视频通话。<br>它是去中心化的，这意味着任何人都可以设置自己的 Matrix 服务器，并与其他 Matrix 服务器通信。<br>Matrix 的目标是为所有不同的通信服务提供一个统一的标准，使得不同的服务可以互相通信。</p><p>Element 是基于 Matrix 协议的一个客户端应用。<br>它允许用户通过 Matrix 协议进行即时消息、音频和视频通话。<br>Element 有多个版本，包括 Web、桌面和移动应用。<br>它是 Matrix 生态系统中最流行的客户端之一。</p><p>Matrix 官方网站：<a href="https://matrix.org/">https://matrix.org/</a><br>Matrix GitHub 官方仓库：<a href="https://github.com/matrix-org/synapse">https://github.com/matrix-org/synapse</a><br>Element 官方网站：<a href="https://element.io/">https://element.io/</a><br>Element 自建 GitHub 地址：<a href="https://github.com/vector-im/element-web">https://github.com/vector-im/element-web</a></p><h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><h2 id="1、绑定域名"><a href="#1、绑定域名" class="headerlink" title="1、绑定域名"></a>1、绑定域名</h2><p>需要分别为 <code>Matrix</code> 和 <code>Element</code> 绑定域名，各添加一条A记录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216103438808-1079332897.png" alt="image-20231216103439701"></p><h2 id="2、添加反向代理"><a href="#2、添加反向代理" class="headerlink" title="2、添加反向代理"></a>2、添加反向代理</h2><p>使用 <code>Nginx Proxy Manager</code> 添加反向代理，我分别使用8008和8009端口，注意开放相应防火请</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216104142659-1351285830.png" alt="image-20231216104143585"></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216104034892-860427198.png" alt="image-20231216104035864"></p><p>可以再设置一下SSL</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216104304537-911226898.png" alt="image-20231216104305597"></p><h2 id="3、部署服务"><a href="#3、部署服务" class="headerlink" title="3、部署服务"></a>3、部署服务</h2><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/docker_data/matrix</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/docker_data/matrix</span><br></pre></td></tr></table></figure><p>拉取并运行镜像，注意修改 <code>SYNAPSE_SERVER_NAME</code> 为自己刚才设置的matrix需绑定的域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it --<span class="built_in">rm</span> \</span><br><span class="line">-v /root/docker_data/matrix/data:/data \</span><br><span class="line">-e SYNAPSE_SERVER_NAME=matrix.shiguangdev.eu.org \</span><br><span class="line">-e SYNAPSE_REPORT_STATS=<span class="built_in">yes</span> \</span><br><span class="line">matrixdotorg/synapse:latest generate</span><br></pre></td></tr></table></figure><p>修改 <code>homeserver.yaml</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/docker_data/matrix/data</span><br><span class="line"></span><br><span class="line">vim homeserver.yaml</span><br></pre></td></tr></table></figure><p>在最底部添加以下内容，打开注册功能以及跳过注册验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enable_registration: true</span><br><span class="line">enable_registration_without_verification: true</span><br></pre></td></tr></table></figure><p>如图所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216111206506-1747171155.png" alt="image-20231216111207502"></p><p>创建 <code>docker-compose.yml</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/docker_data/matrix</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>粘贴以下内容，注意将 <code>VIRTUAL_HOST</code>、<code>LETSENCRYPT_HOST</code>、<code>SYNAPSE_SERVER_NAME</code> 替换为自己的域名</p><p>如端口需调整，注意修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  synapse:</span><br><span class="line">    image: &quot;matrixdotorg/synapse:latest&quot;</span><br><span class="line">    container_name: &quot;matrix_synapse&quot;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - 8008:8008</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./data:/data&quot; # it will look at the current directory where you save the file and look for the data folder inside</span><br><span class="line">    environment:</span><br><span class="line">      VIRTUAL_HOST: &quot;matrix.shiguangdev.eu.org&quot;</span><br><span class="line">      VIRTUAL_PORT: 8008</span><br><span class="line">      LETSENCRYPT_HOST: &quot;matrix.shiguangdev.eu.org&quot;</span><br><span class="line">      SYNAPSE_SERVER_NAME: &quot;matrix.shiguangdev.eu.org&quot;</span><br><span class="line">      SYNAPSE_REPORT_STATS: &quot;yes&quot;</span><br><span class="line">  element-web:</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;8009:80&#x27;</span><br><span class="line">    #volumes:</span><br><span class="line">    #    - &#x27;/etc/element-web/config.json:/app/config.json&#x27;</span><br><span class="line">    image: vectorim/element-web</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure><p>执行 <code>docker-compose up -d</code> </p><p>通过 ip+端口 或者域名即可访问 </p><p>Matrix服务</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216111939375-1481886112.png" alt="image-20231216111940434"></p><p>Element</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216112512215-782901218.png" alt="image-20231216112511645"></p><p>若出现以下错误，需用域名访问，并且使用https的方式访问，反向代理时，SSL可勾选 <code>Force SSL</code> 强制https访问</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216115241484-1378905479.png" alt="image-20231216115239099"></p><h2 id="4、注册账号与使用"><a href="#4、注册账号与使用" class="headerlink" title="4、注册账号与使用"></a>4、注册账号与使用</h2><h3 id="4-1-注册账号"><a href="#4-1-注册账号" class="headerlink" title="4.1 注册账号"></a>4.1 注册账号</h3><p>可以调整语言为简体中文</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216113645928-1507737593.png" alt="image-20231216113640915"></p><p>创建账户 &#x3D;&gt; 编辑 &#x3D;&gt; 使用自己搭建的Matrix服务</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216113818269-1292002415.png" alt="image-20231216113802377"></p><p>设置用户名及密码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216114010475-1037490128.png" alt="image-20231216113954180"></p><p>这个界面可以跳过</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216114312568-40872563.png" alt="image-20231216114256868"></p><p>至此账号已经创建完成</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216114356300-1469636097.png" alt="image-20231216114342244"></p><p>点击头像可以查看账户地址</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216120229818-1549433554.png" alt="image-20231216120215840"></p><p>或者在所有设置 &#x3D;&gt; 通用 &#x3D;&gt; 个人资料查看</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216120422432-324325353.png" alt="image-20231216120419789"></p><h3 id="4-2-日常对话"><a href="#4-2-日常对话" class="headerlink" title="4.2 日常对话"></a>4.2 日常对话</h3><p>新创建跟个账户模拟聊天，输入对方账户地址，前往</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216120603180-1034483934.png" alt="image-20231216120549415"></p><p>模拟向对方发送一条消息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216120700131-163692231.png" alt="image-20231216120646646"></p><p>对方会收到邀请通知</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216120819274-1229705909.png" alt="image-20231216120805384"></p><p>对方可以接受聊天或者拒绝</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216120859680-348034285.png" alt="image-20231216120846117"></p><p>回复一条消息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216121012437-1912795107.png" alt="image-20231216120958779"></p><p>你接收到的消息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216121127847-1783790803.png" alt="image-20231216121114678"></p><h3 id="4-3-房间及视频通话"><a href="#4-3-房间及视频通话" class="headerlink" title="4.3 房间及视频通话"></a>4.3 房间及视频通话</h3><p>可以创建房间，类似群的功能</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216121442571-156016793.png" alt="image-20231216121439987"></p><p>如果需要视频通话，可以在设置 &#x3D;&gt; 实验室 &#x3D;&gt; 加入beta</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216121637081-433229662.png" alt="image-20231216121623465"></p><p>加入beta 后就可以创建视频房间了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216121820516-93927935.png" alt="image-20231216121807060"></p><p>模拟创建一个视频房间</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216122138940-140971214.png" alt="image-20231216122131578"></p><p>要求成员加入，被要求人也需加入beta</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216122138480-1948953704.png" alt="image-20231216122125001"></p><p>被邀请人加入beta后可接受要求</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216122218181-1818224132.png" alt="image-20231216122205067"></p><p>开启视频和麦克风权限后就能开启视频通话了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216122355789-854176605.png" alt="image-20231216122342282"></p><h2 id="5、更新服务"><a href="#5、更新服务" class="headerlink" title="5、更新服务"></a>5、更新服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/docker_data/matrix</span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止</span></span><br><span class="line"> <span class="comment"># docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器,可以节省一些时间</span></span><br><span class="line">docker-compose up -d   </span><br><span class="line"></span><br><span class="line"><span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br><span class="line">docker image prune  </span><br></pre></td></tr></table></figure><h2 id="6、卸载服务"><a href="#6、卸载服务" class="headerlink" title="6、卸载服务"></a>6、卸载服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/docker_data/matrix</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/docker_data/matrix  <span class="comment"># 完全删除</span></span><br></pre></td></tr></table></figure><p><strong>参考文章</strong></p><blockquote><p><a href="https://blog.laoda.de/archives/docker-compose-install-matrix-element/">https://blog.laoda.de/archives/docker-compose-install-matrix-element/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Maxtri </tag>
            
            <tag> Element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署服务器运维管理面板1Panel</title>
      <link href="/posts/2820226a.html"/>
      <url>/posts/2820226a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p>1Panel 是一个现代化、开源的 Linux 服务器运维管理面板。1Panel 的功能和优势包括：</p><ul><li><strong>快速建站</strong>：深度集成 Wordpress 和 <a href="https://github.com/halo-dev/halo/">Halo</a>，域名绑定、SSL 证书配置等一键搞定；</li><li><strong>高效管理</strong>：通过 Web 端轻松管理 Linux 服务器，包括主机监控、文件管理、数据库管理、容器管理等；</li><li><strong>安全可靠</strong>：基于容器来管理和部署应用，最小漏洞暴露面，提供防火墙和日志审计等功能；</li><li><strong>一键备份</strong>：支持一键备份和恢复，备份数据到各类云端存储，永不丢失；</li><li><strong>应用商店</strong>：精选各类高质量开源工具和应用软件，助力您轻松安装和升级。</li></ul><p>官网地址：<a href="https://1panel.cn/">https://1panel.cn/</a></p><p>Github: <a href="https://github.com/1Panel-dev/1Panel">https://github.com/1Panel-dev/1Panel</a></p><p>官方文档：<a href="https://1panel.cn/docs/">https://1panel.cn/docs/</a></p><p>UI展示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217112957650-691345650.png" alt="image-20231217112945259"></p><p><strong>在线体验</strong></p><ul><li>环境地址：<a href="https://demo.1panel.cn/">https://demo.1panel.cn/</a></li><li>用户名：demo</li><li>密码：1panel</li></ul><h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><p>执行一键安装脚本</p><p><strong>RedHat &#x2F; CentOS</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh</span><br></pre></td></tr></table></figure><p><strong>Ubuntu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh</span><br></pre></td></tr></table></figure><p><strong>Debian</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; bash quick_start.sh</span><br></pre></td></tr></table></figure><p>按照按照导引操作即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217120430103-1306063556.png" alt="image-20231217120428273"></p><p>安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://目标服务器 IP 地址:目标端口/安全入口</span><br></pre></td></tr></table></figure><ul><li><strong>如果使用的是云服务器，请至安全组开放目标端口。</strong></li><li><strong>ssh 登录 1Panel 服务器后，执行 1pctl user-info 命令可获取安全入口（entrance）</strong></li></ul><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217143738545-18450991.png" alt="image-20231217143737457"></p><p>可使用 <a href="https://1panel.cn/docs/installation/cli/">1pctl</a> 命令行工具来维护 1Panel</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217143818044-537723358.png" alt="image-20231217143817582"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 面板 </tag>
            
            <tag> 1Panel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Nginx Proxy Manager</title>
      <link href="/posts/e1a8425c.html"/>
      <url>/posts/e1a8425c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>官网地址：<a href="https://nginxproxymanager.com/">https://nginxproxymanager.com/</a></p><p>github: <a href="https://github.com/NginxProxyManager/nginx-proxy-manager">https://github.com/NginxProxyManager/nginx-proxy-manager</a></p></blockquote><p>更新环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update -y &amp;&amp; apt install -y curl socat wget sudo</span><br></pre></td></tr></table></figure><p>安装 Docker 及  docker-compose </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | sh</span><br><span class="line"></span><br><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose </span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>创建目录并进入目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir -p /root/docker_data/nginx-proxy-manager</span><br><span class="line"></span><br><span class="line">cd /root/docker_data/nginx-proxy-manager</span><br></pre></td></tr></table></figure><p>创建docker-compose.yml的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><p>复制代码进入文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line"> app:</span><br><span class="line"></span><br><span class="line">  image: &#x27;jc21/nginx-proxy-manager:latest&#x27;</span><br><span class="line"></span><br><span class="line">  restart: unless-stopped</span><br><span class="line"></span><br><span class="line">  ports:</span><br><span class="line"></span><br><span class="line">   \- &#x27;80:80&#x27;</span><br><span class="line"></span><br><span class="line">   \- &#x27;81:81&#x27;</span><br><span class="line"></span><br><span class="line">   \- &#x27;443:443&#x27;</span><br><span class="line"></span><br><span class="line">  volumes:</span><br><span class="line"></span><br><span class="line">   \- ./data:/data</span><br><span class="line"></span><br><span class="line">   \- ./letsencrypt:/etc/letsencrypt</span><br></pre></td></tr></table></figure><p>中文版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">&#x27;chishin/nginx-proxy-manager-zh:latest&#x27;</span></span><br></pre></td></tr></table></figure><p>crl＋x 然后y 然后回车退出编辑模式</p><p>注意：80 和 443 端口不能修改，否则会出现 <code>Internal Error</code> 错误</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222224356678-886363766.png" alt="image-20231222224350178"></p><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>默认用户名密码</p><p>Email: <a href="mailto:&#x61;&#100;&#109;&#x69;&#110;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;">&#x61;&#100;&#109;&#x69;&#110;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><p>Password: changeme</p><p>首次登录需要设置管理员账户信息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222222931716-582424306.png" alt="image-20231222222932729"></p><p>重置密码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231222223213968-1680502182.png" alt="image-20231222223215266"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx Proxy Managerg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署chatgpt-on-wechat</title>
      <link href="/posts/bc13b41b.html"/>
      <url>/posts/bc13b41b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p><strong>chatgpt-on-wechat</strong> (cow) 项目是使用 ChatGPT 搭建的智能聊天机器人，在GPT3.5&#x2F;4.0 API 及 itchat框架的基础上实现，支持个人微信、公众号、企业微信部署，能生成文本、语音和图片，访问操作系统和互联网。</p><p>最新版本支持的功能如下：</p><ul><li><strong>多端部署：</strong> 可接入 个人微信、微信公众号、企业微信应用</li><li><strong>基础对话：</strong> 私聊及群聊的消息智能回复，支持多轮会话上下文记忆，支持 GPT-3, GPT-3.5, GPT-4, 文心一言模型</li><li><strong>语音识别：</strong> 可识别语音消息，通过文字或语音回复，支持 azure, baidu, google, openai 等多种语音模型</li><li><strong>图片生成：</strong> 支持图片生成 和 图生图（如照片修复），可选择 Dell-E, stable diffusion, replicate, Midjourney 模型</li><li><strong>丰富插件：</strong> 支持个性化插件扩展，已实现多角色切换、文字冒险、敏感词过滤、聊天记录总结等插件</li><li><strong>Tool工具：</strong> 与操作系统和互联网交互，支持最新信息搜索、数学计算、天气和资讯查询、网页总结，基于 <a href="https://github.com/goldfishh/chatgpt-tool-hub">chatgpt-tool-hub</a> 实现</li><li><strong>知识库：</strong> 通过上传知识库文件自定义专属机器人，可作为数字分身、领域知识库、智能客服使用，基于 LinkAI 实现</li></ul><p><strong>项目地址 (Github)：</strong> <a href="https://github.com/zhayujie/chatgpt-on-wechat">https://github.com/zhayujie/chatgpt-on-wechat</a></p><p><strong>项目地址 (Gitee)：</strong> <a href="https://gitee.com/zhayujie/chatgpt-on-wechat">https://gitee.com/zhayujie/chatgpt-on-wechat</a></p><p><strong>演示：</strong> <a href="https://github-production-user-asset-6210df.s3.amazonaws.com/26161723/276637295-d5154020-36e3-41db-8706-40ce9f3f1b1e.mp4">视频demo</a></p><h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><h2 id="1、-下载-docker-compose-yml-文件"><a href="#1、-下载-docker-compose-yml-文件" class="headerlink" title="1、 下载 docker-compose.yml 文件"></a>1、 下载 <code>docker-compose.yml</code> 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://open-1317903499.cos.ap-guangzhou.myqcloud.com/docker-compose.yml</span><br></pre></td></tr></table></figure><h2 id="2、修改docker-compose-yml文件"><a href="#2、修改docker-compose-yml文件" class="headerlink" title="2、修改docker-compose.yml文件"></a>2、修改<code>docker-compose.yml</code>文件</h2><p>需修改如下配置</p><p> <code>OPEN_AI_API_KEY</code> ：你的OpenAI API KEY</p><p> <code>SINGLE_CHAT_PREFIX </code>:  私聊时文本需要包含该前缀才能触发机器人回复</p><p> <code>GROUP_NAME_WHITE_LIST</code> :  开启自动回复的群名称列表</p><p>此处我稍微做了一些调整，修改了默认端口，分别映射到自定义端口上</p><p>chatgpt-on-wechat 服务默认使用以下端口：</p><p>80端口：用于访问 Web 界面，即聊天界面。<br>8000端口：用于与微信服务器进行通信，接收和发送消息。<br>8888端口：用于与 OpenAI GPT-3 API 进行通信，发送用户输入并接收生成的回复。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;2.0&#x27;</span><br><span class="line">services:</span><br><span class="line">  chatgpt-on-wechat:</span><br><span class="line">    image: zhayujie/chatgpt-on-wechat</span><br><span class="line">    container_name: chatgpt-on-wechat</span><br><span class="line">    security_opt:</span><br><span class="line">      - seccomp:unconfined</span><br><span class="line">    ports:</span><br><span class="line">      - 8801:80</span><br><span class="line">      - 8802:8000</span><br><span class="line">      - 8803:8888</span><br><span class="line">    environment:</span><br><span class="line">      OPEN_AI_API_KEY: &#x27;xxxxxxxxxxxxx&#x27;</span><br><span class="line">      MODEL: &#x27;gpt-3.5-turbo&#x27;</span><br><span class="line">      PROXY: &#x27;&#x27;</span><br><span class="line">      SINGLE_CHAT_PREFIX: &#x27;[&quot;bot&quot;, &quot;@bot&quot;]&#x27;</span><br><span class="line">      SINGLE_CHAT_REPLY_PREFIX: &#x27;&quot;[bot] &quot;&#x27;</span><br><span class="line">      GROUP_CHAT_PREFIX: &#x27;[&quot;@bot&quot;]&#x27;</span><br><span class="line">      GROUP_NAME_WHITE_LIST: &#x27;[&quot;時光gpt测试群&quot;, &quot;ChatGPT测试群&quot;]&#x27;</span><br><span class="line">      IMAGE_CREATE_PREFIX: &#x27;[&quot;画&quot;, &quot;看&quot;, &quot;找&quot;]&#x27;</span><br><span class="line">      CONVERSATION_MAX_TOKENS: 1000</span><br><span class="line">      SPEECH_RECOGNITION: &#x27;False&#x27;</span><br><span class="line">      CHARACTER_DESC: &#x27;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&#x27;</span><br><span class="line">      EXPIRES_IN_SECONDS: 3600</span><br><span class="line">      USE_GLOBAL_PLUGIN_CONFIG: &#x27;True&#x27;</span><br><span class="line">      USE_LINKAI: &#x27;False&#x27;</span><br><span class="line">      LINKAI_API_KEY: &#x27;&#x27;</span><br><span class="line">      LINKAI_APP_CODE: &#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更多环境变量参考以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;open_ai_api_key&quot;: &quot;YOUR API KEY&quot;,                          # 填入上面创建的 OpenAI API KEY</span><br><span class="line">  &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,                                   # 模型名称, 支持 gpt-3.5-turbo, gpt-3.5-turbo-16k, gpt-4, wenxin, xunfei</span><br><span class="line">  &quot;proxy&quot;: &quot;&quot;,                                                # 代理客户端的ip和端口，国内环境开启代理的需要填写该项，如 &quot;127.0.0.1:7890&quot;</span><br><span class="line">  &quot;single_chat_prefix&quot;: [&quot;bot&quot;, &quot;@bot&quot;],                      # 私聊时文本需要包含该前缀才能触发机器人回复</span><br><span class="line">  &quot;single_chat_reply_prefix&quot;: &quot;[bot] &quot;,                       # 私聊时自动回复的前缀，用于区分真人</span><br><span class="line">  &quot;group_chat_prefix&quot;: [&quot;@bot&quot;],                              # 群聊时包含该前缀则会触发机器人回复</span><br><span class="line">  &quot;group_name_white_list&quot;: [&quot;ChatGPT测试群&quot;, &quot;ChatGPT测试群2&quot;], # 开启自动回复的群名称列表</span><br><span class="line">  &quot;group_chat_in_one_session&quot;: [&quot;ChatGPT测试群&quot;],              # 支持会话上下文共享的群名称  </span><br><span class="line">  &quot;image_create_prefix&quot;: [&quot;画&quot;, &quot;看&quot;, &quot;找&quot;],                   # 开启图片回复的前缀</span><br><span class="line">  &quot;conversation_max_tokens&quot;: 1000,                            # 支持上下文记忆的最多字符数</span><br><span class="line">  &quot;speech_recognition&quot;: false,                                # 是否开启语音识别</span><br><span class="line">  &quot;group_speech_recognition&quot;: false,                          # 是否开启群组语音识别</span><br><span class="line">  &quot;use_azure_chatgpt&quot;: false,                                 # 是否使用Azure ChatGPT service代替openai ChatGPT service. 当设置为true时需要设置 open_ai_api_base，如 https://xxx.openai.azure.com/</span><br><span class="line">  &quot;azure_deployment_id&quot;: &quot;&quot;,                                  # 采用Azure ChatGPT时，模型部署名称</span><br><span class="line">  &quot;azure_api_version&quot;: &quot;&quot;,                                    # 采用Azure ChatGPT时，API版本</span><br><span class="line">  &quot;character_desc&quot;: &quot;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&quot;,  # 人格描述</span><br><span class="line">  # 订阅消息，公众号和企业微信channel中请填写，当被订阅时会自动回复，可使用特殊占位符。目前支持的占位符有&#123;trigger_prefix&#125;，在程序中它会自动替换成bot的触发词。</span><br><span class="line">  &quot;subscribe_msg&quot;: &quot;感谢您的关注！\n这里是ChatGPT，可以自由对话。\n支持语音对话。\n支持图片输出，画字开头的消息将按要求创作图片。\n支持角色扮演和文字冒险等丰富插件。\n输入&#123;trigger_prefix&#125;#help 查看详细指令。&quot;,</span><br><span class="line">  &quot;use_linkai&quot;: false,                                        # 是否使用LinkAI接口，默认关闭，开启后可国内访问，使用知识库和MJ</span><br><span class="line">  &quot;linkai_api_key&quot;: &quot;&quot;,                                       # LinkAI Api Key</span><br><span class="line">  &quot;linkai_app_code&quot;: &quot;&quot;                                       # LinkAI 应用code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>运行 <code>docker ps</code> 能查看到 NAMES 为 <code>chatgpt-on-wechat</code> 的容器即表示运行成功</p><p>最后运行以下命令可查看容器运行日志，扫描日志中的二维码即可完成登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f chatgpt-on-wechat</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216181255113-1716560990.png" alt="image-20231216181256504"></p><h2 id="4、如何使用"><a href="#4、如何使用" class="headerlink" title="4、如何使用"></a>4、如何使用</h2><p>成功运行之后日志中会输出 “Start auto replying”，这表示你用于扫码登录的账号已经变身为机器人了，让你的好友给你发消息 或在群聊@你 都会触发自动回复，效果如下图：</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216180844935-1511805991.png" alt="image-20231216180846189"></p><h2 id="5、停止容器"><a href="#5、停止容器" class="headerlink" title="5、停止容器"></a>5、停止容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure><p>注意：如果修改了 <code>docker-compose.yml</code> 中的配置，需要关闭容器后再重新启动才能生效，只执行 <code>docker restart</code> 是不起作用的。</p><h2 id="6、常见问题"><a href="#6、常见问题" class="headerlink" title="6、常见问题"></a>6、常见问题</h2><ol><li>如果发送消息没有回复，对于私聊场景确认下消息是否携带了触发词，对应配置 <code>single_chat_prefix</code>，对于群聊场景要确认该群名称是否配置在群组白名单 (<code>group_name_white_list</code>) 中。</li><li>如果机器人回复 “我现在有点累了” 或 “我连接不到你的网络” 等，一般是访问openAI接口失败，需查看日志中的具体报错信息来定位，可能是网络不通、openAI账号额度不足、访问频率超限等原因。</li><li>可能存在一定账号被限制的风险，建议仅用于技术研究或娱乐，不要过高频率使用。</li></ol><p>常见问题查看 <a href="https://github.com/zhayujie/chatgpt-on-wechat/wiki/FAQs">FAQs</a>，或直接与 <a href="https://link-ai.tech/app/Kv2fXJcH">在线项目小助手</a> 对话。</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ChatGPT </tag>
            
            <tag> Wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署chatgpt-next-web</title>
      <link href="/posts/c63b929a.html"/>
      <url>/posts/c63b929a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、ChatGPT-Next-Web介绍"><a href="#一、ChatGPT-Next-Web介绍" class="headerlink" title="一、ChatGPT Next Web介绍"></a>一、ChatGPT Next Web介绍</h1><h2 id="1-1-主要功能"><a href="#1-1-主要功能" class="headerlink" title="1.1 主要功能"></a>1.1 主要功能</h2><ul><li>在 1 分钟内使用 Vercel <strong>免费一键部署</strong></li><li>精心设计的 UI，响应式设计，支持深色模式</li><li>极快的首屏加载速度（~100kb）</li><li>海量的内置 prompt 列表，来自<a href="https://github.com/PlexPt/awesome-chatgpt-prompts-zh">中文</a>和<a href="https://github.com/f/awesome-chatgpt-prompts">英文</a></li><li>自动压缩上下文聊天记录，在节省 Token 的同时支持超长对话</li><li>一键导出聊天记录，完整的 Markdown 支持</li><li>拥有自己的域名？好上加好，绑定后即可在任何地方</li><li><strong>无障碍</strong>快速访问</li></ul><h2 id="1-2-项目展示"><a href="#1-2-项目展示" class="headerlink" title="1.2 项目展示"></a>1.2 项目展示</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212215534136-932614054.png" alt="image-20231212215518278"></p><p>GitHub地址：<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">https://github.com/Yidadaa/ChatGPT-Next-Web</a></p><p>演示 Demo: <a href="https://chat-gpt-next-web.vercel.app/">https://chat-gpt-next-web.vercel.app/</a></p><h1 id="二、搭建步骤"><a href="#二、搭建步骤" class="headerlink" title="二、搭建步骤"></a>二、搭建步骤</h1><h2 id="2-1-Vercel一键部署"><a href="#2-1-Vercel一键部署" class="headerlink" title="2.1 Vercel一键部署"></a>2.1 Vercel一键部署</h2><ol><li>准备好你的 <a href="https://platform.openai.com/account/api-keys">OpenAI API Key</a></li><li>点击右侧按钮开始部署： <a href="https://vercel.com/new/clone?repository-url=https://github.com/Yidadaa/ChatGPT-Next-Web&env=OPENAI_API_KEY&env=CODE&project-name=chatgpt-next-web&repository-name=ChatGPT-Next-Web">Deploy with Vercel</a>，直接使用 Github 账号登录即可，记得在环境变量页填入 API Key 和 <a href="https://github.com/Yidadaa/ChatGPT-Next-Web/blob/main/README_CN.md#%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81">页面访问密码</a> CODE</li><li>部署完毕后，即可开始使用</li><li><a href="https://vercel.com/docs/concepts/projects/domains/add-a-domain">绑定自定义域名</a>（可选）：Vercel 分配的域名 DNS 在某些区域被污染了，绑定自定义域名即可直连。</li></ol><h2 id="2-2-VPS部署"><a href="#2-2-VPS部署" class="headerlink" title="2.2 VPS部署"></a>2.2 VPS部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/docker_data/chatgpt-next-web</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/docker_data/chatgpt-next-web</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文模式下输入 <code>i</code> ，粘贴以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">    chatgpt-next-web:</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">&#x27;3000:3000&#x27;</span></span><br><span class="line">        environment:</span><br><span class="line">            - OPENAI_API_KEY=sk-xxxx    <span class="comment"># 填写你的API KEY</span></span><br><span class="line">            - CODE=your-password    <span class="comment"># 填一个密码，不然你的额度很快就会被刷完</span></span><br><span class="line">        image: yidadaa/chatgpt-next-web</span><br></pre></td></tr></table></figure><p>修改以下内容</p><p><code>OPENAI_API_KEY</code> : 你的 OpenAI key，可在登录OpenAi后访问<a href="https://platform.openai.com/api-keys">https://platform.openai.com/api-keys</a>  进行创建</p><p><code>CODE</code>: 访问密码，别人可以用你的访问密码进行登录，不过消耗的是你的Api额度</p><p>修改好之后，按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出</p><p>安全组放行 3000端口，也可调整为其他端口，例如调整为8080端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ports:</span><br><span class="line">      - <span class="string">&#x27;8080:3000&#x27;</span></span><br></pre></td></tr></table></figure><p>新增放行规则</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212224316514-1406546274.png" alt="image-20231212224301362"></p><p>执行 <code>docker-compose up -d</code> 进行部署</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212224345228-823966038.png" alt="image-20231212224328365"></p><p>部署成功后首次访问会进入如下界面，可输入访问密码进行访问</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212231934248-894426409.png" alt="image-20231212231934511"></p><h1 id="三、更新"><a href="#三、更新" class="headerlink" title="三、更新"></a>三、更新</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/docker_data/chatgpt-next-web</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/docker_data/chatgpt-next-web /root/docker_data/chatgpt-next-web.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><h1 id="四、卸载"><a href="#四、卸载" class="headerlink" title="四、卸载"></a>四、卸载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/docker_data/chatgpt-next-web</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/docker_data/chatgpt-next-web  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ChatGPT </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS记录类型详解</title>
      <link href="/posts/849096e5.html"/>
      <url>/posts/849096e5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><strong>DNS</strong>：Domain Name System 域名管理系统 域名是由圆点分开一串单词或缩写组成的，每一个域名都对应一个惟一的IP地址，这一命名的方法或这样管理域名的系统叫做域名管理系统。DNS：Domain Name Server 域名服务器 域名虽然便于人们记忆，但网络中的计算机之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器。 查看DNS更详细的解释</li><li><strong>A记录</strong>：A（Address）记录是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置域名的子域名。<strong>通俗来说A记录就是服务器的IP</strong>,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 简单的说，<strong>A记录是指定域名对应的IP地址</strong>。</li><li><strong>NS记录</strong>：NS（Name Server）记录是域名服务器记录，<strong>用来指定该域名由哪个DNS服务器来进行解析</strong>。 注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的，DNS服务器NS记录地址一般以以下的形式出现： ns1.domain.com、ns2.domain.com等。 简单的说，<strong>NS记录是指定由哪个DNS服务器解析你的域名</strong>。</li><li><strong>MX记录</strong>：MX（Mail Exchanger）记录是邮件交换记录，它<strong>指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器</strong>。例如，当Internet上的某用户要发一封信给 <a href="mailto:&#117;&#115;&#x65;&#114;&#x40;&#109;&#121;&#x64;&#x6f;&#x6d;&#97;&#x69;&#110;&#46;&#99;&#111;&#109;">&#117;&#115;&#x65;&#114;&#x40;&#109;&#121;&#x64;&#x6f;&#x6d;&#97;&#x69;&#110;&#46;&#99;&#111;&#109;</a> 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。</li><li><strong>CNAME记录</strong>：CNAME（Canonical Name ）别名记录，<strong>允许将多个名字映射到同一台计算机</strong>。通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为 “host.mydomain.com”（A记录），它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL， 这两个别名的全称就“<a href="http://www.mydomain.com”和“mail.mydomain.com”,实际上他们都指向/">www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向</a> “host.mydomain.com”。</li><li><strong>TXT记录</strong>：一般<strong>指某个主机名或域名的说明</strong>，如：admin IN TXT “管理员, 电话：XXXXXXXXXXX”，mail IN TXT “邮件主机，存放在xxx , 管理人：AAA”，Jim IN TXT “contact: <a href="mailto:&#x61;&#x62;&#99;&#x40;&#109;&#97;&#x69;&#x6c;&#x73;&#x65;&#114;&#x76;&#x65;&#x72;&#46;&#99;&#111;&#109;">&#x61;&#x62;&#99;&#x40;&#109;&#97;&#x69;&#x6c;&#x73;&#x65;&#114;&#x76;&#x65;&#x72;&#46;&#99;&#111;&#109;</a>“，也就是您可以设置 TXT 内容以便使别人联系到您。 TXT的应用之一，SPF（Sender Policy Framework）反垃圾邮件。SPF是跟DNS相关的一项技术，它的内容写在DNS的TXT类型的记录里面。MX记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF的作用跟MX相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。SPF的作用主要是反垃圾邮件，主要针对那些发信人伪造域名的垃圾邮件。例如：当邮件服务器收到自称发件人是<a href="mailto:&#x73;&#x70;&#x61;&#x6d;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x73;&#x70;&#x61;&#x6d;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a>的邮件，那么到底它是不是真的gmail.com的邮件服务器发过来的呢，我们可以查询gmail.com的SPF记录，以此防止别人伪造你来发邮件。</li><li><strong>TTL值</strong>：TTL（Time-To-Live）原理：TTL是IP协议包中的一个值，<strong>它告诉网络路由器包在网络中的时间是否太长而应被丢弃</strong>。有很多原因使包在一定时间内不能被传递到目的地。例如，不正确的路由表可能导致包的无限循环。一个解决方法就是在一段时间后丢弃这个包，然后给发送者一个报文，由发送者决定是否要重发。TTL的初值通常是系统缺省值，是包头中的8位的域。TTL的最初设想是确定一个时间范围，超过此时间就把包丢弃。由于每个路由器都至少要把TTL域减一，TTL通常表示包在被丢弃前最多能经过的路由器个数。<strong>当记数到0时，路由器决定丢弃该包，并发送一个ICMP报文给最初的发送者</strong>。 简单的说，<strong>TTL就是一条域名解析记录在DNS服务器中的存留时间</strong>。当各地的DNS服务器接受到解析请求时，就会向域名指定的NS服务器发出解析请求从而获得解析记录；在获得这个记录之后，记录会在DNS服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS服务器将不再向NS服务器发出请求，而是直接返回刚才获得的记录，而<strong>这个记录在DNS服务器上保留的时间，就是TTL值</strong>。 TTL值设置的应用：一是增大TTL值，以节约域名解析时间，给网站访问加速。 一般情况下，域名的各种记录是极少更改的，很可能几个月、几年内都不会有什么变化。我们完全可以增大域名记录的TTL值让记录在各地DNS服务器中缓存的时间加长，这样在更长的一段时间内，我们访问这个网站时，本地ISP的DNS服务器就不需要向域名的NS服务器发出解析请求，而直接从缓存中返回域名解析记录。 二是减小TTL值，减少更换空间时的不可访问时间。 更换空间99.9%会有DNS记录更改的问题，因为缓存的问题，新的域名记录在有的地方可能生效了，但在有的地方可能等上一两天甚至更久才生效。结果就是有的人可能访问到了新服务器，有的人访问到了旧服务器。仅仅是访问的话，这也不是什么大问题，但如果涉及到了邮件发送，这个就有点麻烦了，说不定哪封重要信件就被发送到了那已经停掉的旧服务器上。 为了尽可能的减小这个各地的解析时间差，合理的做法是： 第一步，先查看域名当前的TTL值，我们假定是1天。 第二步，修改TTL值为可设定的最小值，可能的话，建议为1分钟，就是60。 第三步，等待一天，保证各地的DNS服务器缓存都过期并更新了记录。 第四步，设置修改新记录，这个时候各地的DNS就能以最快的速度更新到新的记录。 第五步，确认各地的DNS已经更新完成后，把TTL值设置成您想要的值。 <strong>一般操作系统的默认TTL值如下： TTL&#x3D;32 Windows 9x&#x2F;Me ，TTL&#x3D;64 LINUX ，TTL&#x3D;128 Windows 200x&#x2F;XP， TTL&#x3D;255 Unix</strong></li><li><strong>PTR值</strong>：PTR是pointer的简写，<strong>用于将一个IP地址映射到对应的域名，也可以看成是A记录的反向，IP地址的反向解析</strong>。 <strong>PTR主要用于邮件服务器</strong>，比如邮箱<a href="mailto:&#x41;&#65;&#x41;&#x40;&#x58;&#x58;&#88;&#x2e;&#99;&#111;&#109;">&#x41;&#65;&#x41;&#x40;&#x58;&#x58;&#88;&#x2e;&#99;&#111;&#109;</a>给邮箱<a href="mailto:&#66;&#66;&#66;&#x40;&#121;&#x61;&#104;&#x6f;&#111;&#46;&#x63;&#x6f;&#109;">&#66;&#66;&#66;&#x40;&#121;&#x61;&#104;&#x6f;&#111;&#46;&#x63;&#x6f;&#109;</a>发了一封邮件，yahoo邮件服务器接到邮件时会查看这封邮件的头文件，并分析是由哪个IP地址发出来的，然后根据这个IP地址进行反向解析，如果解析结果对应XXX.com的IP地址就接受这封邮件，反之则拒绝接收这封邮件。</li><li><strong>泛域名与泛解析</strong>：泛域名是指在一个域名根下，以 XXX.Domain.com的形式表示这个域名根所有未建立的子域名。 泛解析是把*.Domain.com的A记录解析到某个IP 地址上，通过访问任意的前缀.domain.com都能访问到你解析的站点上。</li><li><strong>域名绑定</strong>：域名绑定是指将域名指向服务器IP的操作。</li><li><strong>域名转向</strong>：域名转向又称为域名指向或域名转发，当用户地址栏中输入您的域名时，将会<strong>自动跳转到所指定的另一个域名</strong>。一般是使用短的好记的域名转向复杂难记的域名。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1panel搭建LNMP环境</title>
      <link href="/posts/7c9c83db.html"/>
      <url>/posts/7c9c83db.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、Nginx</p><p>应用商店 -&gt; OpenResty</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217150037548-194159260.png" alt="image-20231217150031653"></p><p>设置端口 </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217150117446-829656776.png" alt="image-20231217150101064"></p><p>二、Mysql</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217152037410-1390420483.png" alt="image-20231217152031576"></p><p>三、PHP</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217152550142-2057081307.png" alt="image-20231217152534471"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 1panel </tag>
            
            <tag> Docker </tag>
            
            <tag> 面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本使用</title>
      <link href="/posts/c3c198d3.html"/>
      <url>/posts/c3c198d3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://hexo.io/">Hexo官网</a>：<a href="https://hexo.io/">https://hexo.io/</a></p><p><a href="https://github.com/hexojs/hexo">Hexo Github</a>: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><p><a href="https://github.com/hexojs/awesome-hexo">Hexo Awesome</a>: <a href="https://github.com/hexojs/awesome-hexo">https://github.com/hexojs/awesome-hexo</a></p></blockquote><h1 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h1><p>需要node 环境，不再赘述node安装过程</p><p>推荐使用cnpm进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装好后需要配置下环境变量，将 <code>node_global</code>目录添加到path环境变量</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225213742204-1057452407.png" alt="image-20231225213741436"></p><p>使用 <code>cnpm -v</code> 查看cnpm版本并验证是否安装配置成功</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225213920084-104338669.png" alt="image-20231225213909473"></p><p>以下<code>npm</code> 命令可替换为 <code>cnpm</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装hexo脚手架</span></span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 会自动创建一个blog目录</span></span><br><span class="line">$ hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到blog目录</span></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行服务 可简写为 hexo s</span></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>hexo 默认端口为4000，如果一切顺利的话，此时访问 <code>localhost:4000</code>  或者 <code>127.0.0.1：4000</code> 即可访问</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225115046967-68254348.png" alt="image-20231225115046638"></p><p>初始化的项目会有篇Hello World的文章，文章源文件可以到 <code>blog\source\_posts</code> 目录内查看</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225115142580-1360256508.png" alt="image-20231225115142706"></p><h1 id="2、常用命令"><a href="#2、常用命令" class="headerlink" title="2、常用命令"></a>2、常用命令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.io/zh/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/zh-cn/docs/index.html#%E5%AE%89%E8%A3%85-Node-js">Node.js</a> 安装。</li></ol><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;post title with whitespace&quot;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me <span class="string">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p>列出网站数据。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo config [key] [value]</span><br></pre></td></tr></table></figure><p>列出网站的配置（<code>_config.yml</code>）。如果指定了 <code>key</code>，则只展示配置中对应 <code>key</code> 的值；如果同时指定了 <code>key</code> 和 <code>value</code>，则将配置中对应的 <code>key</code> 的值修改为 <code>value</code>。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会加载插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new?assignees=&labels=&projects=&template=bug_report.yml">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><h1 id="3、提交到GitHub"><a href="#3、提交到GitHub" class="headerlink" title="3、提交到GitHub"></a>3、提交到GitHub</h1><h2 id="3-1-创建仓库"><a href="#3-1-创建仓库" class="headerlink" title="3.1 创建仓库"></a>3.1 创建仓库</h2><p>在Github上新创建一个仓库，仓库名只能为 <code>xxx.github.io</code> </p><p>将xxx替换为github登录名，因为一会要用到Github pages服务</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225205740698-1815213379.png" alt="image-20231225205729674"></p><p>复制仓库地址</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225210039753-993103998.png" alt="image-20231225210022224"></p><p>在<code>_config.yml</code>文件中添加仓库信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xiangyangdev/xiangyangdev.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>注意 <code>branch</code> 默认主分支 是 <code>master</code> 或者<code>main</code></p><h2 id="3-2-生成SSH并关联Github"><a href="#3-2-生成SSH并关联Github" class="headerlink" title="3.2 生成SSH并关联Github"></a>3.2 生成SSH并关联Github</h2><p>首先需要配置一下Git的<code>user.name</code>和<code>user.email</code>信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name <span class="string">&quot;your github account&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure><p>这里的<code>user.name</code>输入你的GitHub用户名，<code>user.email</code>输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户,配置之后可以使用以下命令查看配置的用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure><p>然后执行下面的命令创建SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure><p>输入命令之后会提示输入密码，不用管直接一路回车，直到出现如下界面</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231226182413019-1240749710.png" alt="image-20231226182409394"></p><p>然后可以在你的计算机用户（如WIndows为C:&#x2F;Users&#x2F;xxx&#x2F;）下面看到自动生成了一个<code>.ssh</code>文件夹，可以看到<code>.ssh</code>文件下面有两个个文件<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231226181507498-1161703667.png" alt="image-20231226181503575"></p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你连接自己的GitHub账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>到Github &#x3D;&gt; 点击头像  &#x3D;&gt; settings &#x3D;&gt; SSH and GPG keys &#x3D;&gt; new SSH key </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231226181935673-1059961883.png" alt="image-20231226181931717"></p><p>Title可随意填写，把<code>id_rsa.pub</code>里面的内容复制到Key里面，然后点击Add SSH Key就可以了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231226182311037-80273969.png" alt="image-20231226182307255"></p><p>输入下面的命令可以查看配置是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231226182544420-1625616542.png" alt="image-20231226182540971"></p><h2 id="3-3-一键部署"><a href="#3-3-一键部署" class="headerlink" title="3.3 一键部署"></a>3.3 一键部署</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 用于一键部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装好后生成下静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate  <span class="comment"># 或者  hexo g</span></span><br></pre></td></tr></table></figure><p>一键部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># 或者 hexo d</span></span><br></pre></td></tr></table></figure><p>若出现 <code>ERROR Deployer not found: git</code> 错误则表明<code>hexo-deployer-git</code>插件未安装成功，重新安装一下即可</p><p>当看到命令窗口打印<code>INFO Deploy done:git</code>就说明部署成功了，可以到github查看提交的代码</p><p>部署完成后稍等片刻你便可以访问 <code>https://your_github_name.github.io/</code> 来预览你的博客了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225232314286-2010412922.png" alt="image-20231225232306863"></p><h2 id="3-2-跳过渲染-README-md-文件"><a href="#3-2-跳过渲染-README-md-文件" class="headerlink" title="3.2  跳过渲染 README.md 文件"></a>3.2  跳过渲染 <code>README.md</code> 文件</h2><p>通常情况下每个项目下都应该有一个 <code>README.md</code> 的项目介绍文件，但由于hexo仅保留 <code>public</code> 目录下的源码文件，如果我们想要保留 <code>README.md</code>文件，则需要在  <code>source</code>根目录创建该文件</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225230719806-1978140613.png" alt="image-20231225230710445"></p><p>然后修改<code>_config.yml</code>  下的<code>skip_render</code> 内容，跳过指定文件的渲染 ，添加需要忽略的文件或目录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225141537165-249278904.png" alt="image-20231225141533818"></p><p>修改完成之后需要重新清理缓存生成动态文件，你可以使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d  </span><br></pre></td></tr></table></figure><p>然后在github上就能看到 <code>README.md</code> 文件了</p><p><img src="C:/Users/shiguang/AppData/Roaming/Typora/typora-user-images/image-20231225231134336.png" alt="image-20231225231134336"></p><h2 id="3-3-绑定自定义域名"><a href="#3-3-绑定自定义域名" class="headerlink" title="3.3 绑定自定义域名"></a>3.3 绑定自定义域名</h2><p>首先添加一条<code>CNAME</code> 记录，目标地址为github博客域名，即 <code>your_github_name.github.io</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225234700648-677353062.png" alt="image-20231225234659826"></p><p>然后在 <code>source</code> 目录下创建一个 <code>CNAME</code> 文件，注意不带后缀名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225235050421-806561382.png" alt="image-20231225235049874"></p><p>目录结构如下</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225235216354-599056251.png" alt="image-20231225235215778"></p><p>把<code>CNAME</code> 文件添加到 <code>skip_render</code> ，跳过该文件的渲染</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225235151153-491373599.png" alt="image-20231225235150476"></p><p>在github &#x3D;&gt; settings &#x3D;&gt; pages &#x3D;&gt; Custom domain 关联我们的域名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225235504639-1495228792.png" alt="image-20231225235503903"></p><p>保存成功后就可以用我们关联的域名进行访问了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225235542134-1968030994.png" alt="image-20231225235541336"></p><h1 id="4、博客美化"><a href="#4、博客美化" class="headerlink" title="4、博客美化"></a>4、博客美化</h1><h2 id="4-1-更换主题"><a href="#4-1-更换主题" class="headerlink" title="4.1 更换主题"></a>4.1 更换主题</h2><p><a href="https://hexo.io/">Hexo</a>官网上面有非常多好看的<a href="https://hexo.io/themes/">主题</a>，你可以选择自己喜欢的主题下载下来放到 <code>themes</code>文件夹下面</p><p>比较好看的主题有 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>、<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>、Indigo、Matery等，这里以更换为Matery主题为例。</p><p>首先点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">官方下载地址</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以使用 <code>git clone</code> 命令来下载，例如下载<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>然后修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: butterfly</code></p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="2-1-Cannot-find-module-esprima"><a href="#2-1-Cannot-find-module-esprima" class="headerlink" title="2.1 Cannot find module &#39;esprima&#39;"></a>2.1 <code>Cannot find module &#39;esprima&#39;</code></h2><p>手动安装一下即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install esprima</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225115701705-1390333367.png" alt="image-20231225115701589"></p><h2 id="2-2-Asset-render-failed-css-style-css"><a href="#2-2-Asset-render-failed-css-style-css" class="headerlink" title="2.2 Asset render failed: css/style.css "></a>2.2 <code>Asset render failed: css/style.css </code></h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225123040039-1827368069.png" alt="image-20231225123040176"></p><p>由于无法加载css，访问服务如下所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231225123021996-582142807.png" alt="image-20231225123021745"></p><p>升级一下 hexo版本即可</p><p>查看hexo 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>升级命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-cli -g</span><br><span class="line">$ npm update</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://bore.vip/archives/d6da8e6c/">hexo 版本升级</a></p><p><a href="https://blog.csdn.net/csdnxia/article/details/120820081">使用Hexo免费搭建个人博客教程</a></p><p><a href="https://codemilk.cn/archives/30/">hexo域名解析的两种方法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用PandoraNext注册ChatGPT账号</title>
      <link href="/posts/6d0d44f1.html"/>
      <url>/posts/6d0d44f1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>点击 <code>Sign up</code> 进行注册</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224203436500-546399294.png" alt="image-20231224203431374"></p><p>填写账号密码信息，此处我使用自己配置好的泛域名邮箱</p><p>点击<code>Continue</code>继续下一步</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224203700957-993385292.png" alt="image-20231224203644600"></p><p>提示需验证邮箱</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224203928967-560840357.png" alt="image-20231224203914545"></p><p>此处我使用的QQ邮箱接收，点击链接验证邮箱</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224204233767-1305064992.png" alt="image-20231224204214249"></p><p>QQ邮箱提醒即将访问的链接信息，复制该链接</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224204149656-1608147933.png" alt="image-20231224204128333"></p><p>回到PandoraNext，点击 <code>Paste and Verify email address</code> 将刚才复制的完整链接地址粘贴过来</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224204359626-219178137.png" alt="image-20231224204342253"></p><p>验证邮箱后，填写昵称</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224204441228-1079024489.png" alt="image-20231224204436522"></p><p>然后可能需要人机验证</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224205220747-509363118.png" alt="image-20231224205156770"></p><p>按照提示进行验证</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224205314474-69879345.png" alt="image-20231224205257711"></p><p>需要验证三张图片，验证完成后如图所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224205441111-846619524.png" alt="image-20231224205421344"></p><p>即使验证成功，可能依旧出现 <code>failed to create account,try login</code>，可以多尝试几次</p><p>或者直接登录验证账号是否创建成功</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224205527216-2078390244.png" alt="image-20231224205519923"></p><p>最终注册成功会有如下提示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224205404703-704948906.png" alt="image-20231224205346427"></p><p>最后用刚注册的账号登录验证一下是否注册成功，完美</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231224204952851-2024508023.png" alt="image-20231224204935488"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> PandoraNext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键部署谷歌Gemini聊天机器人</title>
      <link href="/posts/ba9caf43.html"/>
      <url>/posts/ba9caf43.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p>谷歌正式开放了 <code>API</code>，只要你有一个Google账号和海外 IP ，就可免费申请使用 <code>Gemini Pro&amp;Gemini Pro Vision</code>，相关功能可媲美GPT4！</p><h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><h2 id="1、申请API-Key"><a href="#1、申请API-Key" class="headerlink" title="1、申请API Key"></a>1、申请API Key</h2><p> <a href="https://makersuite.google.com/app/apikey">链接直达</a>：<a href="https://makersuite.google.com/app/apikey">https://makersuite.google.com/app/apikey</a></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219223641453-633930855.png" alt="image-20231219223633528"></p><h2 id="2、搭建UI服务"><a href="#2、搭建UI服务" class="headerlink" title="2、搭建UI服务"></a>2、搭建UI服务</h2><p><a href="https://github.com/babaohuang/GeminiProChat">Github地址</a>：<a href="https://github.com/babaohuang/GeminiProChat">https://github.com/babaohuang/GeminiProChat</a></p><p>Live demo: <a href="https://www.geminiprochat.com/">Gemini Pro Chat</a></p><h3 id="2-1-Vercel-一键部署"><a href="#2-1-Vercel-一键部署" class="headerlink" title="2.1 Vercel 一键部署"></a>2.1 Vercel 一键部署</h3><p><a href="https://vercel.com/new/clone?repository-url=https://github.com/babaohuang/GeminiProChat">点击链接</a>进行一键部署，登录后点击创建仓库，或者将项目fork到自己仓库导入也可以</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219224715852-1110933893.png" alt="image-20231219224711074"></p><p>填写一下环境变量 <code>GEMINI_API_KEY</code> ，值是刚才创建的APi Key</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219225152556-662355716.png" alt="image-20231219225144914"></p><p>填写好环境变量后，点击Deploy进行部署，稍等片刻后撒花即部署成功</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219225249461-570391343.png" alt="image-20231219225248773"></p><p>点击 <code>Continue to Dashboard</code> 进入面板</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219225418286-273295325.png" alt="image-20231219225406768"></p><p>Vercel平台为我们提供了一个免费的域名点击 <code>Domains</code>下的链接可以直接进行体验</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219225648652-1144692072.png" alt="image-20231219225636964"></p><p>或者点击 <code>Deployment</code>，可以看到Domains下一共有三个域名可以使用</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219225914484-1354896942.png" alt="image-20231219225909784"></p><p>效果如下</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219225822571-1334138606.png" alt="image-20231219225810991"></p><p>如何你想绑定自己的域名，可以到 Settings &#x3D;&gt;  domains 添加自己的域名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219230212970-381761579.png" alt="image-20231219230209999"></p><p>需要在添加一条A记录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219230544043-1741018652.png" alt="image-20231219230540434"></p><p>绑定自己的域名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219230513542-547715280.png" alt="image-20231219230512898"></p><p>稍等片刻后即可使用</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231219230621045-358549246.png" alt="image-20231219230620542"></p><h3 id="2-2-Docker-一键部署"><a href="#2-2-Docker-一键部署" class="headerlink" title="2.2 Docker 一键部署"></a>2.2 Docker 一键部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name geminiprochat \</span><br><span class="line">--restart always \</span><br><span class="line">-p 3030:3000 \</span><br><span class="line">-itd \</span><br><span class="line">-e GEMINI_API_KEY=xxx \</span><br><span class="line">howie6879/geminiprochat:v0.1.0</span><br></pre></td></tr></table></figure><p>修改环境变量 <code>GEMINI_API_KEY</code> 为你申请的API Key</p><p>确保 3030端口可用，或者可以映射其他端口</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> AI </tag>
            
            <tag> Gemini </tag>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署在线音乐服务Melody</title>
      <link href="/posts/492041c3.html"/>
      <url>/posts/492041c3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p><strong>主要功能</strong></p><ul><li>支持在各大音乐和视频网站检索歌曲。目前支持 咪咕、网易云、QQ 音乐、酷狗、bilibili、抖音等站点。详情可以在 <a href="https://github.com/foamzou/media-get#%E6%94%AF%E6%8C%81%E7%9A%84%E7%BD%91%E7%AB%99">media-get</a> 项目中查看</li><li>支持一键下载到本地，一键上传到云盘</li><li>用链接搜索歌曲（例如使用 b站或抖音的视频链接进行搜索，可以将对应的音频自动上传到音乐云盘）</li><li>一键“解锁”无法播放的歌曲（一键检测变灰的歌曲，自动从公共资源搜索最佳资源，自动上传到云盘，自动匹配歌曲信息。代替繁琐的人工操作，实现可播放）（实验性功能，目前仅支持网易云）</li><li>PC 端、移动端适配良好（支持 PWA）</li><li>部署简单，支持 docker</li></ul><p><strong>Github地址</strong>：<a href="https://github.com/foamzou/melody">https://github.com/foamzou/melody</a></p><h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><h2 id="2-1-创建目录"><a href="#2-1-创建目录" class="headerlink" title="2.1 创建目录"></a>2.1 创建目录</h2><p>在你的宿主机创建一个目录，例如： <code>/root/docker_data/melody-profile</code></p><h2 id="2-2-创建镜像"><a href="#2-2-创建镜像" class="headerlink" title="2.2 创建镜像"></a>2.2 创建镜像</h2><p>这里我将默认5566端口映射到了自定义的6605端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6606:5566  -v /root/docker_data/melody-profile:/app/backend/.profile foamzou/melody:latest</span><br></pre></td></tr></table></figure><p>docker部署成功后，访问ip及 端口即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231217104120241-126299091.png" alt="image-20231217104119031"></p><p>部署到国外的VPS无法使用，必须用国内IP</p><h2 id="2-3-后续更新"><a href="#2-3-后续更新" class="headerlink" title="2.3 后续更新"></a>2.3 后续更新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.io/foamzou/melody:latest</span><br><span class="line">docker <span class="built_in">kill</span> &lt;CONTAINER ID&gt;</span><br><span class="line">docker run -d -p 5566:5566  -v ~/melody-profile:/app/backend/.profile foamzou/melody:latest</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Melody </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Docker可视化面板Portainer</title>
      <link href="/posts/e32b1d0d.html"/>
      <url>/posts/e32b1d0d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p>Portainer是一个非常好用的Docker可视化面板，可以让你轻松地管理你的Docker容器。</p><p>官网：<a href="https://www.portainer.io/">https://www.portainer.io/</a></p><h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><h2 id="1、绑定域名"><a href="#1、绑定域名" class="headerlink" title="1、绑定域名"></a>1、绑定域名</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216151524363-1569838382.png" alt="image-20231216151520990"></p><h2 id="2、添加反向代理"><a href="#2、添加反向代理" class="headerlink" title="2、添加反向代理"></a>2、添加反向代理</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216151611656-1332349703.png" alt="image-20231216151557140"></p><h2 id="3、运行一键安装脚本"><a href="#3、运行一键安装脚本" class="headerlink" title="3、运行一键安装脚本"></a>3、运行一键安装脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 6609:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /root/docker_data/portainer/data:/data portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure><p>中文版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=portainer-zh \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">--restart=always \</span><br><span class="line">6053537/portainer-ce</span><br></pre></td></tr></table></figure><p>部署成功后输入IP+端口 或者域名即可访问</p><p>首次登录需创建账户</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216152337536-847839134.png" alt="image-20231216152324393"></p><p>点击 <code>home</code>可预览当前Docker相关信息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216152538389-1012202429.png" alt="image-20231216152534242"></p><p>点击可进入仪表盘</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216152618585-745902910.png" alt="image-20231216152604916"></p><p>可继续点击查看容器，镜像等详细信息</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216152756100-1755803965.png" alt="image-20231216152741642"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker Portainer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建哪吒面板</title>
      <link href="/posts/7ae4d978.html"/>
      <url>/posts/7ae4d978.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p>哪吒官网：<a href="https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkJUOWcxWmFvZUxpNzBWLWV6bnNiS05FMTA4Z3xBQ3Jtc0trOXBnMU1kWTNnZWQtcVNuMTF5WXB0RF9SWS1nYUFXRnFXRmxaWE12TFdpSi1XZUtpcVZOSlpYMkotV3dZYTFMa01LWlhWLWdvX2NHZEhIQzVROWxoSXZxdmJzeEZHUmQ4Qlg4Vzh2d2JvbEFmWjNiVQ&q=https://nezha.wiki/guide/dashboard.html&v=N5qcor66byI">https://nezha.wiki/guide/dashboard.html</a></p><h1 id="二、部署服务"><a href="#二、部署服务" class="headerlink" title="二、部署服务"></a>二、部署服务</h1><h2 id="1、绑定域名"><a href="#1、绑定域名" class="headerlink" title="1、绑定域名"></a>1、绑定域名</h2><p>需绑定两个子域名，一个用于绑定服务，一个用于回调监控</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216143159839-370647279.png" alt="image-20231216143146095"></p><h2 id="2、设置反向代理"><a href="#2、设置反向代理" class="headerlink" title="2、设置反向代理"></a>2、设置反向代理</h2><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216141820281-1686465890.png" alt="image-20231216141805832"></p><h2 id="3、GitHub上创建OAuth-Apps"><a href="#3、GitHub上创建OAuth-Apps" class="headerlink" title="3、GitHub上创建OAuth Apps"></a>3、GitHub上创建OAuth Apps</h2><p>获取链接：<a href="https://github.com/settings/developers">https://github.com/settings/developers</a></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216140631768-437256427.png" alt="image-20231216140618156"></p><p>填写名称、域名及回调地址，回调地址格式； <code> 域名/oauth2/callback</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216140844960-141266564.png" alt="image-20231216140831412"></p><p>创建成功后可以获得ClientId,再生成一个密钥</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216141134572-1931302926.png" alt="image-20231216141120604"></p><h2 id="4、执行一键安装脚本"><a href="#4、执行一键安装脚本" class="headerlink" title="4、执行一键安装脚本"></a>4、执行一键安装脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; <span class="built_in">chmod</span> +x nezha.sh</span><br><span class="line">sudo ./nezha.sh </span><br></pre></td></tr></table></figure><p>选择安装方式，选择1</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216140125965-2109869836.png" alt="image-20231216140122945"></p><p>继续输入1，选择安装面板端</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216141300926-561761202.png" alt="image-20231216141257445"></p><p>选择授权提供商，输入<code>github</code>,输入刚才生成的<code>ClientId</code>和 <code>ClientSecret</code>,然后输入github用户名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216141523093-1524323570.png" alt="image-20231216141508884"></p><p>站点名称可随意，选择自己需要开放的端口，注意开放防火墙</p><p>docker部署成功后即可通过ip或者域名进行访问面板</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216150434578-229094664.png" alt="image-20231216150421092"></p><h2 id="5、绑定账户与服务"><a href="#5、绑定账户与服务" class="headerlink" title="5、绑定账户与服务"></a>5、绑定账户与服务</h2><p>点击登录，获取github授权</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216142159287-508835952.png" alt="image-20231216142145902"></p><p>登录之后，可以先改一下主题，并填写<strong>未接入CDN的面板服务器域名&#x2F;IP</strong>，用第二个callback子域名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216143040137-1266256790.png" alt="image-20231216143036638"></p><p>设置好后新增服务器</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216143334680-2136415446.png" alt="image-20231216143319113"></p><p>填写服务器名称及分组</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216143525720-339187418.png" alt="image-20231216143512726"></p><p>添加后，复制一键安装脚本</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216143607779-1412986541.png" alt="image-20231216143554375"></p><p>执行一键安装脚本</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216143937520-1255708221.png" alt="image-20231216143922581"></p><p>重新访问域名即可查看VPS运行状态</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216142214694-1200337450.png" alt="image-20231216142200930"></p><p>服务 &#x3D;&gt; 新增服务</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216145646907-1665160473.png" alt="image-20231216145640497"></p><p>可以监控各站点服务状态</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231216145749368-1383696373.png" alt="image-20231216145735552"></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署ChatBotUI</title>
      <link href="/posts/94322157.html"/>
      <url>/posts/94322157.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h1><p><a href="https://github.com/mckaywrigley/chatbot-ui">Github地址</a>:<a href="https://github.com/mckaywrigley/chatbot-ui">https://github.com/mckaywrigley/chatbot-ui</a></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231213203846434-7036829.png" alt="image-20231213203840126"></p><h1 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h1><h3 id="2-1-Vercel一键部署"><a href="#2-1-Vercel一键部署" class="headerlink" title="2.1 Vercel一键部署"></a>2.1 <a href="https://vercel.com/new/clone?repository-url=https://github.com/mckaywrigley/chatbot-ui">Vercel一键部署</a></h3><h3 id="2-2-本地构建"><a href="#2-2-本地构建" class="headerlink" title="2.2 本地构建"></a>2.2 本地构建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t chatgpt-ui .</span><br><span class="line">docker run -e OPENAI_API_KEY=xxxxxxxx -p 3000:3000 chatgpt-ui</span><br></pre></td></tr></table></figure><h3 id="2-3-从-ghcr-拉取"><a href="#2-3-从-ghcr-拉取" class="headerlink" title="2.3 从 ghcr 拉取"></a>2.3 从 ghcr 拉取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e OPENAI_API_KEY=xxxxxxxx -p 3000:3000 ghcr.io/mckaywrigley/chatbot-ui:main</span><br></pre></td></tr></table></figure><p>修改 <code>OPENAI_API_KEY</code>，替换为你的 OpenAI key</p><p>可在登录OpenAi后访问<a href="https://platform.openai.com/api-keys">https://platform.openai.com/api-keys</a>  进行创建</p><p>安全组放行 3000端口</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ChatGPT </tag>
            
            <tag> ChatBotUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔面板调整80和443端口</title>
      <link href="/posts/ecd581c4.html"/>
      <url>/posts/ecd581c4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>宝塔新建的站点默认端口为80端口，SSL证书需要占用443端口，而这两个端口很容易被占用</p><h1 id="调整80端口"><a href="#调整80端口" class="headerlink" title="调整80端口"></a>调整80端口</h1><p>nginx管理 &#x3D;&gt; 配置修改 ，调整80端口，也可直接修改 <code>/www/server/nginx/conf/nginx.conf</code> 文件</p><p>如果新增的站点无法访问，可能也是由于nginx未自动添加server配置导致的，也可在此添加server配置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212145650038-1212308578.png" alt="image-20231212145650099"></p><p>还需修改 <code>/www/server/panel/vhost/nginx/0.default.conf</code> 文件</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212150339836-367305500.png" alt="image-20231212150340041"></p><h1 id="调整443端口"><a href="#调整443端口" class="headerlink" title="调整443端口"></a>调整443端口</h1><p>仍需修改 <code>/www/server/panel/vhost/nginx</code> 目录下各站点的配置文件，每个站点都有一个与之对应配置文件</p><p>例如我将443端口修改为442端口</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231212150546384-436066569.png" alt="image-20231212150546825"></p><p>查看端口是否被占用 <code>lsof -i :port</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211213321639-124871882.png" alt="image-20231211213320802"></p><p>或者 <code>netstat -anp |grep port</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211225358748-1749741549.png" alt="image-20231211225357973"></p><p>结束进程 <code>kill -9 pid</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231211213647745-122213543.png" alt="image-20231211213647203"></p>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔面板申请ssl时域名解析错误或验证URL无法被访问!</title>
      <link href="/posts/2fdddb3e.html"/>
      <url>/posts/2fdddb3e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>使用宝塔面板建立站点，申请<code>let‘s Encrypt</code> 免费ssl证书时提示<code>验证失败,域名解析错误或验证URL无法被访!</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231209215008089-1419835390.png" alt="image-20231209214956594"></p><p>网上找了各种方案 检查防火墙配置，安全组配置，域名解析，nginx代理等等乱七八糟的配置</p><p>检查来检查去发现都没问题，后来我注意到，这个错误提示是去访问本站点内的一个文件返回 404</p><p>但是我经过检查发现目录及文件都正常</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231209215515260-1299491478.png" alt="image-20231209215458605"></p><p>文件里也有内容</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231209215803513-936652537.png" alt="image-20231209215746687"></p><p>后来我发现是nginx代理出了问题，不会自动添加代理配置</p><p>另外，还要检查下Nginx运行是否正常，80，443端口是否被占用</p><h1 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h1><p>修改  <code>/www/server/nginx/conf/nginx.conf</code> 文件，</p><p>将<code>listen</code> 替换为服务实际端口， 将 <code>server_name</code> 替换为你的域名 ，将 <code>root</code> 替换为你站点的根目录路径即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name xxxxx;</span><br><span class="line"></span><br><span class="line">     location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">         default_type &quot;text/plain&quot;;</span><br><span class="line">         root /www/wwwroot/xxxx;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         return 301 https://$host$request_uri;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如图所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231209221125150-1114143846.png" alt="image-20231209221120660"></p><p>修改之后重载nginx服务，然后重新用默认80端口访问下资源目录验证下，成功响应</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231209221311537-166066982.png" alt="image-20231209221256719"></p><p>重新申请下证书，问题成功解决，完美撒花</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231209221431089-965642219.png" alt="image-20231209221413428"></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔面板 </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA分批处理数据简单示例</title>
      <link href="/posts/923a0cc7.html"/>
      <url>/posts/923a0cc7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h1><p>在处理业务时，经常遇到需要分批次处理数据的场景，例如有105条数据，每次推送20条，分批次推送</p><p>最后不足20条数据时，一次性推送全部剩余数据</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120132006711-857445870.png" alt="image-20231120132006402"></p><h1 id="DEMO示例"><a href="#DEMO示例" class="headerlink" title="DEMO示例"></a>DEMO示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shiguang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchProcessingExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟接口返回的数据，这里用数字代表每一条数据</span></span><br><span class="line">        List&lt;Integer&gt; responseData = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">105</span>; i++) &#123;</span><br><span class="line">            responseData.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 每批次处理的数据量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算需要多少批次来处理所有数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalDataSize</span> <span class="operator">=</span> responseData.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalBatches</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) totalDataSize / batchSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分批次处理数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">batchNumber</span> <span class="operator">=</span> <span class="number">0</span>; batchNumber &lt; totalBatches; batchNumber++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> batchNumber * batchSize;</span><br><span class="line">            <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> Math.min(startIndex + batchSize, totalDataSize);</span><br><span class="line"></span><br><span class="line">            List&lt;Integer&gt; batchData = responseData.subList(startIndex, endIndex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在这里对批次数据进行处理，示例中只是打印数据</span></span><br><span class="line">            processBatchData(batchData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理批次数据的方法，这里只是打印数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">processBatchData</span><span class="params">(List&lt;Integer&gt; batchData)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer data : batchData) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Processing data: &quot;</span> + data);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Batch processing complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>遍历List移除元素时踩坑点</title>
      <link href="/posts/e2e82b89.html"/>
      <url>/posts/e2e82b89.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h1><p>在遍历List并在循环体中移除元素时需要注意以下几点</p><ol><li><p>移除元素后数据总量会越来越小，可能造成数组下标越界</p></li><li><p>移除元素后，每个元素原有位置也会发生改变，需确认移除的元素是否是真正需要移除的</p></li><li><p>由于删除元素后，每个元素位置前移，会有部分数据直接跳过循环</p><p>例如 数组中有以下数据</p><table><thead><tr><th>i</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>val</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr></tbody></table><p>当 i &#x3D; 1 时 移除元素2，3会前移，下标1的值变为3，下标2的值变为4，后面的元素依次前移</p><p>当 i &#x3D; 1 的循环体结束后，i 自增，进入 i &#x3D; 2 的循环体，此时 i &#x3D; 2 对应的值为4 ，3被跳过，不经过循环体</p></li></ol><h1 id="2、问题复现"><a href="#2、问题复现" class="headerlink" title="2、问题复现"></a>2、问题复现</h1><p>假设我有一个数组，需要移除下标为 0，1，2，3 的元素</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120125314494-287185037.png" alt="image-20231120125313864"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove1</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           numbers.add(i);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;old_numbers:&quot;</span>+numbers);</span><br><span class="line"></span><br><span class="line">       List&lt;Integer&gt; itemsToRemove = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       itemsToRemove.add(<span class="number">0</span>);</span><br><span class="line">       itemsToRemove.add(<span class="number">1</span>);</span><br><span class="line">       itemsToRemove.add(<span class="number">2</span>);</span><br><span class="line">       itemsToRemove.add(<span class="number">3</span>);</span><br><span class="line">       System.out.println(itemsToRemove);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//移除元素时数据总长度减小,元素原本位置改变</span></span><br><span class="line">       <span class="comment">// 不仅会造成数组下标越界，移除的元素也并非想要移除的元素</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span>  integer : itemsToRemove) &#123;</span><br><span class="line">           numbers.remove(integer);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;new_numbers:&quot;</span>+numbers);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>假设我只需要移除下标为 0，1 的元素，下标0 对应的值应为0，下标1 对应的值应为1</p><p>移除后的元素应该是 [2，3，4] 但结果却是 [1，3，4]</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120125731060-518159466.png" alt="image-20231120125730760"></p><h1 id="3、解决方案"><a href="#3、解决方案" class="headerlink" title="3、解决方案"></a>3、解决方案</h1><p>可以使用 <code>ListIterator</code> 来安全地在迭代过程中删除元素，而不影响后续元素的位置</p><p><code>ListIterator</code> 是 Java 中 <code>List</code> 接口提供的一个迭代器，相比普通的迭代器，它具有双向遍历的能力，允许在迭代过程中插入、删除元素，以及获取当前位置的索引。这使得在使用 <code>List</code> 类型的集合时，特别是在需要在迭代过程中修改集合的情况下，<code>ListIterator</code> 是一个更加强大的工具。</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120130456248-1856484750.png" alt="image-20231120130455982"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove2</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;old_numbers:&quot;</span>+numbers);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; itemsToRemove = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        itemsToRemove.add(<span class="number">0</span>);</span><br><span class="line">        itemsToRemove.add(<span class="number">1</span>);</span><br><span class="line">        itemsToRemove.add(<span class="number">2</span>);</span><br><span class="line">        itemsToRemove.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(itemsToRemove);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 ListIterator 正序遍历并删除需要删除的元素</span></span><br><span class="line">        ListIterator&lt;Integer&gt; iterator = numbers.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexToRemove</span> <span class="operator">=</span> iterator.nextIndex();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">nextVal</span> <span class="operator">=</span> iterator.next();<span class="comment">// 移动到下一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            System.out.println(&quot;index:&quot;+indexToRemove+&quot;,value:&quot;+nextVal);</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (itemsToRemove.contains(nextVal))&#123;</span><br><span class="line">                iterator.remove(); <span class="comment">// 安全地移除当前元素</span></span><br><span class="line">                System.out.println(<span class="string">&quot;移除元素 index:&quot;</span>+indexToRemove+<span class="string">&quot;,value:&quot;</span>+nextVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;new_numbers:&quot;</span>+numbers);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果需要根据下标移除元素可以逆序遍历，此时<code>itemsToRemove.contains(indexToRemove)</code>使用的是下标</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120134702755-245472491.png" alt="image-20231120134702313"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove3</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;old_numbers:&quot;</span>+numbers);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; itemsToRemove = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        itemsToRemove.add(<span class="number">0</span>);</span><br><span class="line">        itemsToRemove.add(<span class="number">1</span>);</span><br><span class="line">        itemsToRemove.add(<span class="number">2</span>);</span><br><span class="line">        itemsToRemove.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(itemsToRemove);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 ListIterator 逆序遍历并删除需要删除的元素</span></span><br><span class="line">        ListIterator&lt;Integer&gt; iterator = numbers.listIterator(numbers.size());</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasPrevious()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexToRemove</span> <span class="operator">=</span> iterator.previousIndex();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">previousVal</span> <span class="operator">=</span> iterator.previous();<span class="comment">// 移动到上一个位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (itemsToRemove.contains(indexToRemove))&#123;</span><br><span class="line">                iterator.remove(); <span class="comment">// 安全地移除当前元素</span></span><br><span class="line">                System.out.println(<span class="string">&quot;移除元素 index:&quot;</span>+indexToRemove+<span class="string">&quot;,value:&quot;</span>+previousVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;new_numbers:&quot;</span>+numbers);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据下标移除元素时正序遍历可能会出问题</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120140148055-1669205910.png" alt="image-20231120140147752"></p><h2 id="ListIterator常见方法"><a href="#ListIterator常见方法" class="headerlink" title="ListIterator常见方法"></a>ListIterator常见方法</h2><ul><li><code>hasNext()</code>：判断是否还有下一个元素。</li><li><code>hasPrevious()</code>：判断是否还有上一个元素。</li><li><code>next()</code>：返回下一个元素。</li><li><code>previous()</code>：返回上一个元素。</li><li><code>nextIndex()</code>：返回下一个元素的索引。</li><li><code>previousIndex()</code>：返回上一个元素的索引。</li><li><code>add(E element)</code>：在当前位置插入指定的元素。</li><li><code>set(E element)</code>：用指定的元素替换上一次调用 <code>next()</code> 或 <code>previous()</code> 返回的元素。</li><li><code>remove()</code>：移除上一次调用 <code>next()</code> 或 <code>previous()</code> 返回的元素。</li></ul><h2 id="ListIterator-两种初始化方式"><a href="#ListIterator-两种初始化方式" class="headerlink" title="ListIterator 两种初始化方式"></a>ListIterator 两种初始化方式</h2><p><code>ListIterator</code> 有两个不同的初始化方式，分别是：</p><ol><li><code>ListIterator&lt;Integer&gt; iterator = numbers.listIterator()</code>：通过这种方式初始化的 <code>ListIterator</code> 位于列表的开始位置，即索引为 0 的位置。当你使用 <code>iterator.next()</code> 时，它会返回列表的第一个元素。</li><li><code>ListIterator&lt;Integer&gt; iterator = numbers.listIterator(numbers.size())</code>：通过这种方式初始化的 <code>ListIterator</code> 位于列表的末尾位置，即索引为 <code>list.size()</code> 的位置。当你使用 <code>iterator.previous()</code> 时，它会返回列表的最后一个元素。</li></ol><p>总的来说，这两种方式初始化的 <code>ListIterator</code> 分别定位在列表的开始和末尾位置，选择取决于你是希望从前向后遍历还是从后向前遍历。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">javaCopy codeList&lt;String&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从前向后遍历</span></span><br><span class="line">ListIterator&lt;String&gt; iteratorForward = myList.listIterator();</span><br><span class="line"><span class="keyword">while</span> (iteratorForward.hasNext()) &#123;</span><br><span class="line">    System.out.print(iteratorForward.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: A B C D</span></span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从后向前遍历</span></span><br><span class="line">ListIterator&lt;String&gt; iteratorBackward = myList.listIterator(myList.size());</span><br><span class="line"><span class="keyword">while</span> (iteratorBackward.hasPrevious()) &#123;</span><br><span class="line">    System.out.print(iteratorBackward.previous() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: D C B A</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>iteratorForward</code> 从前向后遍历列表，而 <code>iteratorBackward</code> 从后向前遍历列表。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git因文件过大导致提交失败解决方案</title>
      <link href="/posts/c34e9722.html"/>
      <url>/posts/c34e9722.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>git推送到远程时因个别文件过大导致推送失败</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116000643175-1811993802.png" alt="image-20231116000642638"></p><p>Gitee托管平台对不同套餐的用户采用了不同的配额限制，详情可查阅<a href="https://help.gitee.com/repository/base/%E4%BB%93%E5%BA%93%E4%BD%93%E7%A7%AF%E8%BF%87%E5%A4%A7%EF%BC%8C%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%8F#%E6%A6%82%E8%BF%B0">Gitee产品文档</a></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116001113757-1612266466.png" alt="image-20231116001113295"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1、查看超出限额的大文件"><a href="#1、查看超出限额的大文件" class="headerlink" title="1、查看超出限额的大文件"></a>1、查看超出限额的大文件</h3><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116001707414-1980373033.png" alt="image-20231116001706912"></p><p>命令如下，其中<code>557b10ce603309c9a25c0e3924ce3d681104f18c</code> 为错误信息中给出的文件的哈希值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-list --objects --all | grep 557b10ce603309c9a25c0e3924ce3d681104f18c</span><br></pre></td></tr></table></figure><h3 id="2、查看提交记录"><a href="#2、查看提交记录" class="headerlink" title="2、查看提交记录"></a>2、查看提交记录</h3><p>使用 <code>git log</code> 命令可查看历史提交信息，会显示提交记录的<strong>Commit Hash</strong>，作者信息、提交时间、提交说明等信息， 每个提交都有一个唯一的 SHA-1 校验和，用于标识该提交</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116003453057-860135841.png" alt="image-20231116003452483"></p><h3 id="3、撤销commit记录"><a href="#3、撤销commit记录" class="headerlink" title="3、撤销commit记录"></a>3、撤销commit记录</h3><p>依次撤销已经commit但未push到远程的提交记录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116003406595-775683083.png" alt="image-20231116003405991"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset Commit &lt;HashCommit Hash&gt;</span><br></pre></td></tr></table></figure><h3 id="4、删除本地大文件"><a href="#4、删除本地大文件" class="headerlink" title="4、删除本地大文件"></a>4、删除本地大文件</h3><h3 id="5、重新提交并推送"><a href="#5、重新提交并推送" class="headerlink" title="5、重新提交并推送"></a>5、重新提交并推送</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;提交说明&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>最终完美解决</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231116004231720-102402302.png" alt="image-20231116004231196"></p><p>参考文章</p><p><a href="https://cloud.tencent.com/developer/article/1466149">Git push大文件失败解决</a></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制化代码生成项目_day2</title>
      <link href="/posts/23d353f6.html"/>
      <url>/posts/23d353f6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h2><p>在上一期教程中，我们已经了解了整个定制化代码生成项目的需求背景、三大阶段、技术选型，并且通过对三个阶段分别进行分析，学习了各阶段的业务流程、实现思路和待解决的问题。</p><p>从本节教程开始，鱼皮会依次带大家完成三个阶段的开发实现，解决之前提到的各种问题。</p><h2 id="本节重点"><a href="#本节重点" class="headerlink" title="本节重点"></a>本节重点</h2><p>本节教程属于项目的第一阶段 —— 开发本地代码生成器。</p><p>重点内容：</p><ol><li>完成项目的初始化</li><li>静态文件生成</li><li>动态文件代码生成</li><li>FreeMarker 模板引擎入门及实战</li><li>动静结合 - ACM 示例项目模板代码生成</li></ol><h2 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h2><h3 id="1、初始化根目录"><a href="#1、初始化根目录" class="headerlink" title="1、初始化根目录"></a>1、初始化根目录</h3><p>由于我们的项目包含多个阶段，本质上是多个项目，所以为了统一管理整个项目，我们创建一个干净的<code> template-generator</code> 空文件夹，作为整个项目的根目录，后续各阶段的项目和目录都放到它之下。<br>这样做还有一个好处，就是让不同项目模块可以用 相对路径 寻找文件，便于整个项目的开源共享。<br>建议大家养成习惯，使用 Git 来管理项目。如果使用 IDEA 开发工具来创建新项目，可以直接勾选 Create Git repository ，工具会自动帮你初始化项目为 Git 仓库。</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114130738168-1948313359.png" alt="image-20231114130738776"></p><p>当然，也可以进入项目根目录，执行 <code>git init</code> 命令创建 Git 仓库。</p><h3 id="2、创建忽略文件"><a href="#2、创建忽略文件" class="headerlink" title="2、创建忽略文件"></a>2、创建忽略文件</h3><p>创建好新项目后，使用 IDEA 开发工具打开项目，进入底部的 <code>Git </code>标签，会发现很多和项目无关的 IDEA 自动生成的工程文件被添加到了 Git 托管。</p><p>新初始化的项目没有提交记录，可以点击<code>Commit local changes</code> </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114131047442-100033204.png" alt="image-20231114131048121"></p><p>或者直接点击侧边栏<code>Commit</code>选项</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114131347111-1875962650.png" alt="image-20231114131347901"></p><p>我们不希望提交这些没有意义的文件，所以需要使用 <code>.gitignore </code>文件来忽略这些文件，不让它们被 Git 托管。<br>那么如何编写<code> .gitignore</code> 文件呢？</p><p>其实这个忽略文件没必要自己写，我们可以在 IDEA 的 Settings &#x3D;&gt; Plugins 中搜索 <code>.ignore</code> 插件并安装：</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114132121843-1779918185.png" alt="image-20231114132122606"></p><p>如果网络或其他原因导致搜索不出来，可以到<a href="https://plugins.jetbrains.com/plugin/7495--ignore">官方插件市场</a>下载到本地采用从磁盘安装的方式</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114132339542-1331521183.png" alt="image-20231114132340104"></p><p>然后在项目根目录处选中右键，使用 .ignore 插件创建 .gitignore 文件：</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114133121968-2061017438.png" alt="image-20231114133122575"></p><p>可以在搜索框中搜索需要的忽略类型，比如<code>JetBrains</code>、<code>Java</code>、<code>Maven</code>等</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114133348523-2117359186.png" alt="image-20231114133349201"></p><p>IDEA询问是否将该文件添加到版本库，添加即可</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114133714418-843339042.png" alt="image-20231114133715188"></p><p>也可以添加一些自定义忽略文件或目录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120221518424-682582666.png" alt="image-20231120221517691"></p><p>但是，即使有些文件已经添加到了<code> .gitignore</code> 文件中，在 IDEA 中显示的还是绿色（已被 Git 托管）状态</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120222021476-30701430.png" alt="image-20231120222021082"></p><p>这是因为这些文件已经被 Git 跟踪。而<code>.gitignore</code> 文件仅影响未跟踪的文件</p><p>如果文件已经被 Git 跟踪，那么 <code>.gitignore</code> 文件对它们没有影响<br>所以我们需要打开终端，在项目根目录下执行如下命令，取消 Git 跟踪</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -rf --cached .</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120222151167-1504539761.png" alt="image-20231120222150842"></p><p>将文件重新添加到暂存区、例如将刚才创建的<code>.gitignore</code>添加到暂存区</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120222407576-1192476449.png" alt="image-20231120222407201"></p><h3 id="3、创建-Demo-示例代码工程"><a href="#3、创建-Demo-示例代码工程" class="headerlink" title="3、创建 Demo 示例代码工程"></a>3、创建 Demo 示例代码工程</h3><p>为了制作代码生成器，我们需要一些示例模板代码，后续会基于这些模板代码来定制生成。<br>比如第一阶段，我们会用到一套鱼皮提前编写好的 ACM 示例模板代码，从而制作定制化 ACM 模板代码生成器</p><p>在第二阶段，我们会用到一套 Spring Boot 初始化项目模板。<br>让我们新建一个 <code>shiguang-generator-demo-projects</code> 目录，统一存放所有的示例代码，然后将鱼皮准备的 ACM 模板项目（acm-template）复制到该目录下。</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120223611034-832583174.png" alt="image-20231120223610559"></p><h4 id="ACM-示例代码模板介绍"><a href="#ACM-示例代码模板介绍" class="headerlink" title="ACM 示例代码模板介绍"></a>ACM 示例代码模板介绍</h4><p>鱼皮准备的 ACM 示例代码模板非常简单，只是一个干净的 Java 项目，没有使用 Maven 和任何第三方依赖<br>结构如下，核心组成是静态文件 <code>README.md</code> 和代码文件 <code>MainTemplate</code></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120223903675-2081076447.png" alt="image-20231120223902936"></p><p><code>README.md</code>内容如图，仅包含了简单的描述文本</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120223952403-971394141.png" alt="image-20231120223952121"></p><p><code>MainTemplate.java</code> 是一段 ACM 示例输入代码，作用是计算并输出多数之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiguang.acm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ACM 输入模板（多数之和）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// 读取输入元素个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取数组</span></span><br><span class="line">            <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                arr[i] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理问题逻辑，根据需要进行输出</span></span><br><span class="line">            <span class="comment">// 示例：计算数组元素的和</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">                sum += num;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在第一阶段的教程中，我们将改造这个 Java 代码文件，让它能同时支持多种不同的输入方式</p><h3 id="4、创建本地代码生成器项目"><a href="#4、创建本地代码生成器项目" class="headerlink" title="4、创建本地代码生成器项目"></a>4、创建本地代码生成器项目</h3><p>使用 IDEA 开发工具，在项目根目录中新建工程，创建 yuzi-generator-basic 项目。需要注意以下几点：</p><ol><li>项目存放位置在 <code>template_generator </code>根目录下</li><li>取消 Git 仓库勾选（因为已经在外层进行 Git 托管）</li><li>使用 Maven 管理项目</li><li>JDK 选择 1.8！不要追求新版本</li><li>高级设置中，指定 GroupId 和 ArtifactId</li></ol><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231120224816678-1665314943.png" alt="image-20231120224815563"></p>]]></content>
      
      
      <categories>
          
          <category> 项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制化代码生成项目_day1</title>
      <link href="/posts/bada024c.html"/>
      <url>/posts/bada024c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>其实上面已经带大家了解了项目的基本信息、项目的意义和价值。在需求分析阶段，我们通常还要进行一些调研工作，帮助我们明确需求、为后面的设计做好充分的准备。</p><h3 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h3><p>网上有一些代码生成器项目，比如前端 <a href="https://pro.ant.design/zh-CN">Ant Design Pro</a> 中后台项目脚手架，能够让用户交互式地创建指定的项目；还有后端 MyBatis X 插件，能够让用户通过界面来创建 CRUD 重复代码。但这些项目都是开发者提前制作好了代码生成器，然后让你 根据他们设置好的规则 生成代码（或者拉取特定位置的代码），生成后的代码通常还要再自己二次修改，不够灵活。</p><p>还有很多所谓的代码生成项目，其实本质上是一个现成的项目模板，让你通过编写对应的配置文件来使用项目，或者还是基于预设的程序来生成特定代码。比如 <a href="https://yuyuanweb.feishu.cn/wiki/VC1qwmX9diCBK3kidyec74vFnde">编程导航知识星球</a> 的 Spring Boot 万用项目模板，或者网上很多知名的开源管理系统。</p><p>这和我们要做的事情不同，我们的目标是升级一个层次！打造一个帮助大家快速制作代码生成器的工具，也就是 “造轮子的轮子”。</p><p>然后再升级一个层次！允许用户像发布应用一样，在平台上发布和管理代码生成器，便于共享和协作！</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>暂定的核心技术如下，实际开发中还会引入新技术</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>React 开发框架 + 组件库 + 代码编辑器</li><li>前端工程化：ESLint + Prettier + TypeScript</li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>Java Spring Boot + MySQL + MyBatis Plus（万用后端模板）</li><li>Java 命令行应用开发</li><li>FreeMarker 模板引擎</li><li>Vert.x 响应式编程</li><li>Caffeine + Redis 多级缓存</li><li>分布式任务调度系统</li><li>多种设计模式</li><li>多种系统设计的巧思</li><li>对象存储、</li></ul><h3 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h3><p>其中：Java 命令行应用开发、FreeMarker 模板引擎、Vert.x 响应式编程、设计模式、系统设计的巧思、分布式任务调度系统都是本项目的学习重点，也是校招简历上很少有同学提到的知识实践，学完后能够大大增加简历的区分度！<br>比如 Vert.x 框架，并发连接处理能力吊打 Spring 几条街！</p><blockquote><p>Web Framework Benchmarks 性能对比网站：</p><p><a href="https://www.techempower.com/benchmarks/#section=data-r21&test=composite">https://www.techempower.com/benchmarks/#section=data-r21&amp;test=composite</a></p></blockquote><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231113235845631-1230764903.png" alt="image-20231113235845853"></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231113235911990-217135334.png" alt="image-20231113235912317"></p><h2 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h2><p>首先我们要理解代码生成的核心原理。</p><h3 id="代码生成器的核心原理"><a href="#代码生成器的核心原理" class="headerlink" title="代码生成器的核心原理"></a>代码生成器的核心原理</h3><p>一句话：参数 + 模板文件 &#x3D; 生成的完整代码</p><p>比如参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作者 = 鱼皮</span><br></pre></td></tr></table></figure><p>模板文件代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----------</span><br><span class="line">我是 $&#123;作者&#125;</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><p>将参数注入到模板文件中，得到生成的完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----------</span><br><span class="line">我是 鱼皮</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><p>如果想要使用这套模板生成其他的代码，只需要改变参数的值即可，而不需要改变模板文件。<br>理解了代码生成器的核心原理后，<strong>就可以开始思考项目的设计实现方案了</strong>。</p><p>项目总共分为 3 个阶段，让我们分别来进行设计。</p><h3 id="第一阶段-本地代码生成器"><a href="#第一阶段-本地代码生成器" class="headerlink" title="第一阶段 - 本地代码生成器"></a>第一阶段 - 本地代码生成器</h3><p>这个阶段，我们的目标是做一个本地（离线）的代码生成器，实现一个简易的 Java ACM 模板项目的定制化生成。<br>本阶段不依赖复杂的开发框架，没学过任何开发框架也能学习。</p><h4 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h4><ol><li>准备用于制作代码生成器的原始代码（比如 Java ACM 模板项目），用于后续生成</li><li>开发者基于原始代码，设置参数、编写动态模板</li><li>制作可交互的命令行工具，支持用户输入参数，得到代码生成器 jar 包</li><li>使用者得到代码生成器 jar 包，执行程序并输入参数，从而生成完整代码</li></ol><p>流程图如下：</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114000342604-1915294376.png" alt="image-20231114000342815"></p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ol><li>先根据本地项目，扫描文件树，实现同样的静态代码生成</li><li>根据本地的项目，预设部分动态参数、编写模板文件，能够传入配置对象进行生成</li><li>制作可交互的命令行工具，接受用户输入的参数，并动态生成代码</li><li>封装制作代码生成器 jar 包文件，并简化使用命令</li></ol><h3 id="第二阶段-代码生成器制作工具"><a href="#第二阶段-代码生成器制作工具" class="headerlink" title="第二阶段 - 代码生成器制作工具"></a>第二阶段 - 代码生成器制作工具</h3><p>这个阶段，我们的目标是做一个本地的代码生成器制作工具，能够快速将一个项目制作为可以动态定制部分内容的代码生成器。并且以一个 Spring Boot 初始化项目模板（Maven 项目）为例，演示如何根据自己的需要动态生成 Java 后端初始化项目。<br>本阶段的学习需要一定的 Spring Boot 开发知识，最好先完成 <a href="https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd">星球的其他项目</a> ，推荐用户中心和聚合搜索。</p><h4 id="业务流程-1"><a href="#业务流程-1" class="headerlink" title="业务流程"></a>业务流程</h4><ol><li>准备用于制作代码生成器的原始代码（比如 Spring Boot 项目模板），用于后续生成</li><li>开发者基于原始代码，使用代码生成器制作工具，来快速设置参数、生成动态模板</li><li>使用代码生成器制作工具，动态生成代码生成器 jar 包</li><li>使用者得到代码生成器 jar 包，执行程序并输入参数，从而生成完整代码</li></ol><p>流程图如下：</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114000637601-264962715.png" alt="image-20231114000638094"></p><h4 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h4><ol><li>使用独立空间来存储管理要生成的原始文件、动态模板文件等</li><li>使用配置文件来记录要生成的参数和模板文件信息、自定义配置等 元信息</li><li>代码生成器制作工具需要有多种可单独或组合使用的功能，比如从原始文件中抽取参数、动态生成命令行工具、打 jar 包等</li></ol><h4 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h4><ol><li>如何使用配置文件来记录参数和模板文件信息？何种结构？</li><li>怎么能够提高代码生成器的制作效率？工具应该提供哪些能力？</li><li>如何从原始文件中抽取参数？有哪些类型的参数？有哪些抽取规则？比如布尔类型参数（是否生成）、字符串类型参数（生成指定的值）等</li></ol><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114000807799-1482793121.png" alt="image-20231114000808254"></p><ol start="4"><li>如何动态生成配置类？如何动态生成命令行工具？如何动态打 jar 包？</li></ol><h3 id="第三阶段-在线代码生成器平台"><a href="#第三阶段-在线代码生成器平台" class="headerlink" title="第三阶段 - 在线代码生成器平台"></a>第三阶段 - 在线代码生成器平台</h3><p>经过前两个阶段，我们已经能够使用本地的代码生成器制作工具来快速定制自己的代码生成器了。<br>但如果我们想和团队其他同学共同维护代码生成器、或者使用其他人的代码生成器，通过本地文件互传的方式肯定就很麻烦了。<br>所以本阶段我们要打造一个在线代码生成器平台，可以理解为代码生成器的 应用市场。所有人都能发布、使用、甚至是在线制作自己的代码生成器！<br>本阶段我们的终极目标是，在平台上制作和发布项目 “换皮” 工具，帮助小伙伴们一键给网络热门项目换皮！</p><h4 id="业务流程-2"><a href="#业务流程-2" class="headerlink" title="业务流程"></a>业务流程</h4><ol><li>获取用于制作代码生成器的原始代码（手动准备或者远程拉取代码）</li><li>开发者基于原始代码，使用 在线代码生成器制作工具，来快速制作代码生成器</li><li>开发者发布代码生成器至平台</li><li>使用者在平台上搜索代码生成器，支持在线使用或者下载离线 jar 包（甚至还可以支持接口调用）、</li></ol><p>完整业务流程图如下：</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114001035459-979742453.png" alt="image-20231114001035892"></p><h4 id="实现思路-2"><a href="#实现思路-2" class="headerlink" title="实现思路"></a>实现思路</h4><ol><li>使用 Web 开发框架实现代码生成器信息的增删改查</li><li>将本地的配置和文件 上云，存储到数据库、对象存储等云服务。</li><li>通过可视化界面来操作第二阶段的代码生成器制作工具，复用阶段二的成果。</li></ol><h4 id="关键问题-1"><a href="#关键问题-1" class="headerlink" title="关键问题"></a>关键问题</h4><ol><li>怎么在云上存储管理代码生成器？</li><li>如何通过前端开发，提高代码生成器的制作效率？</li><li>如何通过后端优化，提高代码生成器的制作性能？</li><li>如何保证代码生成器的存储空间不超限、如何优化存储？</li></ol><h2 id="新建代码仓库"><a href="#新建代码仓库" class="headerlink" title="新建代码仓库"></a>新建代码仓库</h2><blockquote><p>搭建仓库，点 star 的都是精神股东</p></blockquote><p>鱼皮仓库：<a href="https://github.com/liyupi/yuzi-generator">https://github.com/liyupi/yuzi-generator</a></p><p>我的仓库：<a href="https://github.com/Shiguang-coding/template-generator">https://github.com/Shiguang-coding/template-generator</a></p><h2 id="本期作业"><a href="#本期作业" class="headerlink" title="本期作业"></a>本期作业</h2><ol><li>理解代码生成器项目三个阶段的区别，从中学习到拆解项目的思路和方法</li><li>尝试自己做项目时，像鱼皮本篇教程一样编写一个项目设计方案</li><li>思考上述关键问题的实现方案，欢迎大家交流讨论</li><li>在 GitHub 新建仓库（或者 fork 鱼皮的代码仓库），为下期项目开发做准备</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制化代码生成项目</title>
      <link href="/posts/93b8c82b.html"/>
      <url>/posts/93b8c82b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a><strong>项目介绍</strong></h2><p>基于 React + Spring Boot + Vert.x 响应式编程的 定制化代码生成项目 。 注意！这次的项目会很特别，听起来是一个项目，但其实是循序渐进的 <strong>3 个项目</strong> ！</p><p>第一阶段，我会带大家制作属于自己的 本地代码生成器 ，是一个 <strong>基于命令行的脚手架</strong> ，能够根据用户的交互式输入快速生成特定代码。</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231113234134736-904582628.png" alt="image-20231113234135027"></p><p>网上绝大多数的教程，也只是讲到这个阶段。 第二阶段，让我们上升一个层次，带大家开发 制作代码生成器的工具 。比如你有一段常用的项目代码，使用该工具，可以快速把项目代码制作为代码生成器，将是提高工作效率的大杀器！ 第三阶段，让我们再上升一个层次，带大家开发 在线代码生成器平台 ！你可以在平台上制作发布自己的代码生成器，还可以在线使用别人的代码生成器，甚至可以共享协作！</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231113234148551-86739101.png" alt="image-20231113234148992"></p><p>之所以要分阶段，一方面是因为项目是比较庞大的，拆分后学习会更轻松；另一方面是不同阶段的难度不同，大家可以独立学习。 比如哪怕你什么框架都没学过，也可以完成第一阶段；而如果你学过开发框架，可以完成第二阶段；如果你想学习更多高级知识和优化技巧，再去看第三阶段。够贴心</p><h2 id="为什么做这个项目"><a href="#为什么做这个项目" class="headerlink" title="为什么做这个项目"></a>为什么做这个项目</h2><ol><li>教程资料少：网上虽然有现成的项目模板，但基本都是别人封装好的，只能按作者的要求生成，并且缺少项目教程；而本项目不仅带大家做自己的代码生成器，还会进 2 步扩展，打造制作自定义代码生成器的工具和平台。</li><li>新颖且亮眼：别人写代码，你做生产代码的脚手架、工具和平台来提高研发效能，降维打击。</li><li>能学到东西：不再是增删改查的项目，而是包含了大量的实际业务场景、系统设计和解决方案。</li><li>有区分度：区别于传统 Web 应用，项目涉及命令行应用、响应式编程、性能优化的入门及实战，给你的简历增加竞争力。</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>暂定的核心技术如下，实际开发中还会引入新技术 <strong>前端</strong></p><ul><li>React 开发框架 + 组件库 + 代码编辑器</li><li>前端工程化：ESLint + Prettier + TypeScript <strong>后端</strong></li><li>Java Spring Boot + MySQL + MyBatis Plus（万用后端模板）</li><li>Java 命令行应用开发</li><li>FreeMarker 模板引擎、</li><li>Vert.x 响应式编程</li><li>Caffeine + Redis 多级缓存、</li><li>分布式任务调度系统</li><li>多种设计模式</li><li>多种系统设计的巧思</li><li>对象存储</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>時光的免费GPT服务</title>
      <link href="/posts/217eb9be.html"/>
      <url>/posts/217eb9be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>目前提供4个免费服务，3个ChatGPT服务和一个NewBing服务，均不需要魔法，兼容移动端</p><p>所提供的服务均基于开源项目进行部署，项目地址均有提供，现有服务均部署在代码托管平台 <a href="https://vercel.com/">Vercel</a> 上</p><p>如果你也想要搭建一个自己的服务，仅需将开源项目Fork到自己的<a href="https://github.com/">github</a>仓库，点击一键部署即可免费部署</p><h1 id="1、pandora"><a href="#1、pandora" class="headerlink" title="1、pandora"></a>1、pandora</h1><blockquote><p><a href="https://chatgpt.shiguang666.eu.org/">直通车 : https://chatgpt.shiguang666.eu.org/</a></p></blockquote><p>基于开源项目 <a href="https://github.com/pengzhile/pandora">pandora</a>搭建,可通过OpenAI账号或AccessToken登录</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623124505658-1322894106.png" alt="image-20230623124505442"></p><p>点击 <code>Continue with Access Token</code> 可采用Access Token进行登录，输入自己的Access Token 即可</p><p>Access Token 有效期为半个月，采用该方式登录每半个月需要重新获取一次</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623135923691-230062675.png" alt="image-20230623135924192"></p><p><strong>Access Token 获取方式</strong></p><p>在<a href="https://chat.openai.com/auth/login">ChatGPT官网</a>登录后，访问**<a href="https://chat.openai.com/api/auth/session">https://chat.openai.com/api/auth/session</a>**即可获取Access Token </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623140342976-248814744.png" alt="image-20230623140343068"></p><p>让它写个冒泡排序看一下效果吧</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623150611354-1875732832.png" alt="image-20230623150611510"></p><p>效果还不错</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623150708510-1961407475.png" alt="image-20230623150708927"></p><h1 id="2、ChatGPT-Next-Web"><a href="#2、ChatGPT-Next-Web" class="headerlink" title="2、ChatGPT-Next-Web"></a>2、ChatGPT-Next-Web</h1><blockquote><p><a href="https://gpt.shiguang666.eu.org/">直通车：https://gpt.shiguang666.eu.org/</a></p></blockquote><p>基于开源项目  <a href="https://github.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web</a> 搭建，可通过API Key 或我提供的访问密码访问</p><p>通过访问密码访问实际消耗的是我的API key的余额，纯纯地为爱发电了</p><p><strong>访问密码：shiguang、shiguang666、shiguang888均可</strong></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623130136696-923051977.png" alt="image-20230623130136951"></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623140628427-1176698393.png" alt="image-20230623140628673"></p><p><strong>API Key 获取方式</strong></p><p>在<a href="https://chat.openai.com/auth/login">ChatGPT官网</a>登录后，访问<a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p><p>点击 <code>Create new secret key</code> 创建一个新的key</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623152051717-986166001.png" alt="image-20230623152052094"></p><p>名称可随便输入，用于区分不同的key</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623141310502-392269563.png" alt="image-20230623141310816"></p><p>再次点击 <code>Create secret key</code> 后会生成 一个新的key，该key只显示一次，可复制保存起来</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623141506490-510570772.png" alt="image-20230623141506757"></p><h1 id="3、chatbot-ui"><a href="#3、chatbot-ui" class="headerlink" title="3、chatbot-ui"></a>3、chatbot-ui</h1><blockquote><p><a href="https://chatbot.shiguang666.eu.org/">直通车：https://chatbot.shiguang666.eu.org/</a></p></blockquote><p>基于开源项目 <a href="https://github.com/mckaywrigley/chatbot-ui">chatbot-ui</a> 搭建，可通过API Key 进行访问</p><p>一个暗黑主题Chatbot UI，支持导入、导出对话、设置自定义提示词功能</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623131435988-472713035.png" alt="image-20230623131436278"></p><p>在右上方点击新建提示可以自定义提示词</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623142944365-20003562.png" alt="image-20230623142944649"></p><p>提示词可以参考 <a href="https://github.com/PlexPt/awesome-chatgpt-prompts-zh">ChatGPT 中文调教指南</a></p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623142806353-579402189.png" alt="image-20230623142806694"></p><h1 id="4、BingAI-Client"><a href="#4、BingAI-Client" class="headerlink" title="4、BingAI-Client"></a>4、BingAI-Client</h1><blockquote><p><a href="https://newbing.shiguang666.eu.org/">直通车:https://newbing.shiguang666.eu.org/</a></p></blockquote><p>基于开源项目 <a href="https://github.com/xbzstudio/BingAI-Client">BingAI-Client </a> 搭建，可直接访问</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623131538939-606595581.png" alt="image-20230623131538915"></p><p>支持联网、并且所有回答都附有相关链接</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623143713359-639366602.png" alt="2023-06-23_143456"></p><p>问答的时候可以响应图片，不过兼容性做的不是很好</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623144310735-1643510665.png" alt="image-20230623144311096"></p><p>可以点击画图体验画图功能，不过效果和midjourney相比还有一定距离</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623144550923-1355886502.png" alt="image-20230623144551142"></p><p>也可以进行AI创作，让它写一下今年的高考作文吧</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623145556825-1902190681.png" alt="image-20230623145556941"></p><h1 id="5、小贴士"><a href="#5、小贴士" class="headerlink" title="5、小贴士"></a>5、小贴士</h1><p>通过OpenAI账号登录或AccessToken登录是真正的不限次数访问</p><p>通过API Key访问需要消耗账户内余额，每个免费账号有5美元API调用余额而且是会过期的</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623133118819-1157994986.png" alt="image-20230623133119076"></p><p>另外，对于不同账户，通过API访问的限速级别也是不同的</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202306/2233039-20230623134007784-113165402.png" alt="image-20230623134008145"></p><p>相关推荐</p><p><a href="https://www.cnblogs.com/an-shiguang/p/17308296.html">玩转ChatGPT</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> AI </tag>
            
            <tag> NewBing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql查询时生成索引列</title>
      <link href="/posts/d62b9d84.html"/>
      <url>/posts/d62b9d84.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在查询数据时，如果想要按照查询结果所在行数生成一列索引列，可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="variable">@rownum</span> :<span class="operator">=</span> <span class="variable">@rownum</span> <span class="operator">+</span> <span class="number">1</span> rownum,</span><br><span class="line">e.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">( <span class="keyword">SELECT</span> <span class="variable">@rownum</span> :<span class="operator">=</span> <span class="number">0</span> ) r,</span><br><span class="line">student e</span><br></pre></td></tr></table></figure><p>其中，student 表是实际要查询的表，rownum即为按照数据所在行生成的索引列</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230526134246189-245025638.png" alt="image-20230526134247227"></p>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>com.alibaba.fastjson转换json时默认将属性第一个字母转小写</title>
      <link href="/posts/fcb9db95.html"/>
      <url>/posts/fcb9db95.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>将实体类对象转为json字符串的时候，会将属性名首字母改为小写</p><p>例如此出User队形有两个属性，USER_NAME和USER_AGE，首字母均为大写</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230509174435305-2012131246.png" alt="image-20230509174435159"></p><p>将实体类对象转为JSON后首字母全都转换为了小写</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230509174520360-1286878580.png" alt="image-20230509174520330"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这是因为阿里巴巴的fastjson框架默认使用了JavaBean规范中的命名约定，将属性名首字母小写，以符合ava编码规<br>范。因此，当使用fastjson的SONObject.toJSONString方法将一个实体类对象转换为SON字符串时，实体类的属性名<br>会被自动转换成首字母小写的形式。如果需要在SON字符串中保留属性名的原始命名，可以使用fastjso提供的注解<br>@SONField来指定属性名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230509174956922-2038658882.png" alt="image-20230509174956741"></p><p>这样转换的属性名称就正常了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230509175032208-1042058630.png" alt="image-20230509175032285"></p><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@JSONField(name = &quot;USER_NAME&quot;)</span></span><br><span class="line">    <span class="keyword">private</span>  String USER_NAME;</span><br><span class="line">    <span class="meta">@JSONField(name = &quot;USER_AGE&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer USER_AGE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUSER_NAME</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> USER_NAME;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUSER_NAME</span><span class="params">(String USER_NAME)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.USER_NAME = USER_NAME;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUSER_AGE</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> USER_AGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUSER_AGE</span><span class="params">(Integer USER_AGE)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.USER_AGE = USER_AGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUSER_NAME(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setUSER_AGE(<span class="number">18</span>);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转ChatGPT</title>
      <link href="/posts/cd87c735.html"/>
      <url>/posts/cd87c735.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文数据均来源网络，仅供个人学习使用，请勿用于商业用途，如有侵权请联系删除</p></blockquote><h1 id="一、学习手册"><a href="#一、学习手册" class="headerlink" title="一、学习手册"></a>一、学习手册</h1><p><a href="https://nujuo8y1qx.feishu.cn/docx/AdqEdlT52oBiawx6Vv2cc89DnLb">ChatGTP学习手册</a></p><p><a href="https://yunyinghui.feishu.cn/wiki/M60IwpJhwiRD1lkeFGVc70CSnTr">ChatGPT学习工具包</a></p><p><a href="https://nujuo8y1qx.feishu.cn/docx/RleadAwrAo4O1FxhuoGcDV86nBe">AIGC学习手册</a></p><p><a href="https://yunyinghui.feishu.cn/wiki/VnVOwXvDViBdkNkgTeDcM95gnud">AI实用工具导航</a></p><p><a href="https://yunyinghui.feishu.cn/docx/IVeidlyAdoDZFExb1eucDfcan4b">AI事件每日大纪实</a></p><p><a href="https://learningprompt.wiki/docs/chatgpt-learning-path">ChatGPT学习导航</a></p><p><a href="https://op9hpenwtc.feishu.cn/docx/TccYdYoPGo2piYxqHtLcuukBnOh">ChatGPT学习指南</a></p><p><a href="https://www.explainthis.io/zh-hans/chatgpt">ChatGPT指令大全</a></p><p><a href="https://learningprompt.wiki/">learningprompt</a></p><p><a href="https://www.aishort.top/">https://www.aishort.top/</a></p><p><a href="https://y3if3fk7ce.feishu.cn/docx/BiQqdkWKroLBJ8xrO2Cc6vQZnce">ChatGPT prompt指令大全</a></p><p><a href="https://y3if3fk7ce.feishu.cn/sheets/BIeAsn8IvhX3HUtcf84cFViinu3?table=tblTLSqLLvUznxAZ&view=vewP2B92zv">AI资料网盘汇总</a></p><p><a href="https://y3if3fk7ce.feishu.cn/docx/QBqwdyde7omVf4x69paconlgnAc">AIGC从入门到精通教程汇总</a></p><h1 id="二、在线体验"><a href="#二、在线体验" class="headerlink" title="二、在线体验"></a>二、在线体验</h1><p><a href="https://chat-shared.zhile.io/shared.html">共享ChatGPT账号</a></p><p>数据源一</p><p><a href="https://chat.aidutu.cn/">https://chat.aidutu.cn/</a></p><p><a href="https://chat.bk8787.com/">https://chat.bk8787.com/</a></p><p>数据源二</p><p><a href="http://doc.wuguokai.cn/s/xPq1iNw_v">最新文档地址</a></p><p><a href="https://chat.wuguokai.cn/">https://chat.wuguokai.cn</a></p><p><a href="https://ai.wuguokai.cn/">https://ai.wuguokai.cn</a></p><p><a href="https://ai.wuguokai.top/">https://ai.wuguokai.top</a></p><p>数据源三</p><p><a href="https://wet.xeasy.me/">https://wet.xeasy.me/</a></p><p><a href="https://wet.xeasy.me/">ChatGPT Bot (xeasy.me)</a></p><p><a href="https://chat23.xeasy.me/">ChatGPT Bot (xeasy.me)</a></p><p>数据源四</p><p><a href="https://chat.extkj.cn/">Chat机器人 (extkj.cn)</a></p><p>客户端</p><p><a href="https://github.com/mushan0x0/AI0x0.com">https://github.com/mushan0x0/AI0x0.com</a></p><h1 id="三、相关推荐"><a href="#三、相关推荐" class="headerlink" title="三、相关推荐"></a>三、相关推荐</h1><p><a href="https://ai.tboxn.com/">AI导航</a></p><p><a href="https://tool.aiofchina.com/">Ai工具箱</a></p><p><a href="https://poe.com/">poe</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17396416.html">通过浏览器拓展免费无限次使用ChatGPT</a></p><p><a href="https://www.perplexity.ai/">Perplexity</a></p><p>相关介绍</p><p><a href="https://www.youtube.com/watch?v=SuIdmIzM3Gs">https://www.youtube.com/watch?v=SuIdmIzM3Gs</a></p><p><a href="https://platform.openai.com/account/api-keys">获取API KEY</a></p><p><a href="http://chat.openai.com/api/auth/session">获取AccessToken</a></p><p>四、免费体验GPT4.0</p><p>1、<a href="https://www.bing.com/">New Bing</a></p><p><a href="https://poe.com/">https://poe.com/</a></p><p><a href="https://www.perplexity.ai/">https://www.perplexity.ai/</a></p><p><a href="https://ora.ai/">https://ora.ai</a></p><p>需翻墙</p><p><a href="https://www.forefront.ai/">https://www.forefront.ai/</a></p><p><a href="https://deepmind.google/technologies/gemini/#introduction">Gemini 官网</a></p><p><a href="https://bard.google.com/chat">谷歌Bard</a>)</p><p><a href="https://web.chatboxai.app/">chatbox</a></p><p><a href="https://chat.zhile.io/">PandoraNext体验</a></p><p><a href="https://gptscopilot.ai/">https://gptscopilot.ai/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过浏览器拓展免费无限次使用ChatGPT</title>
      <link href="/posts/8fa363f7.html"/>
      <url>/posts/8fa363f7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>随着ChatGPT的爆火，越来越多的人有了使用ChatGPT的需求，但是自己去官网注册又有一定门槛，今天给大家分享两个浏览器插件，可以实现免费且不限次使用ChatGPT3.5服务</p><h2 id="1、Wetab-新标签页"><a href="#1、Wetab-新标签页" class="headerlink" title="1、Wetab 新标签页"></a>1、<a href="https://chrome.zzzmh.cn/info/aikflfpejipbpjdlfabpgclhblkpaafo">Wetab 新标签页</a></h2><p>安装好Wetab标签页拓展后，打开一个新的浏览器窗口，就可以在最醒目的位置看到chat AI 的快捷应用窗口</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508131627191-415847501.png" alt="image-20230508131626074"></p><p>有多个服务源可供选择，你也可以添加自定义服务源</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508131855435-1274943669.png" alt="image-20230508131854960"></p><p>窗口左上角有两个图标，左边橙色的是关闭当前聊天窗口，右边绿色的可以缩放聊天窗口</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508132131875-1908168771.png" alt="image-20230508132131704"></p><h2 id="2、iTab新标签页"><a href="#2、iTab新标签页" class="headerlink" title="2、iTab新标签页"></a>2、<a href="https://chrome.zzzmh.cn/info/mhloojimgilafopcmlcikiidgbbnelip">iTab新标签页</a></h2><p>标签页右键可以添加图标</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508132436611-44311079.png" alt="image-20230508132435455"></p><p> 默认打开的就是小组件窗口，第一AiBot就是标签页给我们提供的AI助手了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508132546615-474390200.png" alt="image-20230508132546129"></p><p>这里面提供了很多AI功能</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508132740127-1759237432.png" alt="image-20230508132739508"></p><p>涵盖的功能还是很多的</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508132854163-631157504.png" alt="image-20230508132853556"></p><h2 id="3、ChatGPT镜像站推荐"><a href="#3、ChatGPT镜像站推荐" class="headerlink" title="3、ChatGPT镜像站推荐"></a>3、ChatGPT镜像站推荐</h2><p>当然，你也可以直接访问数据源中的网址进行使用</p><p><a href="https://chat-shared.zhile.io/shared.html">共享ChatGPT账号</a></p><p>数据源一</p><p><a href="https://chat.aidutu.cn/">https://chat.aidutu.cn/</a></p><p><a href="https://chat.bk8787.com/">https://chat.bk8787.com/</a></p><p>数据源二</p><p><a href="http://doc.wuguokai.cn/s/xPq1iNw_v">最新文档地址</a></p><p><a href="https://chat.wuguokai.cn/">https://chat.wuguokai.cn</a></p><p><a href="https://ai.wuguokai.cn/">https://ai.wuguokai.cn</a></p><p><a href="https://ai.wuguokai.top/">https://ai.wuguokai.top</a></p><p>数据源三</p><p><a href="https://wet.xeasy.me/">https://wet.xeasy.me/</a></p><p><a href="https://wet.xeasy.me/">ChatGPT Bot (xeasy.me)</a></p><p><a href="https://chat23.xeasy.me/">ChatGPT Bot (xeasy.me)</a></p><p>数据源四</p><p><a href="https://chat.extkj.cn/">Chat机器人 (extkj.cn)</a></p><p><a href="https://mirrorchat.extkj.cn/">Chat机器人 (extkj.cn)</a></p><p>相关推荐</p><blockquote><p><a href="https://www.cnblogs.com/an-shiguang/p/17308296.html">玩转ChatGPT</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具推荐</title>
      <link href="/posts/5f482ce3.html"/>
      <url>/posts/5f482ce3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、实用软件"><a href="#一、实用软件" class="headerlink" title="一、实用软件"></a>一、实用软件</h1><h2 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h2><p>1、<a href="https://www.huorong.cn/">火绒</a></p><p>系统安全用它就够了,市面上有很多电脑管家软件,还是火绒用起来最舒服</p><p>火绒安全工具里有跟多使用的工具，系统修复、弹窗拦截、右键管理、启动项管理等</p><p><img src="https://s1.vika.cn/space/2023/03/20/85e64bc7ca634b02a5f6f180fe06889d" alt="image-20230319122938446"></p><p>其中我最喜欢的是弹窗拦截功能，它能自动拦截弹窗广告，对于个别无法识别的弹窗广告也能手动截图识别</p><p><img src="https://s1.vika.cn/space/2023/03/20/d088eb0e2e00485da5b9ae2c7a473b5a" alt="image-20230319123220860"></p><h2 id="日常办公"><a href="#日常办公" class="headerlink" title="日常办公"></a>日常办公</h2><p>1、Office</p><blockquote><p><a href="https://pan.baidu.com/s/11c3mjaTfwCgpIpLzs2dsGg?pwd=8pdf">office 2013-2019激活工具 </a></p><p>[Windows数字激活工具](链接：<a href="https://pan.baidu.com/s/1_hNfAWxaSP0Me_bYjqtA_Q?pwd=g0f8">https://pan.baidu.com/s/1_hNfAWxaSP0Me_bYjqtA_Q?pwd=g0f8</a><br>提取码：g0f8)</p><p><a href="https://pan.baidu.com/s/1DMcxfrzRFhNLtsK0PAcdxw?pwd=x704">KMS</a></p></blockquote><p>2、<a href="https://www.u.tools/">uTools</a></p><p>3、<a href="https://getquicker.net/">Quicker</a></p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h2 id="1、Chrome-浏览器"><a href="#1、Chrome-浏览器" class="headerlink" title="1、Chrome 浏览器"></a><strong>1、Chrome 浏览器</strong></h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/438998185">谷歌chrome浏览器最新版国内下载方法</a></p><p><a href="http://www.th-sjy.com/?p=4995">Google Chrome 浏览器<a href="http://www.th-sjy.com/?p=4995">官方中文稳定版&#x2F;中文绿色便携稳定共存版</a></a></p></blockquote><h2 id="2、chrome-拓展"><a href="#2、chrome-拓展" class="headerlink" title="2、chrome 拓展"></a><strong>2、chrome 拓展</strong></h2><h3 id="如何下载"><a href="#如何下载" class="headerlink" title="如何下载"></a><strong>如何下载</strong></h3><ol><li><a href="https://chrome.zzzmh.cn/#/index">极简插件</a> </li><li><a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN">chrome应用商店(需要魔法)</a></li></ol><h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a><strong>如何安装</strong></h3><p>在浏览器地址栏输入 <code>chrome://extensions/</code>  进入拓展程序管理界面，开启开发者模式</p><p><img src="https://s1.vika.cn/space/2023/03/20/388c8e5b4f254199b061e89b3bb3d7f6" alt="image-20230216130154572"></p><p>将下载好的扩展文件解压后会得到后缀名为 <code>.crx</code> 的文件，直接拖入到刚才打开的管理界面中即可</p><p><img src="https://s1.vika.cn/space/2023/03/20/bf2e139e9b5242ffa51fd4dca24c63a7" alt="image-20230204150013216"></p><p>Edge浏览器可以在浏览器访问 <code>edge://extensions/</code> 或者在菜单栏找到拓展管理界面</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508130544007-245543186.png" alt="image-20230508130542710"></p><p>可以管理当前已只能装的拓展或者获取新的拓展</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508130649366-1604706194.png" alt="image-20230508130649138"></p><p>可以直接搜索自己需要的拓展</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508130743963-428018338.png" alt="image-20230508130743659"></p><h3 id="脚本推荐"><a href="#脚本推荐" class="headerlink" title="脚本推荐"></a>脚本推荐</h3><p>1、<a href="https://chrome.zzzmh.cn/info/dhdgffkkebhmkfjojejmpbldmpobfkfo"><strong>Tampermonkey 油猴脚本</strong></a> &#x2F; <a href="https://chrome.zzzmh.cn/info/gcalenpjmijncebpfijmoaglllgpjagf"><strong>Tampermonkey Beta 油猴脚本</strong></a></p><p>可谓拓展之王，必备的一款拓展，该拓展可以安装浏览器插件，</p><p>可以实现 <a href="https://greasyfork.org/zh-CN/scripts/436446-%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B">网盘直链下载</a>、 <a href="https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%9F%A5%E4%B9%8E%E5%A2%9E%E5%BC%BA-%E7%9F%AD%E8%A7%86%E9%A2%91%E6%97%A0%E6%B0%B4%E5%8D%B0%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%B7%A5%E5%85%B7%E7%AE%B1-%E5%8A%9F%E8%83%BD%E5%8F%AF%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%85%B3-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8-v6">VIP影视在线解析</a> 、<a href="https://greasyfork.org/zh-CN/scripts/444498-wenku-doc-download-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93wenku%E5%8A%A0%E5%BC%BA%E7%A0%B4%E8%A7%A3%E7%89%88-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E4%BC%9A%E5%91%98%E5%85%8D%E8%B4%B9%E8%A7%A3%E6%9E%90%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E6%96%87%E6%A1%A3%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%A4%8D%E5%88%B6%E5%86%85%E5%AE%B9-%E6%96%87%E6%9C%AC%E9%80%89%E4%B8%AD%E5%A4%8D%E5%88%B6-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E4%B8%8B%E8%BD%BD%E5%99%A8-vip%E6%96%87%E6%A1%A3%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD-%E5%85%A8%E6%96%87%E9%98%85%E8%AF%BB-%E5%BC%80%E5%90%AF%E5%8F%B3%E9%94%AE%E5%A4%8D%E5%88%B6">解除复制功能限制</a>、 <a href="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97">优化百度搜狗谷歌必应搜索</a> 等功能</p><p>可以在 <a href="https://greasyfork.org/zh-CN/">Greasy Fork</a> 获取脚本</p><p>2、<a href="https://chrome.zzzmh.cn/info/ngpampappnmepgilojfohadhhmbhlaek">IDM Integration Module</a></p><p>3、<a href="https://chrome.zzzmh.cn/info/cfhdojbkjhnklbpkdaibdccddilifddb">Adblock Plus 广告拦截</a></p><p>4、<a href="https://chrome.zzzmh.cn/info/cdonnmffkdaoajfknoeeecmchibpmkmg">Saladict 沙拉查词</a></p><p>5、<a href="https://chrome.zzzmh.cn/info/opjjpmhoiojifppkkcdabiobhakljdgm">Online Download Manager 下载管理</a></p><p>6、<a href="https://chrome.zzzmh.cn/info/necpbmbhhdiplmfhmjicabdeighkndkn">Similar Sites 相似网站</a></p><p>7、<a href="https://chrome.zzzmh.cn/info/mhloojimgilafopcmlcikiidgbbnelip">iTab新标签页</a></p><p>8、<a href="https://chrome.zzzmh.cn/info/aikflfpejipbpjdlfabpgclhblkpaafo">Wetab 新标签页</a></p><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><p>1、IDM</p><blockquote><p><a href="https://pan.baidu.com/s/1OVf7r3jzHVx0j4VKUKBSwg?pwd=8m5w">IDM官方安装包破解工具</a></p></blockquote><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><p><strong>1、potplayer</strong></p><blockquote><p><a href="https://www.cnblogs.com/an-shiguang/p/16152942.html">Potplayer 优化设置</a></p></blockquote><h2 id="文本阅读器"><a href="#文本阅读器" class="headerlink" title="文本阅读器"></a>文本阅读器</h2><p>1、<a href="https://gitee.com/cxasm/notepad--">Notepad–</a></p><p>2、<a href="http://www.sublimetext.com/3">sublimetext</a></p><blockquote><p><a href="https://www.bilibili.com/video/BV1sy4y1774E">Sublime Text 3 安装_配置_汉化插件_20210914</a></p><p><a href="https://wwa.lanzoui.com/ibTkGtzys9a">Sublime Text教程文件</a></p></blockquote><p>3、<a href="https://www.ultraedit.com/">UltraEdit</a></p><p>支持超大文本阅读</p><blockquote><p><a href="https://pan.baidu.com/s/1lwA97gi_kUMzrNtPzaPk-A?pwd=40k9">UltraEdit工具</a></p><p><a href="https://blog.csdn.net/weixin_45230720/article/details/126695298">UltraEdit编辑器+注册机（windows版）</a></p></blockquote><h2 id="压缩工具"><a href="#压缩工具" class="headerlink" title="压缩工具"></a>压缩工具</h2><p>1、<a href="https://www.bandisoft.com/bandizip/">Bandzip</a></p><p>2、<a href="https://7-zip.org/">7ZIP</a></p><h2 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h2><p>1、<a href="https://verycapture.com/cn/index.html">VeryCaptuer</a></p><p>一个非常实用的截图，录屏工具，支持钉图，长截图，录制GIF，录制视频，自定义快捷键，用它一个就够了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508113439661-1165203934.png" alt="image-20230508113439344"></p><p>2、<a href="https://zh.snipaste.com/">Snipaste</a></p><p>最喜欢该软件的贴图功能，可以将截图钉在屏幕上</p><p>3、<a href="https://faststone-capture.en.softonic.com/">FSCapture</a></p><blockquote><p><a href="https://pan.baidu.com/s/1fMdwSe1-xreONjTRbjNZYQ?pwd=sfjf">电脑滚动截屏软件</a></p></blockquote><p>小巧轻便、具有滚动截屏功能，不仅是个截图工具还能录屏</p><p><strong>注册码</strong></p><p>用户名：bluman</p><p>注册码：VPISCJULXUFGDDXYAUYF</p><p><img src="https://s1.vika.cn/space/2023/03/20/3e42b948ae084400b74a69edab062f08" alt="image-20230319135131138"></p><h2 id="卸载工具"><a href="#卸载工具" class="headerlink" title="卸载工具"></a>卸载工具</h2><p>1、<a href="https://geekuninstaller.com/">Geek</a></p><h2 id="录屏工具"><a href="#录屏工具" class="headerlink" title="录屏工具"></a>录屏工具</h2><p>1、<a href="https://www.apowersoft.com/">ApowerREC</a></p><blockquote><p><a href="https://pan.baidu.com/s/1fvHo_zlrjvdWbxels91cbQ?pwd=lnzg">ApowerREC 1.4.2.21-录屏工具</a></p></blockquote><p>2、<a href="https://verycapture.com/cn/index.html">VeryCaptuer</a></p><p>3、<a href="https://faststone-capture.en.softonic.com/">FSCapture</a></p><p>4、<a href="cockos.com/licecap/">LICEcap</a></p><p>一款轻量级屏幕录制工具，可以导出GIF动画图片格式，支持导出GIF 动画图片格式，可灵活调整录制窗口大小。</p><blockquote><p><a href="https://blog.csdn.net/Captain_ldx/article/details/127170606">「实用工具—LICEcap」写博必备|动图制作|一键生成gif(GIF)</a></p></blockquote><h2 id="笔记工具"><a href="#笔记工具" class="headerlink" title="笔记工具"></a>笔记工具</h2><p>1、<a href="https://www.typora.net/">Typora</a></p><blockquote><p><a href="https://pan.baidu.com/s/10dpJnejLJv89OzCagHHL6w?pwd=klu2">Typora免费版本</a></p></blockquote><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>1、 <a href="https://mobaxterm.mobatek.net/">MobaXterm</a></p><p>一款非常实用的SSH远程软件，支持的功能很多，自带ftp传输工具，可以支持文件拖拽传输</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508113930955-477982934.png" alt="image-20230508113930861"></p><p>界面也很舒服，而且可以监控服务器cpu，内存等资源实用状态</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230508113831729-317372585.png" alt="image-20230508113831481"></p><p>2、<a href="https://www.cursor.so/">Cursor</a></p><p>可以免注册免登录，不需要魔法使用ChatGPT3.5接口生成代码，检查bug等</p><blockquote><p><a href="http://www.dtmao.cc/ios/69182.html">Cursor：一个集成GPT-4的IDE开发工具</a></p></blockquote><p>3、<a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui</a></p><p>一款小巧轻便的java反编译工具，支持对整个目录内的文件进行反编译，并且还原度很高</p><p>4、<a href="https://www.shenzhuohl.com/">神卓互联</a></p><p>内网穿透工具，上手简单，服务较稳定</p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网盘资源整合</title>
      <link href="/posts/21513810.html"/>
      <url>/posts/21513810.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、资源汇总"><a href="#一、资源汇总" class="headerlink" title="一、资源汇总"></a>一、资源汇总</h2><p><a href="https://tuo.icodeq.com/">学习资源仓</a></p><p><a href="https://www.aliyundrive.com/s/7p9tppJHqpn">3000T资源合集</a></p><p><a href="https://aliyun.panpanr.top/">阿里云盘资源导航</a></p><p><a href="https://tuo.icodeq.com/quark">资源小海洋</a></p><p><a href="https://docs.qq.com/sheet/DVXp5Q2dRTVRXb2VS?tab=oz0lgd">阿里土豆</a></p><p><a href="https://docs.qq.com/sheet/DSlZmRHNtREpnaFFO?tab=BB08J2">壹起共享</a></p><p><a href="https://www.kdocs.cn/l/cp92XFzxABRO">精品课程资源</a></p><p><a href="https://www.aliyundrive.com/s/6Aq37hB6kqr/folder/635e173a145adc1ee1c54da8840469a48e903ea0">影视放映厅</a></p><p><a href="https://vip.yx1018.com/">考试教育资源</a></p><h2 id="二、学习"><a href="#二、学习" class="headerlink" title="二、学习"></a>二、学习</h2><h3 id="编程相关"><a href="#编程相关" class="headerlink" title="编程相关"></a>编程相关</h3><p><a href="https://www.aliyundrive.com/s/7ScWBijmR2V/folder/636dcfeebccf6d1092c04208924af385de46a1e4">开发编程合集</a></p><p><a href="https://www.aliyundrive.com/s/PJqi5XRUvXa/folder/62972cdfcb6e33d2f1284929a84682eaf0da0760">编程开发相关资源</a></p><p><a href="https://www.aliyundrive.com/s/oP8JBzSdn9i/folder/6380bb34321af155e5a140cb9c8a6f8dbcac377a">编程资源合集</a></p><p><a href="https://www.aliyundrive.com/s/PJqi5XRUvXa/folder/6379cb084a530da97a4247dd8c865c2222f8b052">马士兵教育136课</a></p><p><a href="https://www.aliyundrive.com/s/eP7DqmJ5nR7">马士兵腾讯视频集课程</a></p><p><a href="https://www.aliyundrive.com/s/7ScWBijmR2V/folder/61a193386b174a9f1be94e93b1868ba5a61e0f86">拉钩教育后端视频课程</a></p><p><a href="https://www.aliyundrive.com/s/G6e3wZb6dP9">JAVA资料汇总</a></p><p><a href="https://www.aliyundrive.com/s/d3g5JQ8CJkQ">Python资料汇总</a></p><p><a href="https://www.aliyundrive.com/s/J58d9VDqY83">编程资源库</a></p><p><a href="https://www.aliyundrive.com/s/KMnJ4z7YaMw">项目实战专区(以尚硅谷项目为主)</a></p><p><a href="https://www.aliyundrive.com/s/7ScWBijmR2V">编程开发大合集</a></p><p><a href="https://docs.qq.com/sheet/DSlZmRHNtREpnaFFO?tab=od4bej">极客文章精选</a></p><p><a href="https://www.aliyundrive.com/s/7ScWBijmR2V/folder/636a5f3ca017ebf1599a4c6f8bc0c8253599fa90">极客时间视频合集</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb5a240ec8182d53f45e8a147c15703f1b8f5">鱼皮-2021最新思维导图</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb6367f0cc8763613472688e4e32176a82453">猪厂内部U设计资料包</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb58f13f4e6609bf346e89b91db94fd9dd61d">优达学城：前端工程师</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb19dcbf4dca054f84427941b2e05af8146a7">最新Python6.0特训就业班2020年全新顶目(159G)</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bbdbfb1ed3b1f26534788a57600e83d41e320">少儿编程资料</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bbdbf42fffc04b8524ed4be3297c5c8f22dd6">有道少儿编程入门训练营</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb925d57092b1fa344d568d3f6128c175b0c0">算法与数据结构全阶班</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb931c628550a9bcc49108e1e1a6289cb3f85">极客大学-算法训练营第四期</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb8eb54fae2c6717a4836ba76c37b765e9a31">前端高手进阶</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb5b64ced44d801924893adfb28c8d8bdb8ef">爬虫学习笔记</a></p><h3 id="AI相关"><a href="#AI相关" class="headerlink" title="AI相关"></a>AI相关</h3><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb60d76354d36c6ca467f9b23260e8e696db9">华为5天玩转A1实战营培训</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bbc487d03bd45d3ad4b1aaaee8a9dc011b156">幻颜ai换脸-zscc</a></p><h3 id="英语相关"><a href="#英语相关" class="headerlink" title="英语相关"></a>英语相关</h3><p><a href="https://www.aliyundrive.com/s/JgWbuddN4Wu/folder/61ae2115a7b71333a19245a9befeab062d565948">英语资源汇总</a></p><p><a href="https://pan.baidu.com/s/1SsebUiJNWQRfBman3M1zew?pwd=aqqr">四六级资源实时更新</a></p><p><a href="https://www.aliyundrive.com/s/k3CNHXVsxAG/folder/62b81778725cc53579b04cb9b76a274457ceb6b7">英语专四专八</a></p><p><a href="https://tuo.icodeq.com/English">英语盘</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb5a3104978b6e7dc496e8a01a3477368c76c">CG人学习笔记（分版）</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb619f52bc9a3bcfe487ba46dc5024776536d">谢c!关于财富的12次认知升级：重新理解财富，停止无效的努力</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb63e0ca0c86f690447d49d169c197f53d7b4">零基础iPad插画课</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb5c0584145a724864bb594a13445c0bea1e3">家装手册</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bb5c0af6a18f2eae0441c922a7d24ee55dec5">川E.股票入门课（新版）</a></p><p><a href="https://www.aliyundrive.com/s/51ux1Wc1jne/folder/626bbc998a4c3ca0fd70499db7e6c80bf6fe2b9b">室内家居装潢施工工艺视频教程</a></p><h2 id="三、影视娱乐"><a href="#三、影视娱乐" class="headerlink" title="三、影视娱乐"></a>三、影视娱乐</h2><p><a href="https://www.aliyundrive.com/s/PJqi5XRUvXa/folder/62c06bd230993a5f7d3f4b0fad19dafd1ca98e6b">阿里云盘115T影视资源合集.xls</a></p><p><a href="https://www.aliyundrive.com/s/8wc8ZT2n3Rb">豆瓣top250</a></p><p><a href="https://www.aliyundrive.com/s/vN5pjDYdtET/folder/62f9a819704fca9bd3444fd19d9e98b138256782">影视合集</a></p><h2 id="四、软件"><a href="#四、软件" class="headerlink" title="四、软件"></a>四、软件</h2><p><a href="https://www.ruancang.net/">软仓</a>:Adobe、CAD等软件大全</p><p><a href="https://www.ghxi.com/?ref=xike.store&btwaf=28054969">果核剥核</a>: 各种使用软件及补丁包</p><p><a href="https://www.fenxm.com/">分享迷</a>： 各种TV软件及其他软件分享</p><p><a href="https://www.hezibuluo.com/">盒子部落</a></p><p><a href="https://www.souruan.xyz/index.html">搜软</a>:手机应用搜索平台</p><h2 id="五、好站推荐"><a href="#五、好站推荐" class="headerlink" title="五、好站推荐"></a>五、好站推荐</h2><p><a href="https://www.likebookmark.com/">喜欢书签</a></p><h2 id="六、导航"><a href="#六、导航" class="headerlink" title="六、导航"></a>六、导航</h2><p><a href="http://cxy521.com/">程序员导航</a></p><h2 id="七、独立盘"><a href="#七、独立盘" class="headerlink" title="七、独立盘"></a>七、独立盘</h2><p><a href="http://xikestore.ysepan.com/">禧客小店</a></p><p><a href="http://dnmjun.ysepan.com/">柠檬的资源库</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网盘资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软考资料整理</title>
      <link href="/posts/f70539f6.html"/>
      <url>/posts/f70539f6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://pan.baidu.com/s/1rDBi6XrKxI12dHk_koN7kw?pwd=9999">软考资料分享</a></p><p><a href="https://www.acfun.cn/v/ac33539204">软考高级系统架构师</a></p><p><a href="https://www.ruankao.org.cn/">软考官网</a></p><p><a href="https://pan.baidu.com/s/1yKJQKG1TAdliqMoMqKB1aA?pwd=zuem">软考中项</a></p><p><a href="https://www.aliyundrive.com/s/1ihbAFrLcWN">信息系统项目管理师教程-第四版.pdf</a>  提取码：pb93</p><p><a href="https://space.bilibili.com/91286799">B站博主zst_2001</a></p><p><a href="https://www.aliyundrive.com/s/sxZR5EW3qyz">软考中级-软件设计师-历年真题，答案+解析</a> 提取码：60ho</p><p><a href="https://www.yuque.com/daitou-8qnsv/qqsvxx/xbgtkg">软考中级笔记</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作无法完成，因为文件已在其他应用打开解决办法</title>
      <link href="/posts/a93c80f6.html"/>
      <url>/posts/a93c80f6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在删除某个文件时经常遇到文件在其他应用打开导致无法删除的情况</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230415110543408-1317219139.png" alt="image-20230415110544253"></p><p>此处提示的很明显时有文件在Word中打开了，只要把响应的文档关闭就行了</p><p>但是很多时候我们并不知道被打开的文件或程序是在哪里打开的</p><p>可以先复制你要删除的目录位置</p><p>然后按 Ctrl+Shift+Esc&#x2F; Ctrl+Alt+Del 打开资源管理器，选到性能一栏</p><p>点击右边三个点，有个资源监视器</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230415111053263-596248868.png" alt="image-20230415111055746"></p><p>打开资源监视器，在关联的句柄输入栏里输入刚才复制的文件目录位置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230415111255097-1427333025.png" alt="image-20230415111257568"></p><p>然后等待检索关联的服务，结束除 <code>explorer.exe</code>以外的其他服务即可</p><p>注意，explorer.exe 对应的是资源管理器的服务，若该服务被结束，则电脑桌面会黑屏或者白屏</p><p>若不小心关闭了这个服务，可以按快捷键再次打开资源管理器，运行新任务恢复</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230415111704073-679271389.png" alt="image-20230415111706539"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片防盗链导致图片无法加载解决方法</title>
      <link href="/posts/c6e32250.html"/>
      <url>/posts/c6e32250.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们在博客的时候可能最烦心的就是图片处理了</p><p>比如我在本地写好博客后把文章发布到博客园，或者CSDN或则和其他平台</p><p>但是文章中用到的图片需要一个个手动上传，费时费力</p><p>而且由于<a href="https://zhuanlan.zhihu.com/p/375235796">图片防盗链</a>的存在，各博客平台上的图片资源又不能直接引用</p><p><img src="https://s1.vika.cn/space/2023/04/11/868dbd04598c4b9fb7bebfb12ecfd5d5" alt="image-20230411222903960"></p><p>解决方案也很简单，只需要在博客生成的html页面头文件中引入一下代码片段即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>以hexo博客为例（我的主题是ayer，不同主题存放位置有细微差别）</p><p>打开主题资源目录，一般在layout目录下找 <code>header.pug</code> 或者 <code>header.ejs</code> 文件</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230512214510881-439236974.png" alt="image-20230512214510287"></p><p>若为 <code>header.ejs</code> 添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230512214858721-1826705893.png" alt="image-20230512214859593"></p><p>若为 <code>header.pug</code> 则需要添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meta(name=&quot;referrer&quot; content=&quot;no-referrer&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202312/2233039-20231227133323809-1633025113.png" alt="image-20231227133320157"></p><p>然后重新生成以下网页内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>可以发现生成的网页文件中已经包含刚才添加的这行代码</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230512215212057-1024376811.png" alt="image-20230512215212845"></p><p>此时再重启服务，所有图片就能正常预览了</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202305/2233039-20230512215412431-1560064676.png" alt="image-20230512215413219"></p><p>当然，引用其他网站的资源其实是很一件很不道德的事情，尤其是盗用他人图片的</p><p>推荐一个更好的解决方案，那就是使用<a href="https://zhuanlan.zhihu.com/p/403554101">图床</a></p><p><strong>参考</strong></p><blockquote><p><a href="https://www.jianshu.com/p/5b58ecce6443">解决hexo引入图床，手机和web不显示图片的问题</a></p></blockquote><p><strong>相关推荐</strong></p><blockquote><p><a href="https://www.cnblogs.com/an-shiguang/p/17305789.html">基于博客园搭建Typora免费图床</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17305788.html">基于CSDN搭建Typora免费图床</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17308291.html">PicGo搭建免费图床实现Typora图片自动上传</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17233460.html">Typora 图片自动上传至腾讯云Cos 服务</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 防盗链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CSDN搭建Typora免费图床</title>
      <link href="/posts/94af4269.html"/>
      <url>/posts/94af4269.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="never" /><p>本地需要有<a href="https://www.python.org/downloads/">python3</a>环境</p><p>按照  <a href="https://pypi.org/project/requests/">requests</a>、<a href="https://pypi.org/project/psutil/">psutil</a>、 <a href="https://pypi.org/project/requests-toolbelt/">requests-toolbelt</a> 依赖，若已安装可忽略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install psutil</span><br><span class="line">pip install requests-toolbelt</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3649821ea9954a43b038ce9719bc5cff.png" alt="image-20230410172811214"></p><p>复制以下代码到一个.py的文件中,如我本地命名为 upd_pic_to_csdn.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@文件        :csdnUpload.py</span></span><br><span class="line"><span class="string">@时间        :2022/11/24 12:48:46</span></span><br><span class="line"><span class="string">@作者        :tx</span></span><br><span class="line"><span class="string">@版本        :2.0</span></span><br><span class="line"><span class="string">@说明        :Typora利用csdn作为图床</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> http.cookiejar <span class="keyword">as</span> cookielib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests_toolbelt <span class="keyword">import</span> MultipartEncoder</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">os.chdir(os.path.expanduser(<span class="string">&#x27;~&#x27;</span>))  <span class="comment"># 这是打包版本的代码</span></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">show_code</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.get(self.url)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(BytesIO(response.content))  <span class="comment"># 打开图片，返回PIL image对象</span></span><br><span class="line">        img.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">IsLogin</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    文件读取cookie，检测cookie是否合法。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session.cookies = cookielib.LWPCookieJar(filename=<span class="string">&quot;.cookie/csdn.txt&quot;</span>)</span><br><span class="line">        session.cookies.load()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改地方</span></span><br><span class="line">        url = <span class="string">&quot;https://imgservice.csdn.net/direct/v1.0/image/upload?type=blog&amp;rtype=markdown&amp;x-image-template=&amp;x-image-app=direct_blog&amp;x-image-dir=direct&amp;x-image-suffix=png&quot;</span></span><br><span class="line">        response = session.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.json()[<span class="string">&#x27;msg&#x27;</span>] == <span class="string">&quot;success&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    csdn自动登录，同时保存cookie</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    response = session.get(<span class="string">&#x27;https://open.weixin.qq.com/connect/qrconnect?appid=wx0ae11b6a28b4b9fc&amp;scope=snsapi_login&amp;redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Fv1%2Fregister%2FpcAuthCallBack%3FpcAuthType%3Dweixin&amp;state=csdn&amp;login_type=jssdk&amp;self_redirect=default&amp;style=white&amp;href=https://csdnimg.cn/release/passport/history/css/replace-wx-style.css&#x27;</span>, verify=<span class="literal">False</span>)</span><br><span class="line">    uuid = re.findall(</span><br><span class="line">        <span class="string">&#x27;&lt;img class=&quot;qrcode lightBorder&quot; src=&quot;(.*?)&quot;&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">    img_url = <span class="string">&#x27;https://open.weixin.qq.com&#x27;</span> + uuid</span><br><span class="line">    t = show_code(img_url)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line">    uuid = uuid.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    url = <span class="string">&#x27;https://lp.open.weixin.qq.com/connect/l/qrconnect?uuid=&#x27;</span>+uuid</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url, verify=<span class="literal">False</span>)</span><br><span class="line">        code = re.findall(<span class="string">&quot;window.wx_code=&#x27;(.*?)&#x27;&quot;</span>, response.text)</span><br><span class="line">        <span class="keyword">if</span> code != [<span class="string">&#x27;&#x27;</span>]:</span><br><span class="line">            <span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():  <span class="comment"># 遍历当前process</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> proc.name() == <span class="string">&quot;Microsoft.Photos.exe&quot;</span>:</span><br><span class="line">                        proc.kill()  <span class="comment"># 关闭该process</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://passport.csdn.net/v1/register/pcAuthCallBack?pcAuthType=weixin&amp;code=%s&amp;state=csdn&#x27;</span> % code[<span class="number">0</span>]</span><br><span class="line">    session.get(url)</span><br><span class="line">    session.cookies.save()</span><br><span class="line">    IsLogin()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">UploadPic</span>(<span class="params">picList: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    图片上传</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pic <span class="keyword">in</span> picList:</span><br><span class="line">        <span class="comment"># 获得图片授权</span></span><br><span class="line">        url = <span class="string">&quot;https://imgservice.csdn.net/direct/v1.0/image/upload?type=blog&amp;rtype=markdown&amp;x-image-template=&amp;x-image-app=direct_blog&amp;x-image-dir=direct&amp;x-image-suffix=png&quot;</span></span><br><span class="line">        response = session.get(url)</span><br><span class="line">        key = response.json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        upload_url = key[<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">        fields = &#123;</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: key[<span class="string">&#x27;filePath&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;policy&#x27;</span>: key[<span class="string">&#x27;policy&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;OSSAccessKeyId&quot;</span>: key[<span class="string">&#x27;accessId&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;success_action_status&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">            <span class="string">&quot;signature&quot;</span>: key[<span class="string">&#x27;signature&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;callback&quot;</span>: key[<span class="string">&#x27;callbackUrl&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;file&#x27;</span>: (os.path.basename(pic), <span class="built_in">open</span>(pic, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&quot;image/png&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        multipart_encoder = MultipartEncoder(</span><br><span class="line">            fields, boundary=<span class="string">&#x27;-----------------------------&#x27;</span> + <span class="built_in">str</span>(random.randint(<span class="number">1e28</span>, <span class="number">1e29</span> - <span class="number">1</span>)))</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;content-Type&#x27;</span>: multipart_encoder.content_type,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(upload_url, headers=headers,</span><br><span class="line">                            data=multipart_encoder, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> (res.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="built_in">print</span>(res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;imageUrl&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># session.proxies = &#123;&quot;http&quot;: &quot;http://127.0.0.1:8080&quot;,</span></span><br><span class="line">    <span class="comment">#                    &quot;https&quot;: &quot;http://127.0.0.1:8080&quot;&#125;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;.cookie&quot;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&quot;.cookie&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(<span class="string">&quot;.cookie&quot;</span>, <span class="string">&quot;csdn.txt&quot;</span>)):</span><br><span class="line">        tmep_f = <span class="built_in">open</span>(os.path.join(<span class="string">&quot;.cookie&quot;</span>, <span class="string">&quot;csdn.txt&quot;</span>), <span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">        tmep_f.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> IsLogin():</span><br><span class="line">        Login()</span><br><span class="line">    UploadPic(sys.argv[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开Typora 文件  &#x3D;》 偏好设置 &#x3D;》图像 设置界面，按照下图所示进行配置</p><p><img src="https://img-blog.csdnimg.cn/89fded2aee974391a4cec07bf8d2135c.png" alt="image-20230410172945466"></p><p>注意修改命令中的python文件所在目录位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python D:\Files\Typora\upd_pic_to_csdn.py</span><br></pre></td></tr></table></figure><p>设置好后点击验证图片上传选项进行验证服务是否正常</p><p>首次执行命令会弹出微信扫码登录的二维码，扫描登录即可</p><p>查看验证结果</p><p><img src="https://img-blog.csdnimg.cn/7799646cce4b46f5b478bc41386ecd6d.png" alt="image-20230410171816256"></p><p>注意</p><p>图片有违规校验，例如二维码</p><p><img src="https://img-blog.csdnimg.cn/35d06ac00e864979aef2c0b7f4cd5f15.png" alt="image-20230410174011489"></p><p>另外，CSDN的图片有<a href="https://zhuanlan.zhihu.com/p/375235796">防盗链</a>，在其他网站引用图片可能无法加载</p><p><img src="https://s1.vika.cn/space/2023/04/11/868dbd04598c4b9fb7bebfb12ecfd5d5" alt="image-20230411222903960"></p><p><strong>相关参考</strong></p><blockquote><p><a href="https://blog.csdn.net/chouzhou9701/article/details/121113255">typora使用CSDN图床</a></p></blockquote><p><strong>相关推荐</strong></p><blockquote><p><a href="https://www.cnblogs.com/an-shiguang/p/17305789.html">基于博客园搭建Typora免费图床</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17308291.html">PicGo搭建免费图床实现Typora图片自动上传</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17308295.html">图片防盗链导致图片无法加载解决方法</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17233460.html">Typora 图片自动上传至腾讯云Cos 服务</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> 图床 </tag>
            
            <tag> CSDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于博客园搭建Typora免费图床</title>
      <link href="/posts/c5bcab70.html"/>
      <url>/posts/c5bcab70.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本地需要有<a href="https://www.python.org/downloads/">python3</a>环境，复制以下代码到一个.py的文件中,如我本地命名为 upd_pic_to_cnblog.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> xmlrpc.client <span class="keyword">as</span> client</span><br><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"></span><br><span class="line">CONFIGS = &#123;</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;blogID&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image</span>(<span class="params">image_path</span>):</span><br><span class="line">    image_mimetype = mimetypes.guess_type(image_path, <span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    image_name = os.path.basename(image_path)</span><br><span class="line">    image_bits = client.Binary(<span class="built_in">open</span>(image_path, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">    image = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: image_name,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: image_mimetype,</span><br><span class="line">        <span class="string">&quot;bits&quot;</span>: image_bits,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_image</span>(<span class="params">image_path</span>):</span><br><span class="line">    image = get_image(image_path)</span><br><span class="line">    server = client.ServerProxy(CONFIGS.get(<span class="string">&quot;url&quot;</span>))</span><br><span class="line">    url = server.metaWeblog.newMediaObject(CONFIGS.get(<span class="string">&quot;blogID&quot;</span>), CONFIGS.get(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">                                           CONFIGS.get(<span class="string">&quot;password&quot;</span>), image).get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    args = <span class="built_in">iter</span>(argv)</span><br><span class="line">    <span class="built_in">next</span>(args)</span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(upload_image(image_path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>将代码中 CONFIGS 参数修改为自己<a href="https://i.cnblogs.com/settings">博客园后台</a>相关参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONFIGS = &#123;</span><br><span class="line">    &quot;url&quot;: &quot;&quot;,</span><br><span class="line">    &quot;username&quot;: &quot;&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;&quot;,</span><br><span class="line">    &quot;blogID&quot;: &quot;&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户id可以通过自己的博客园地址查看<img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230410162009461-2059378039.png" alt="image-20230410162011459"></p><p>账号信息可以在其他设置中查看，需要允许 MetaWeblog 博客客户端访问</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230410162414980-1436891110.png" alt="image-20230410162416702"></p><p>修改后如下所示</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230410162854327-972406534.png" alt="image-20230410162856170"></p><p>打开Typora 文件  &#x3D;》 偏好设置 &#x3D;》图像 设置界面，按照下图所示进行配置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230410163243225-258855258.png" alt="image-20230410163245197"></p><p>注意修改命令中的python文件所在目录位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python D:\Files\Typora\upd_pic_to_cnblog.py</span><br></pre></td></tr></table></figure><p>设置好后点击验证图片上传选项进行验证服务是否正常</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202304/2233039-20230410163947428-1866006684.png" alt="image-20230410163949320"></p><p>需要注意的是，博客园图片有<a href="https://zhuanlan.zhihu.com/p/375235796">防盗链</a>，在其他网站引用图片可能无法加载</p><p><img src="https://s1.vika.cn/space/2023/04/11/b964fe9e047149a08a7194d8025b0191" alt="image-20230411223535238"></p><p><strong>相关参考</strong></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/563600312">使用博客园做MarkDown图床</a></p></blockquote><p><strong>相关推荐</strong></p><blockquote><p><a href="https://www.cnblogs.com/an-shiguang/p/17305788.html">基于CSDN搭建Typora免费图床</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17308291.html">PicGo搭建免费图床实现Typora图片自动上传</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17308295.html">图片防盗链导致图片无法加载解决方法</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17233460.html">Typora 图片自动上传至腾讯云Cos 服务</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> 图床 </tag>
            
            <tag> 博客园 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo搭建免费图床实现Typora图片自动上传</title>
      <link href="/posts/a10c0d78.html"/>
      <url>/posts/a10c0d78.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、下载并PicGo"><a href="#一、下载并PicGo" class="headerlink" title="一、下载并PicGo"></a>一、下载并<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a></h1><blockquote><p><a href="http://cpasion-docs.gitee.io/picgo-doc/zh/guide/">PicGo官方文档</a></p></blockquote><h1 id="二、PicGo图床设置"><a href="#二、PicGo图床设置" class="headerlink" title="二、PicGo图床设置"></a>二、PicGo图床设置</h1><h2 id="2-1-GitHub图床设置"><a href="#2-1-GitHub图床设置" class="headerlink" title="2.1 GitHub图床设置"></a>2.1 GitHub图床设置</h2><p>首先需要创建一个仓库用于存储图片</p><p>点击头像 -》Settings </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145449928-526337598.png" alt="image-20230410201133720"></p><p>找到 Developer settings</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145632058-1221969082.png" alt="image-20230410211207623"></p><p>创建一个 token </p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145731338-2117774436.png" alt="image-20230410211219390"></p><p>token有效期设置为永久，即 No expiration，Select scopes设置勾选repo</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145748060-1840901635.png" alt="image-20230410211234387"></p><p>创建好后会自动生成对应的令牌，请复制并保存该令牌，此令牌仅显示一次</p><p>按照下图所示进行配置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145806017-937157488.png" alt="image-20230410211301847"></p><p>仓库名为github仓库地址</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145824994-874743511.png" alt="image-20230410211312081"></p><p>分支默认为master</p><p>Token即刚才github创建的token</p><p>指定存储路径即上传到仓库的文件路径，为方便管理，一个为该路径设置个日期如 img&#x2F;2023&#x2F;04&#x2F;</p><p>自定义域名可以使用cdn加速地址</p><p><code>https://cdn.staticaly.com/gh/用户名/仓库名@master</code></p><h2 id="2-2-vika维格表图床设置"><a href="#2-2-vika维格表图床设置" class="headerlink" title="2.2 vika维格表图床设置"></a>2.2 vika维格表图床设置</h2><p>注册并登录 <a href="https://vika.cn/?inviteCode=74884167">vika</a>，注册的时候可以填写一下我的邀请码  <code>74884167</code> ，双方各得 1000 V币</p><p>在工作目录新建空白维格表</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145844393-996799073.png" alt="image-20231118145844681"></p><p>头像 -》 个人设置 -》基本信息 -》 邮箱绑定，绑定邮箱后才有更到操作权限</p><p>点击头像 -》个人设置 -》开发者配置 可以查看自己的 API Token</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145851489-1722902137.png" alt="image-20231118145851843"></p><p>打开PicGo，在插件设置里搜索 vikadata 并安装</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145858451-407850319.png" alt="image-20231118145858747"></p><p>安装完成后点击小齿轮进行配置，需要API Token 和 维格表ID</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145905697-1122737241.png" alt="image-20231118145906010"></p><p>打开刚才创建的维格表，点击上方的API可以查看当前维格表的API数据</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145912238-321062677.png" alt="image-20231118145912507"></p><p>在第二栏Get获取里可以看到当前维格表的API信息，可以点击显示API Token</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145920129-548489616.png" alt="image-20231118145920329"></p><h2 id="2-3-SM-MS"><a href="#2-3-SM-MS" class="headerlink" title="2.3 SM.MS"></a>2.3 SM.MS</h2><p>每个用户有5G免费空间，图片上传及加载速度略慢</p><p>注册并登录 <a href="https://sm.ms/">SM.MS</a></p><p>注册后打开控制台</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145927343-297005866.png" alt="image-20231118145927651"></p><p>打开API Token 并创建</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145934295-2015353712.png" alt="image-20231118145934542"></p><p>将生成的Token填写到PicGo中，备用上传域名填写 <code>smms.app</code> 否则会上传失败</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145942382-621116632.png" alt="image-20231118145942649"></p><p>PicGo需要升级到 2.3.1版本，否则不支持备用上传域名设置，下图为官方升级公告</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145949226-854349132.png" alt="image-20231118145949466"></p><h2 id="2-4-七牛云"><a href="#2-4-七牛云" class="headerlink" title="2.4 七牛云"></a>2.4 七牛云</h2><p>注册认证后有10G永久免费空间，每月10G国内和10G国外流量</p><p>需要绑定域名才能使用，注册送30天测试域名，30天后测试域名会被回收</p><p>注册并登录<a href="https://portal.qiniu.com/">七牛云</a></p><p>绑定邮箱并实名认证</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118145957757-439342520.png" alt="image-20231118145957956"></p><p>打开对象存储Kodo界面</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150003865-1874076209.png" alt="image-20231118150004128"></p><p>新建空间，访问权限选择公开</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150009527-1902721469.png" alt="image-20231118150009774"></p><p>PicGo设置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150015155-342973609.png" alt="image-20231118150015465"></p><p>AccessKey 和 SecreKey 可以在密钥管理中获取</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150020941-1404137474.png" alt="image-20231118150021220"></p><p>Bucket即空间名称，访问域名地址为 CDN测试域名，该域名一个月后会被回收</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150026700-927233752.png" alt="image-20231118150026791"></p><p>存储区域</p><table><thead><tr><th>存储区域 Region</th><th>区域 Region ID</th></tr></thead><tbody><tr><td>华东-浙江</td><td>z0</td></tr><tr><td>华东-浙江2</td><td>cn-east-2</td></tr><tr><td>华北-河北</td><td>z1</td></tr><tr><td>华南-广东</td><td>z2</td></tr></tbody></table><p>详情见官方文档说明</p><blockquote><p><a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">区域和访问域名</a></p></blockquote><h2 id="2-5-Gitee图床"><a href="#2-5-Gitee图床" class="headerlink" title="2.5 Gitee图床"></a>2.5 Gitee图床</h2><p>Gitee官方不允许用Gitee搭建个人图床，会有封号风险</p><blockquote><p><a href="https://www.zhihu.com/question/524094354/answer/2408710720">有什么好用的图床推荐，gitee图床挂了吗？</a></p></blockquote><h1 id="三、PicGo上传测试"><a href="#三、PicGo上传测试" class="headerlink" title="三、PicGo上传测试"></a>三、PicGo上传测试</h1><p>可以在上传区进行测试，此处以GitHub图床为例</p><p>上传成功后会自动将图片路径复制到剪切板</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150045432-592682410.png" alt="image-20230410211320863"></p><p>可以在相册里查看已经上传的图片或者在github仓库中进行查看</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150103845-424713520.png" alt="image-20230410211327724"></p><p>若文件过大可以用在线压缩工具将图片进行压缩后上传</p><blockquote><p><a href="https://tinypng.com/">免费下线图片压缩工具</a></p><p><a href="https://imagecompressor.com/zh/">图片无损压缩</a></p><p><a href="https://www.iloveimg.com/resize-image">修改图片尺寸工具</a></p></blockquote><p>推荐启用开机自启和时间戳重命名</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150110734-172991659.png" alt="image-20231118150111028"></p><h1 id="四、Typora设置"><a href="#四、Typora设置" class="headerlink" title="四、Typora设置"></a>四、Typora设置</h1><p>按照如图所示进行配置，PicGo路径PicGo程序所在位置</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150128228-716434699.png" alt="image-20230410210409320"></p><p>点击验证图片上传选线进行验证</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231118150146409-1068611024.png" alt="image-20230410210353344"></p><h1 id="五、参考及推荐"><a href="#五、参考及推荐" class="headerlink" title="五、参考及推荐"></a>五、参考及推荐</h1><p>相关参考</p><blockquote><p><a href="https://www.bilibili.com/video/BV18G411G7ah">【最新博客图床方案】国内免费高速图床 | 最新github图床 | 解决jsdelivr的问题 |</a></p></blockquote><p>相关推荐</p><blockquote><p><a href="https://www.cnblogs.com/an-shiguang/p/17305789.html">基于博客园搭建Typora免费图床</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17305788.html">基于CSDN搭建Typora免费图床</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17233460.html">Typora 图片自动上传至腾讯云Cos 服务</a></p><p><a href="https://www.cnblogs.com/an-shiguang/p/17308295.html">图片防盗链导致图片无法加载解决方法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware提示模块Disk启动失败，未能启动虚拟机</title>
      <link href="/posts/a782cf9b.html"/>
      <url>/posts/a782cf9b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于我的虚拟机是非正常关闭，再次启动时出现如下错误</p><p><img src="https://s1.vika.cn/space/2023/04/07/dafacc1e3e3c41f28f6d0cd93232f3ee" alt="image-20230407132707070"></p><p>找到该文件所在目录.vmx后缀的文件，用文本编辑器进行编辑</p><p><img src="https://s1.vika.cn/space/2023/04/07/97d7e6b5124e4577aa09a1d9771c56ad" alt="image-20230407133031761"></p><p>搜索 <code>vmci0.present</code> 将 TURE 改为 FALSE</p><p><img src="https://s1.vika.cn/space/2023/04/07/c848d5e961874071bab00ea9123a0449" alt="image-20230407132949388"></p><p>删除错误提示文件所在目录  .lck 结尾的文件，重新启动虚拟机即可</p><p><img src="https://s1.vika.cn/space/2023/04/07/54ef265b56f049e4bfed9791fe40cdde" alt="image-20230407133354750"></p><p>相关参考</p><blockquote><p><a href="https://www.cnblogs.com/sylar5/p/12051681.html">VMWare虚拟机显示模块“Disk”启动失败</a></p><p><a href="https://blog.csdn.net/qq_44913716/article/details/122582942">虚拟机报错模块“Disk”启动失败。 未能启动虚拟机</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基于LeanCloud搭建评论功能</title>
      <link href="/posts/6cebdfc9.html"/>
      <url>/posts/6cebdfc9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、注册LeanCloud</p><p><a href="https://console.leancloud.cn/">LeanCloud官网</a></p><p>2、实名认证</p><p>使用LeanCloud功能需要进行实名认证</p><p><img src="https://s1.vika.cn/space/2023/04/03/3da5b00b5b3747c181825bedf039b4a1" alt="image-20230403151923032"></p><p>3、验证邮箱</p><p><img src="https://s1.vika.cn/space/2023/04/03/4602082a323645fbb8eb136d85cb0463" alt="image-20230403152408478"></p><p>4、创建应用</p><p><img src="https://s1.vika.cn/space/2023/04/03/3d156ba42eec4d6ab8a9c28311e47b71" alt="image-20230403153255119"></p><p>5、查看应用凭证</p><p><img src="https://s1.vika.cn/space/2023/04/03/9270f9673b98445abd73f1a4ebc1e11e" alt="image-20230403154228598"></p><p>6、修改当前主题配置文件中的 leancloud 配置</p><p><img src="https://s1.vika.cn/space/2023/04/03/9fee9c82d8ed41d194e23d5a64ed3c3e" alt="image-20230403160353507"></p><p>8、绑定域名</p><p><img src="https://s1.vika.cn/space/2023/04/03/984cfb258a0e43ad84b63949fe23380e" alt="image-20230403154840679"></p><p>9、重新部署服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 生成网页</span><br><span class="line">hexo g</span><br><span class="line"># 推送到远程服务</span><br><span class="line">hexo d</span><br><span class="line"># 启动服务</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>10、测试</p><p><img src="https://s1.vika.cn/space/2023/04/03/04fffaf6f68c440085c733147c5047ad" alt="image-20230403160645540"></p><p>11、查看api提交记录</p><p><img src="https://s1.vika.cn/space/2023/04/03/1c3ec4f58c4e48a8a513e95368ceca71" alt="image-20230403161415517"></p><p>相关参考</p><blockquote><p><a href="https://valine.js.org/">Valine官网</a></p><p><a href="https://www.jianshu.com/p/0b4cf14663f7">hexo添加评论功能</a></p><p><a href="https://moonshuo.cn/posts/51359.html">Hexo中Buttefly主题Valine评论系统配置以及美化（七）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> LeanCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git推送提示the remote end hung up unexpectedly错误</title>
      <link href="/posts/92786f92.html"/>
      <url>/posts/92786f92.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、问题描述</p><p>由于我提交文件过大，往远程推送时提示一下错误</p><p><img src="https://s1.vika.cn/space/2023/04/03/c3f20dfe25d84015a21374400acee2a8" alt="image-20230403114753854"></p><p>经过排查，发现待推送的文件中有个压缩包文件很大，而gitee默认仅支持 100M</p><p><img src="https://s1.vika.cn/space/2023/04/03/794256f2d86444c3a9c3a75b62773adb" alt="image-20230403115137532"></p><p>经过各种百度，都是说设置一下缓存大小就行了</p><blockquote><p><a href="https://www.jianshu.com/p/3f2fe584782e">git 推拉出现 “fatal: The remote end hung up unexpectedly” 解决方案</a></p></blockquote><p>但是我改了一个很大的数值之后提交仍然报错</p><p>最后干脆重新拉项目，把那个文件忽略，重新提交然后就推送成功了</p><p><strong>最新解决方案</strong></p><blockquote><p><a href="https://www.cnblogs.com/an-shiguang/p/17840677.html">Git因文件过大导致提交失败解决方案</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为右键菜单添加用XX软件打开的快捷选项</title>
      <link href="/posts/dfefc72.html"/>
      <url>/posts/dfefc72.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="为右键菜单添加用XX软件打开的快捷选项"><a href="#为右键菜单添加用XX软件打开的快捷选项" class="headerlink" title="为右键菜单添加用XX软件打开的快捷选项"></a>为右键菜单添加用XX软件打开的快捷选项</h1><p><img src="https://s1.vika.cn/space/2023/03/29/1577256905f445cf84f3aa1a7ce17fde" alt="image-20230329214529920"></p><h2 id="1、在注册表中添加快捷指定"><a href="#1、在注册表中添加快捷指定" class="headerlink" title="1、在注册表中添加快捷指定"></a>1、在注册表中添加快捷指定</h2><p>Win + R 打开运行窗口，输入 <code>regedit</code> 回车打开注册表菜单</p><p><img src="https://s1.vika.cn/space/2023/03/29/3f78bc8b9b3b4d0191191f139a5959e4" alt="image-20230329214140888"></p><p>找到 <code>HKEY_CLASSES_ROOT\*\shell</code> 目录 </p><p>可以看到当前已存在的快捷操作指令，如果想要去除，直接删除对应的目录即可</p><p><img src="https://s1.vika.cn/space/2023/03/29/5fc0a36c41d34bcca11e5ab3f4b11528" alt="image-20230329214328416"></p><p>在 shell 目录下新建一个项</p><p>重命名为你想要显示的名称，例如我要添加Notpad–的打开方式，命名为 Open with Notpad–</p><p><img src="https://s1.vika.cn/space/2023/03/29/92c567b2d5d04938a3fdc210edaa4c86" alt="image-20230329214632147"></p><p>在新建的项下继续新建一个项，命名为 command</p><p>双击command目录下的 默认填写数值数据</p><p><img src="https://s1.vika.cn/space/2023/03/29/15dad6df8de6458eb614bd07f915d7b9" alt="image-20230329215112251"></p><p>数值数据填写 <code> &quot;应用可执行程序所在位置&quot; &quot;%1&quot;</code>，注意中间有个空格</p><p>应用可执行程序所在路径可以通过快捷方式  -&gt; 右键 -&gt; 打开文件所在位置找到可执行程序所在位置</p><p>注意左下角有箭头符号的是快捷方式，需要找到不带箭头的可执行程序真正所在位置</p><p>如果打开文件所在位置后依然是快捷方式，就继续在该快捷方式上打开文件所在位置</p><p><img src="https://s1.vika.cn/space/2023/03/29/5a03216265f247cbb8acbb7914c9abe2" alt="image-20230329221224665"></p><p>直到找到没有箭头符号的位置为止，如下图所示</p><p><img src="https://s1.vika.cn/space/2023/03/29/7d367a978b6341c29ea3e842a974c592" alt="image-20230329221445384"></p><p>例如此处我填写为：<code>&quot;D:\Program Files\Notepad--\Ndd-v2.0.0-插件免安装版\Notepad--.exe&quot; &quot;%1&quot;</code></p><p><img src="https://s1.vika.cn/space/2023/03/29/13189c1c4c7b42fe9b82c6e4e1f3da7b" alt="image-20230329215749386"></p><p>确定保存后，我们就可以在右键菜单中看到刚才新增的快捷选项，而且功能是正常的</p><p><img src="https://s1.vika.cn/space/2023/03/29/0e20944323054c86a2b30abb36df40dc" alt="image-20230329215859858"></p><h2 id="2、添加图标"><a href="#2、添加图标" class="headerlink" title="2、添加图标"></a>2、添加图标</h2><p>可以看到其他系统自动添加的快捷菜单前面是有软件图标的，我们也可以为自己设置一下这个图标</p><p><img src="https://s1.vika.cn/space/2023/03/29/fb7b195c08b9407eaad665018d3ce03a" alt="image-20230329220027302"></p><p>我们找到刚才新建的项，新建一个字符串</p><p><img src="https://s1.vika.cn/space/2023/03/29/c699aea125ce42938666992ea2bcbaf3" alt="image-20230329220320961"></p><p>将其重命名为 <code>Icon</code></p><p><img src="https://s1.vika.cn/space/2023/03/29/db426bde467141b79a467247721c094f" alt="image-20230329220402421"></p><p>数值数据填写 <code>&quot;应用可执行程序所在路径&quot;</code></p><p>例如：<code>&quot;D:\Program Files\Notepad--\Ndd-v2.0.0-插件免安装版\Notepad--.exe&quot;</code></p><p><img src="https://s1.vika.cn/space/2023/03/29/0462f781962445f5a3ef4bf237edd13b" alt="image-20230329220515937"></p><p>确定保存后即可看到已经可以正常显示软件图标了</p><p><img src="https://s1.vika.cn/space/2023/03/29/6f4d729b7d3040e1a681bcbe7488e77d" alt="image-20230329220732647"></p><h2 id="3、懒人软件推荐"><a href="#3、懒人软件推荐" class="headerlink" title="3、懒人软件推荐"></a>3、懒人软件推荐</h2><p>如果你嫌以上步骤麻烦的或也可以使用工具</p><p>如果你只是想要去除多余的打开方式，推荐使用 <a href="https://www.huorong.cn/">火绒</a></p><p>如果你想要添加自定义打开方式或更复杂的操作 可使用  <a href="https://bluepointlilac.github.io/ContextMenuManager/">ContextMenuManager</a></p><p>软件使用方法可观看B站Up主 <a href="https://space.bilibili.com/39337803">痕继痕迹</a>的视频</p><blockquote><p><a href="https://www.bilibili.com/video/BV11q4y1o7S5">你的右键菜单还好吗？- 轻松管理右键菜单，去除不需要的内容</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
            <tag> 右键菜单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java替换第N次出现的字符串</title>
      <link href="/posts/7c6bee1a.html"/>
      <url>/posts/7c6bee1a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java替换第N次出现的字符串"><a href="#java替换第N次出现的字符串" class="headerlink" title="java替换第N次出现的字符串"></a>java替换第N次出现的字符串</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换第N次出现的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 指定字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> find 需要被替换的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nthOccurrence 要被替换的字符串出现的次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replace 替换的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 替换后的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceNth</span><span class="params">(String str, String find, <span class="type">int</span> nthOccurrence, String replace)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(find);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nthOccurrence; i++) &#123;</span><br><span class="line">            index = str.indexOf(find, index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index != -<span class="number">1</span>) &#123;</span><br><span class="line">            str = str.substring(<span class="number">0</span>, index) + replace + str.substring(index + find.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>例如我要把第二次出现的张三替换为王富贵</p><p><img src="https://s1.vika.cn/space/2023/03/28/e665a747f51c485da4c009e8bad5fed5" alt="image-20230328161748285"></p><p>若未匹配到指定字符串则不做处理原样返回</p><p><img src="https://s1.vika.cn/space/2023/03/28/40c699aae7c84730ba0088727d184ca8" alt="image-20230328161826074"></p><h2 id="查询指定字符串第N次出现的索引"><a href="#查询指定字符串第N次出现的索引" class="headerlink" title="查询指定字符串第N次出现的索引"></a>查询指定字符串第N次出现的索引</h2><p>使用 <code>org.apache.commons.lang.StringUtils</code> 下的 ordinalIndexOf方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> StringUtils.ordinalIndexOf(<span class="string">&quot;张三,李四,王五,张三,李四,王五,张三,李四,王五&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/28/510a7f4b0e5148a38f0bd34e838cf402" alt="image-20230328161949054"></p><p>若未找到则返回 -1</p><p><img src="https://s1.vika.cn/space/2023/03/28/ef76bffe863c4237bcee34aa7016068e" alt="image-20230328161908326"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 在指定字符串中查询某个字符串出现的第 n 次位置</span><br><span class="line">     *</span><br><span class="line">     * @param str     指定字符串</span><br><span class="line">     * @param target  要查询的字符串</span><br><span class="line">     * @param n       第 n 次出现的位置</span><br><span class="line">     * @return        如果找到了，返回第 n 次出现的位置；否则返回 -1。</span><br><span class="line">     */</span><br><span class="line">    public static int getIndexOf(String str, String target, int n) &#123;</span><br><span class="line">        if (str == null || target == null || n &lt;= 0) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int index = str.indexOf(target); // 找到第一次出现的位置</span><br><span class="line"></span><br><span class="line">        // 开始找第 n 次出现的位置</span><br><span class="line">        for (int i = 2; i &lt;= n &amp;&amp; index != -1; i++) &#123;</span><br><span class="line">            index = str.indexOf(target, index + 1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Talk Is Cheap, Show Me The Code&quot;</span>;</span><br><span class="line"><span class="comment">// 需要定位的可以是字符也可以是字符串，本示例是用的字符 &#x27;C&#x27;，需使用 String.valueOf() 方法转为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> String.valueOf(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"><span class="comment">// 在 str 中查询 target 出现的第 2 次位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndexOf(str, target, <span class="number">2</span>);</span><br><span class="line">System.out.println(index);</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/28/d6699d3eac4f4f9b9a340394ca27c805" alt="image-20230328181902986"></p>]]></content>
      
      
      <categories>
          
          <category> 好记性不如烂笔头 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN 安装配置</title>
      <link href="/posts/15ecac42.html"/>
      <url>/posts/15ecac42.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SVN-安装配置"><a href="#SVN-安装配置" class="headerlink" title="SVN 安装配置"></a>SVN 安装配置</h1><p>SVN的安装分为2部分，第一部分是服务端安装，第二部分的客户端安装。</p><p>一般情况下，只需要安装客户端即可，因为在企业中服务端是由运维来维护的，我们只需要开通一个账号即可。</p><p>常用的客户端又分为两种：安装在操作系统中的客户端、Eclipse的插件</p><h2 id="一、服务端安装"><a href="#一、服务端安装" class="headerlink" title="一、服务端安装"></a>一、服务端安装</h2><p>官网下载服务端 <a href="https://www.visualsvn.com/server/download/">visualsvn</a> </p><p>也可直接通过链接 <a href="https://www.visualsvn.com/files/VisualSVN-Server-5.1.1-x64.msi">https://www.visualsvn.com/files/VisualSVN-Server-5.1.1-x64.msi</a> 下载</p><p><img src="https://s1.vika.cn/space/2023/03/20/5be4c48fafc14347b3080c26eef226ae" alt="image-20230205084005275"></p><p>下载的程序如下所示,双击运行安装</p><p>无脑下一步</p><p><img src="https://s1.vika.cn/space/2023/03/20/849c918120754c209d525dfccf7c0d87" alt="image-20230205084238027"></p><p>接受协议，无脑下一步</p><p><img src="https://s1.vika.cn/space/2023/03/20/db3126d897dc4979ad4cfafb77552635" alt="image-20230205084454087"></p><p>保留默认设置（选择visualVSN服务器和管理控制台），并添加到系统环境变量</p><p><img src="https://s1.vika.cn/space/2023/03/20/e048000469c24fe4a6695c431aed1538" alt="image-20230205084619412"></p><p>安装配置</p><p><img src="https://s1.vika.cn/space/2023/03/20/f3c550e2d18f4e11a0431c0485fa8035" alt="image-20230205090521727"></p><p>若端口被占用，可调整为其他端口，例如 8843</p><p><img src="https://s1.vika.cn/space/2023/03/20/008b1bb25f6d4545a05af0c372b58c4d" alt="image-20230205090726009"></p><p>可使用cmd命令 <code>netstat -oan</code> 查看被占用端口的程序，可以看到 443端口被 pid 为 4460的进程占用</p><p><img src="https://s1.vika.cn/space/2023/03/20/e1e076f126ec483cb2a8e1d7048ab0fb" alt="image-20230205085746068"></p><p>使用 <code>tasklist /FI &quot;PID eq xx&quot;</code> 查看详细进程信息   xx为要查看的pid</p><p><img src="https://s1.vika.cn/space/2023/03/20/26b0d8aab4d341089685cc8f9755f567" alt="image-20230205090241358"></p><p>相关参考</p><blockquote><p><a href="https://blog.csdn.net/Jw_1201/article/details/124846832">https://blog.csdn.net/Jw_1201/article/details/124846832</a></p><p><a href="https://www.cnblogs.com/cyyljw/p/6918037.html">https://www.cnblogs.com/cyyljw/p/6918037.html</a></p></blockquote><p>继续无脑下一步</p><p><img src="https://s1.vika.cn/space/2023/03/20/183b86f95ea344c2ae5519d0e4484167" alt="image-20230205091241962"></p><p>选择服务器对用户进行身份验证的方式</p><p><img src="https://s1.vika.cn/space/2023/03/20/6d741af93849447b8fdeca9f7b6e6ff3" alt="image-20230205091638977"></p><p>至此，安装向导已完成，点击Install 安装即可</p><p><img src="https://s1.vika.cn/space/2023/03/20/819ca28261584700a062d67eb11f3133" alt="image-20230205091803713"></p><p>安装好后点击 Finish 即可</p><p><img src="https://s1.vika.cn/space/2023/03/20/081a7288266a4bdc9c572e86c66c7c42" alt="image-20230205091940283"></p><h2 id="二、客户端安装"><a href="#二、客户端安装" class="headerlink" title="二、客户端安装"></a>二、客户端安装</h2><p>官网下载客户端 <a href="https://www.visualsvn.com/visualsvn/download/">visualsvn</a></p><p>也可通过链接  <a href="https://www.visualsvn.com/files/TortoiseSVN-1.14.5.29465-x64-svn-1.14.2.msi">https://www.visualsvn.com/files/TortoiseSVN-1.14.5.29465-x64-svn-1.14.2.msi</a>  进行下载</p><p><img src="https://s1.vika.cn/space/2023/03/20/dfc095b375214f74bf4686cda5532d41" alt="image-20230205093835931"></p><p>双击运行</p><p><img src="https://s1.vika.cn/space/2023/03/20/718cd37ec6ba40d684db67af9c1d6563" alt="image-20230205094043724"></p><p>无脑下一步</p><p><img src="https://s1.vika.cn/space/2023/03/20/a3782abf91054b3a9b413edfe7b08932" alt="image-20230205094113919"></p><p>继续无脑下一步</p><p><img src="https://s1.vika.cn/space/2023/03/20/a307588cf1eb47ccb38a2725b2c41b00" alt="image-20230205094441591"></p><p>一路无脑下一步</p><p><img src="https://s1.vika.cn/space/2023/03/20/d2470a8c3bd14776b5aae8d9030bf103" alt="image-20230205094532646"></p><p>点击 Install 安装即可</p><p><img src="https://s1.vika.cn/space/2023/03/20/da473b10603948bc806da597a8121a99" alt="image-20230205094610279"></p><h2 id="三、SVN-服务配置与使用"><a href="#三、SVN-服务配置与使用" class="headerlink" title="三、SVN 服务配置与使用"></a>三、SVN 服务配置与使用</h2><p>启动 VisualSVN Server Manager</p><p><img src="https://s1.vika.cn/space/2023/03/20/9f8e01bbc2754291a83383e623ff87c4" alt="image-20230205094913369"></p><p>在 Repositories 上右键 &gt; 新建 &gt; Repository</p><p><img src="https://s1.vika.cn/space/2023/03/20/0aaddd20c253446086c506f942402424" alt="image-20230205095205241"></p><p>选择常规FSFS存储库,默认保持不动，无脑下一步</p><p><img src="https://s1.vika.cn/space/2023/03/20/787e4dac867e45a8a08df82a6a4dc04b" alt="image-20230205095305736"></p><p>输入仓库名称</p><p><img src="https://s1.vika.cn/space/2023/03/20/b6c48b3051384872a4b088ac1368617f" alt="image-20230205095447097"></p><p>可根据需要选择</p><p><img src="https://s1.vika.cn/space/2023/03/20/f9253ecf18d74ae297b854f3c9237e85" alt="image-20230205095816648"></p><p><img src="https://s1.vika.cn/space/2023/03/20/99791d3777b949de805c291d458756c1" alt="image-20230205100045808"></p><p>创建新存储库，点击Create进行创建</p><p><img src="https://s1.vika.cn/space/2023/03/20/64a5b4c45956465ebd611951dc56c5a8" alt="image-20230205100146911"></p><p>创建完成后会提示仓库地址</p><p><img src="https://s1.vika.cn/space/2023/03/20/43ea1230a26a41998edf9395baf029ab" alt="image-20230205100327545"></p><p>在服务端也能看到新创建的仓库</p><p><img src="https://s1.vika.cn/space/2023/03/20/6614346059ab489e8af5d79d5b706c70" alt="image-20230205100444275"></p><p>在Users 上右键添加用户</p><p><img src="https://s1.vika.cn/space/2023/03/20/aee65899f43840258e414cf40ba66cd7" alt="image-20230205100543811"></p><p>设置用户名密码</p><p><img src="https://s1.vika.cn/space/2023/03/20/bc2fcaacaa2744e59d8a7454054b4760" alt="image-20230205100707354"></p><p>若密码不符合复杂度要求，点击继续此设置</p><p><img src="https://s1.vika.cn/space/2023/03/20/f00896991a53410d86cde5f2a933e1c4" alt="image-20230205100805631"></p><p>新用户创建成功</p><p><img src="https://s1.vika.cn/space/2023/03/20/83252e9688cf405abb03588547184bdc" alt="image-20230205100846952"></p><p>在 Groups 上 创建组 或者新建 &gt; Group</p><p><img src="https://s1.vika.cn/space/2023/03/20/dad029427e344dc8ae5268a03f8f6ac7" alt="image-20230205101106818"></p><p>设置组名称，选择该组下的成员</p><p><img src="https://s1.vika.cn/space/2023/03/20/8fe9b46a15064af2a641c85e0af0898c" alt="image-20230205101234420"></p><p>创建好后如下所示</p><p><img src="https://s1.vika.cn/space/2023/03/20/37cea76989d24ada914ac345c191a637" alt="image-20230205101405882"></p><p>设置权限</p><p>在仓库上右键 &gt; Properties</p><p><img src="https://s1.vika.cn/space/2023/03/20/8c3dee950925470c80ea8c82a9f8e33d" alt="image-20230205101540976"></p><p>可以选择赋予用户不同的权限</p><p><img src="https://s1.vika.cn/space/2023/03/20/24c61d4661f94a66906b4a7177579e61" alt="image-20230205101837575"></p><p>从远程拉取代码并上传本地文件</p><p>创建一个测试目录</p><p><img src="https://s1.vika.cn/space/2023/03/20/83abb49ae4964ab3b4ec9fa9fdb05ed1" alt="image-20230205102045196"></p><p>复制参考地址</p><p><img src="https://s1.vika.cn/space/2023/03/20/808e490442c54f5aa24a9e611ca79108" alt="image-20230205102247506"></p><p>在任意目录右键，SVN Checkout 拉取仓库代码</p><p><img src="https://s1.vika.cn/space/2023/03/20/8b87744e8f7f4004aa8eebfdb793fdcb" alt="image-20230205102352511"></p><p>输入仓库地址和本地保存目录</p><p><img src="https://s1.vika.cn/space/2023/03/20/5c9f8f9a96954a68861a6f4d7ec97f83" alt="image-20230205102535027"></p><p>输入有权限访问的账号密码</p><p><img src="https://s1.vika.cn/space/2023/03/20/da1089d929f44d139efd1e559fb96b05" alt="image-20230205102631117"></p><p>代码拉取成功后本地会生成指定目录，由于我的目前时空仓库，只有一个 .svn 的隐藏目录</p><p><img src="https://s1.vika.cn/space/2023/03/20/9549957d344946c6a967d9956e3b0b5d" alt="image-20230205102811583"></p><p>在该目录创建两个文件，模拟要上传的本地文件</p><p><img src="https://s1.vika.cn/space/2023/03/20/c5a53fb27f7a4c33965d314c4cb1d9c5" alt="image-20230205103018496"></p><p>在该目录右键 &gt; SVN Commit 提交文件</p><p><img src="https://s1.vika.cn/space/2023/03/20/39f2b32262904129a88ba9882d6e31eb" alt="image-20230205103120010"></p><p>本地创建了两个文件，先只提交一个进行测试</p><p><img src="https://s1.vika.cn/space/2023/03/20/039b9c7791cd4af28c7a0fefa3dbd248" alt="image-20230205103413241"></p><p>提交成功</p><p><img src="https://s1.vika.cn/space/2023/03/20/0b887e14053248929e8f6a713436574a" alt="image-20230205103500891"></p><p>刷新一下仓库，可以看到文件上传成功</p><p><img src="https://s1.vika.cn/space/2023/03/20/ff62bcc0ba6f457e8b0f13dbd2a9a60b" alt="image-20230205103550836"></p><p>也可以在浏览器查看</p><p><img src="https://s1.vika.cn/space/2023/03/20/b179a171024344b89ef1835415c3841d" alt="image-20230205103655248"></p><p>输入账号密码进行访问，可以看到刚才上传的文件</p><p><img src="https://s1.vika.cn/space/2023/03/20/720e90062df04fa9b9f9d57e837e0c49" alt="image-20230205103752122"></p><p>往远程仓库导入本地目录及文件</p><p>在本地创建目录及文件 </p><p>此处我创建了个 test2目录，test2中包含 test2.1目录和 test2.txt ,test2.1目录中包含 test2.1.1.txt和test2.1.2.txt</p><p><img src="https://s1.vika.cn/space/2023/03/20/83da1267f48f49dba7d03dbd901aaa10" alt="image-20230205104619766"></p><p>在 test2 目录内右键 &gt; TortoiseSVN &gt; Import </p><p><img src="https://s1.vika.cn/space/2023/03/20/af0f7888c88048d59140aa7f74a59328" alt="image-20230205104832893"></p><p>注意导入的仓库地址要在远程目录的后面加上本地目录名称，这样才能保持远程目录与本地目录层次结构一致</p><p><img src="https://s1.vika.cn/space/2023/03/20/0fa80a43d1924c9b8d84440c93c5a11a" alt="image-20230205105022669"></p><p>导入成功</p><p><img src="https://s1.vika.cn/space/2023/03/20/252993340f3d471d8be3911970a701ab" alt="image-20230205105211304"></p><p>刷线一下仓库</p><p><img src="https://s1.vika.cn/space/2023/03/20/16d7c644e4974d4fa62f058a5dfb3c2c" alt="image-20230205105310142"></p><p>参考</p><blockquote><p><a href="https://blog.csdn.net/Ruishine/article/details/121467191">https://blog.csdn.net/Ruishine/article/details/121467191</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Server SSL certificate verification failed  certificate issued for a different hostname, issuer is not trusted</title>
      <link href="/posts/71c52a96.html"/>
      <url>/posts/71c52a96.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="svn-E230001-Server-SSL-certificate-verification-failed-certificate-issued-for-a-different-hostname-issuer-is-not-trusted"><a href="#svn-E230001-Server-SSL-certificate-verification-failed-certificate-issued-for-a-different-hostname-issuer-is-not-trusted" class="headerlink" title="svn: E230001: Server SSL certificate verification failed: certificate issued for a different hostname, issuer is not trusted"></a>svn: E230001: Server SSL certificate verification failed: certificate issued for a different hostname, issuer is not trusted</h1><p>意思是服务器的SSL证书验证失败，证书为不同主机名颁发。</p><p>解决方法：</p><p>用管理员身份打开CMD并执行如下命令</p><pre><code>svn ls https://ip/svn/xxxx   将ip 替换为你要访问的svn仓库的ip,将xxxx 替换为项目目录地址</code></pre><p>然后会让你选择R（拒绝）、t（暂时接受）、或者p（永久接受）</p><p>我们输入p后按回车，会提示输入当前电脑用户的密码，然后提示输入svn的账号密码，按着提示操作就行</p><p>都输入完成后，回车就可以解决了</p><p><img src="https://s1.vika.cn/space/2023/03/20/545f854b0c764afea9ae5094797daf4b" alt="image-20230205111135336"></p><blockquote><p>CSDN博主「夜月闪耀<br>原文链接：<a href="https://blog.csdn.net/weixin_45936094/article/details/126029876">https://blog.csdn.net/weixin_45936094/article/details/126029876</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7安装Sqlserver2019</title>
      <link href="/posts/11678756.html"/>
      <url>/posts/11678756.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CentOs7安装Sqlserver2019"><a href="#CentOs7安装Sqlserver2019" class="headerlink" title="CentOs7安装Sqlserver2019"></a>CentOs7安装Sqlserver2019</h1><p>特别鸣谢</p><blockquote><p>哔哩哔哩博主 ： <a href="https://space.bilibili.com/457109942">程序员小墨</a></p><p><a href="https://www.bilibili.com/video/av844976641">https://www.bilibili.com/video/av844976641</a></p></blockquote><p>下载存储卡配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -o /etc/yum.repos.d/mssql-server.repo https://packages.microsoft.com/config/rhel/7/mssql-server-2019.repo</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225046221-827719863.png" alt="image-20231114225038801"></p><h2 id="一、安装SQLServer"><a href="#一、安装SQLServer" class="headerlink" title="一、安装SQLServer"></a>一、安装SQLServer</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y mssql-server</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225126251-1129437727.png" alt="image-20231114225125707"></p><p>若安装过程中出现&#x2F;var&#x2F;run&#x2F;yum.pid 已被锁定可以使用以下命令解除，没有请忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /var/run/yum.pid</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225157876-431674601.png" alt="image-20231114225148396"></p><p>选择要安装的版本 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/mssql/bin/mssql-conf setup</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225223457-330632401.png" alt="image-20231114225222992"></p><p>选择语言</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225300454-929037816.png" alt="image-20231114225250984"></p><p>设置系统管理员 sa 的密码，要求大于8个字符且包含大小写字母，符号中至少三种</p><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225332856-414415724.png" alt="image-20231114225323307"></p><p>可以查看下服务是否正常运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mssql-server</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225435806-338194485.png" alt="image-20231114225435253"></p><p>打开SQLServer所需端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=1433/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225507325-1295485313.png" alt="image-20231114225457954"></p><h2 id="二，安装SQLServer-命令行工具"><a href="#二，安装SQLServer-命令行工具" class="headerlink" title="二，安装SQLServer 命令行工具"></a>二，安装SQLServer 命令行工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -o /etc/yum.repos.d/msprod.repo https://packages.microsoft.com/config/rhel/7/prod.repo</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225531517-1685059374.png" alt="image-20231114225530939"></p><p>删除所有旧的unixODBC包，避免因早期安装的mssql-tools出问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove unixODBC-utf16 unixODBC-utf16-devel</span><br></pre></td></tr></table></figure><p>安装mssql-tools</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y mssql-tools unixODBC-devel</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225555315-1309199307.png" alt="image-20231114225554785"></p><p>添加环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">echo &#x27;export PATH=&quot;$PATH:/opt/mssql-tools/bin&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225712138-233423306.png" alt="image-20231114225704762"></p><p>创建个数据库进行测试服务正常</p><p>使用管理员账号进行链接，此处我设置的密码为 An0206_SQLServer2019</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlcmd -S localhost -U SA -P &#x27;&lt;YourPassword&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225731628-1193215142.png" alt="image-20231114225731220"></p><p>创建个数据库并查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE TestDB</span><br><span class="line">SELECT Name from sys.Databases</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/2233039/202311/2233039-20231114225759377-693652455.png" alt="image-20231114225749979"></p><p>使用 <code>exit</code> 命令退出终端</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlserver </tag>
            
            <tag> CentOs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA报错：Problems while loading file history</title>
      <link href="/posts/e390b6fb.html"/>
      <url>/posts/e390b6fb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IDEA报错：Problems-while-loading-file-history"><a href="#IDEA报错：Problems-while-loading-file-history" class="headerlink" title="IDEA报错：Problems while loading file history"></a>IDEA报错：Problems while loading file history</h1><p><img src="https://s1.vika.cn/space/2023/03/20/d4633520a6f243c8a383541399568a4f" alt="image-20230207095230295"></p><p>CleanUp一下就好了</p><p><img src="https://s1.vika.cn/space/2023/03/20/17d0d17abdc340f9a573cbe020a847b3" alt="image-20230207095350084"></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整Windows进入系统等待时间</title>
      <link href="/posts/dec4fde8.html"/>
      <url>/posts/dec4fde8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="调整Windows进入系统等待时间"><a href="#调整Windows进入系统等待时间" class="headerlink" title="调整Windows进入系统等待时间"></a>调整Windows进入系统等待时间</h1><p>此电脑右击 》 属性 </p><p><img src="https://s1.vika.cn/space/2023/03/20/ff933ffab6b14563ae1aeb788bf8da52" alt="image-20230209195201061"></p><p>高级系统设置</p><p><img src="https://s1.vika.cn/space/2023/03/20/c2cf41a1ddcf4b22b2d7f2c6331bc18f" alt="image-20230209195234005"></p><p>启动和故障修复 》 设置</p><p><img src="https://s1.vika.cn/space/2023/03/20/fc330ebee7914405b3a318932d4d965c" alt="image-20230209195317088"></p><p>调整显示操作系统列表的时间即可</p><p><img src="https://s1.vika.cn/space/2023/03/20/00093a8de7b0498391355d69577a555f" alt="image-20230209195351634"></p><p>删除多余引导项</p><p>Win + R 调出 运行窗口</p><p><img src="https://s1.vika.cn/space/2023/03/20/36e8af094b9c411b8711c468c9147daa" alt="image-20230209195624801"></p><p>在引导界面可以选择删除多余的引导项，由于我这里只有一个引导项，所以无法删除</p><p><img src="https://s1.vika.cn/space/2023/03/20/f3fcae06f0a84ffbacc413992d258f3d" alt="image-20230209195606460"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows11 无法关机解决方案</title>
      <link href="/posts/a84786a0.html"/>
      <url>/posts/a84786a0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Windows11-无法关机解决方案"><a href="#Windows11-无法关机解决方案" class="headerlink" title="Windows11 无法关机解决方案"></a>Windows11 无法关机解决方案</h1><p><strong>问题描述：升级后的Win11 点关机，几秒钟后再次进入桌面，无法关机</strong></p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>在搜索栏搜索 电源，打开选择电源计划</p><p><img src="https://s1.vika.cn/space/2023/03/20/c80993e293664e2294edb1b81fa8ab23" alt="image-20230209204145782"></p><p>打开选择电源按钮的功能</p><p><img src="https://s1.vika.cn/space/2023/03/20/17fa98ef38c943f0b7af3b0a954a5cd5" alt="image-20230209204325166"></p><p>在关机设置里取消勾选启动快速启动功能</p><p><img src="https://s1.vika.cn/space/2023/03/20/5a6d444359304d62a5450e047a435164" alt="image-20230209204413267"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何制作U盘头像图标</title>
      <link href="/posts/c6f6dd87.html"/>
      <url>/posts/c6f6dd87.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何制作U盘头像图标"><a href="#如何制作U盘头像图标" class="headerlink" title="如何制作U盘头像图标"></a>如何制作U盘头像图标</h1><p>首先利用 <a href="https://www.bitbug.net/">ico在线制作工具</a>  制作所需的iso文件，选择将要作为U盘图标的照片，生成ico图标</p><p><img src="https://s1.vika.cn/space/2023/03/20/094eace437e34041b0d2005f684ef3c0" alt="image-20230209202544515"></p><p>然后在桌面新建个文本文档，填入一下内容,将 xxxx 替换为刚才下载的iso 图片名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[autorun]</span><br><span class="line">icon=xxxx.ico</span><br></pre></td></tr></table></figure><p>将文本文件重命名为 <code>autorun.inf</code> ,注意后缀名为 <code>inf</code>  不是<code>txt</code></p><p><img src="https://s1.vika.cn/space/2023/03/20/6dc3dd1da37640b8a124df9674a221f4" alt="image-20230209202952683"></p><p>查看文件的时候显示后缀名</p><p><img src="https://s1.vika.cn/space/2023/03/20/ab03a6e6d2534aa2ade0973ea2f61466" alt="image-20230209202923183"></p><p>将ico图片和 autorun.inf 文件放到U盘根目录，可以将这两个文件设为只读，隐藏</p><p><img src="https://s1.vika.cn/space/2023/03/20/fc26ffa2ef0c47f598d352e9cebb74aa" alt="image-20230209203353633"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
            <tag> U盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装系统前后需要做的事</title>
      <link href="/posts/7e9b8703.html"/>
      <url>/posts/7e9b8703.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重装系统前后需要做的事"><a href="#重装系统前后需要做的事" class="headerlink" title="重装系统前后需要做的事"></a>重装系统前后需要做的事</h1><h2 id="重装系统前需要做的事"><a href="#重装系统前需要做的事" class="headerlink" title="重装系统前需要做的事"></a>重装系统前需要做的事</h2><h3 id="1-1-重要资料备份"><a href="#1-1-重要资料备份" class="headerlink" title="1.1 重要资料备份"></a>1.1 重要资料备份</h3><p>重装系统前最重要的事情就是将重要资料进行备份，重装系统后C盘会被格式化，C盘以外的其他盘符文件可以选择保留，但为了安全起见，所有资料都建议进行备份，已安装的软件也可能造成损坏，快捷方式，服务项等会被清除，所以还是建议重装</p><p>我安装应用时习惯在推荐安装目录上直接修改盘符地址，这样查找软件时也方便快捷</p><p>安装在C盘以外的软件，可以尝试找到应用程序安装位置，点击运行即可，一般会存放在以该软件命名的文件夹里或者其bin目录内</p><p><img src="https://s1.vika.cn/space/2023/03/20/55be9113e97a48cd9a3b756cc7942b6a" alt="image-20230204160318563"></p><p>找到应用程序后可为将其固定到开始菜单或创建快捷方式，操作如下：</p><p>选中应用程序右键 &gt; 显示更多选项 &gt; 创建快捷方式</p><p>选中应用程序右键 &gt; 显示更多选项 &gt; 发送到 &gt; 桌面快捷方式</p><h3 id="1-2-必要工具准备"><a href="#1-2-必要工具准备" class="headerlink" title="1.2 必要工具准备"></a>1.2 必要工具准备</h3><p>既然要重装系统，当然要准备好要按照的系统镜像，可以去官网下载ISO镜像，或者利用U盘制作PE系统，推荐后者</p><p>重装系统前建议提前下载好相应的网卡驱动或者安装 <a href="https://www.sysceo.com/Software-softwarei-id-245.html">驱动总裁网卡版</a>，<a href="http://dm.weishi.360.cn/home.html">360驱动大师网卡版</a> 等第三方驱动工具，防止重装系统后因网卡驱动缺失导致联不了网的问题</p><p>若重装后真的出现网络问题，可使用手机共享网络解燃眉之急，当然前提是需要有一根可以连接手机的数据线</p><p>操作方式（本人机型 ViVO S15 Pro）</p><p>打开个人热点 》 其他共享方式 》 通过USB共享网络  （亲测蓝牙不好使）</p><p><img src="https://s1.vika.cn/space/2023/03/20/86c565c02ef4415c80751f460bd8a0b1" style="zoom:33%;" /><img src="https://s1.vika.cn/space/2023/03/20/676c6ebbf0b54c358f98832a5cfae231" alt="image-20230208083156510" style="zoom:33%;" /></p><p>电脑出现这个图标就代表链接成功，电脑可以使用手机热点上网了</p><p><img src="https://s1.vika.cn/space/2023/03/20/2b5acff806d041e2a2adf9386c276d5d" alt="image-20230208083215007"></p><h2 id="重装系统后需要做的事"><a href="#重装系统后需要做的事" class="headerlink" title="重装系统后需要做的事"></a>重装系统后需要做的事</h2><h3 id="2-1-更新驱动"><a href="#2-1-更新驱动" class="headerlink" title="2.1 更新驱动"></a>2.1 更新驱动</h3><p>用Windows自带的更新功能更新即可，为保证系统正常运行，系统安装后会自动检测更新</p><p>若想要更好的性能体验，可到各主板或电脑厂商官网自行下载驱动</p><h3 id="2-2-激活系统"><a href="#2-2-激活系统" class="headerlink" title="2.2 激活系统"></a>2.2 激活系统</h3><p>新装的系统需要重新激活，未激活的系统一些功能将不能正常使用，例如个性化中的显示桌面图标功能</p><p><img src="https://s1.vika.cn/space/2023/03/20/1b84d69075c24b209f2b0c8280d2fca7" alt="image-20230204134539496"></p><p>激活步骤</p><p>以管理员方式打开cmd窗口，按步骤输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/20/517379679df14cdc9fc182a9d343fe04" alt="image-20230204134756019"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms kms.03k.org</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/20/4829ab23ec0a48fdbbd3fd5c0ea23ca3" alt="image-20230204134918443"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/20/b6ec452420044d48b12f1f05ba2021a6" alt="image-20230204140217365"></p><p>分分钟轻松激活</p><p><img src="https://s1.vika.cn/space/2023/03/20/753c327f7cac47c89823bed7e17a8f92" alt="image-20230204140700295"></p><p>参考</p><blockquote><p><a href="https://www.bilibili.com/video/BV1TL4y1B7iz">https://www.bilibili.com/video/BV1TL4y1B7iz</a></p><p>bilibili 博主：爱玩的安哥</p><p>用户id: 500892783</p></blockquote><blockquote><p> <a href="https://zhuanlan.zhihu.com/p/81561582">KMS服务,一句命令激活windows&#x2F;office</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/it-tsz/p/9734585.html">kms可用激活服务器地址</a></p></blockquote><h3 id="2-3-系统设置"><a href="#2-3-系统设置" class="headerlink" title="2.3 系统设置"></a>2.3 系统设置</h3><h4 id="1、关闭-bitLocker-驱动器加密"><a href="#1、关闭-bitLocker-驱动器加密" class="headerlink" title="1、关闭 bitLocker 驱动器加密"></a>1、关闭 bitLocker 驱动器加密</h4><p>如果磁盘上有个锁的标志，就代表已经打开了 bitLocker 功能，如果电脑上没有什么国家机密的话，建议关闭该功能，因为一旦密码忘记，就可能导致磁盘无法访问，找回密码也靠运气</p><p><img src="https://s1.vika.cn/space/2023/03/20/12a48cb36e844f0584209d4559df6947" alt="image-20230205081651033"></p><p>如果系统盘设置了该功能，开机启动时可能需要输入密码才能访问</p><p><img src="https://s1.vika.cn/space/2023/03/20/2aa19fb9d0704decadc6f1cbddc8f2cf" alt="image-20230205081931913"></p><p>关闭步骤</p><p>找到 BitLocker 管理界面进行关闭即可 </p><p>设置 &gt; 隐私和安全性 &gt; BitLocker驱动器加密 </p><p><img src="https://s1.vika.cn/space/2023/03/20/6748500ef29d456c9dbcb270a1adfc3e" alt="image-20230205082859117"></p><p>或者 </p><p>控制面板 查看方式选择小图标 &gt; BitLocker驱动器加密</p><p><img src="https://s1.vika.cn/space/2023/03/20/fea6797565cb4fdd9a05a5e527dc3692" alt="image-20230205082709174"></p><p>关闭时需要对数据进行解密，界面后即可关闭该功能</p><p><img src="https://s1.vika.cn/space/2023/03/20/1fe18c04a4474576bff38e1a3a2abd43" alt="image-20230205083017041"></p><h4 id="2、设置虚拟内存"><a href="#2、设置虚拟内存" class="headerlink" title="2、设置虚拟内存"></a>2、设置虚拟内存</h4><blockquote><p><a href="https://www.bilibili.com/video/BV1Zj411g73o">虚拟内存正确的认识和详细的设置</a></p></blockquote><p>内存释放工具RamMap</p><blockquote><p><a href="https://pan.baidu.com/s/1nzANrpllrASNJnYhkp8ozg?pwd=1k2d">RamMap安装包</a></p></blockquote><p>使用方法：选择Empty选项卡,依次点击以下5个列表</p><p>亲测能释放20%内存</p><p><img src="https://s1.vika.cn/space/2023/03/20/6bc38955885249baab73ba3380ca3223" alt="image-20230319135459785"></p><h3 id="2-4-操作优化"><a href="#2-4-操作优化" class="headerlink" title="2.4 操作优化"></a>2.4 操作优化</h3><h4 id="1、恢复-Win10-右键菜单功能，使用工具一键启用即可"><a href="#1、恢复-Win10-右键菜单功能，使用工具一键启用即可" class="headerlink" title="1、恢复 Win10 右键菜单功能，使用工具一键启用即可"></a>1、恢复 Win10 右键菜单功能，使用工具一键启用即可</h4><p><img src="https://s1.vika.cn/space/2023/03/20/f2c8d02d68e94b9e93ba76f00b48a9f4" alt="image-20230204164049642"></p><h4 id="2、调整文件存储设置"><a href="#2、调整文件存储设置" class="headerlink" title="2、调整文件存储设置"></a>2、调整文件存储设置</h4><p>更改应用、文档、音乐、图片、视频和地图的默认保存位置到其他盘符</p><p><img src="https://s1.vika.cn/space/2023/03/20/5b0d8e74c6ab4a97a05a0cc37e84097d" alt="image-20230205083540913"></p><h4 id="3、调整软件默认文件保存位置"><a href="#3、调整软件默认文件保存位置" class="headerlink" title="3、调整软件默认文件保存位置"></a>3、调整软件默认文件保存位置</h4><p><img src="https://s1.vika.cn/space/2023/03/20/08ab99d1e6f440968747a30826db4c7f" alt="image-20230208081457556"></p><h4 id="4、查看文件时显示文件拓展名及隐藏的项目"><a href="#4、查看文件时显示文件拓展名及隐藏的项目" class="headerlink" title="4、查看文件时显示文件拓展名及隐藏的项目"></a>4、查看文件时显示文件拓展名及隐藏的项目</h4><p><img src="https://s1.vika.cn/space/2023/03/20/61b430bc62964c24b13d7d6878bd1b7b" alt="image-20230205093636326"></p><h4 id="5、设置自动隐藏任务栏"><a href="#5、设置自动隐藏任务栏" class="headerlink" title="5、设置自动隐藏任务栏"></a>5、设置自动隐藏任务栏</h4><p>有时候软件界面会被底部任务栏遮挡，影响操作，可设置自动隐藏任务栏，需要任务栏的时候，鼠标移动到任务栏处自动显示任务栏</p><p>鼠标点中任务栏右键 》 任务栏设置</p><p><img src="https://s1.vika.cn/space/2023/03/20/e954967037b5481eb0fbc70555d31a6d" alt="image-20230209205338624"></p><p>在任务栏行为里设置自动隐藏任务栏</p><p><img src="https://s1.vika.cn/space/2023/03/20/f1e09d24101b4bc1be1dfda6fa48e9b3" alt="image-20230209205446400"></p><h4 id="6、调整用户账户控制设置"><a href="#6、调整用户账户控制设置" class="headerlink" title="6、调整用户账户控制设置"></a>6、调整用户账户控制设置</h4><p>安装软件时总是提示是否允许，每次都通知烦人的，可以调整通知级别</p><p>搜索更改用户账户控制设置</p><p><img src="https://s1.vika.cn/space/2023/03/20/b4f0c3443fe64f9ebb00fe5611a1fceb" alt="image-20230213203731181"></p><p>将通知级别拉到最低，从不通知</p><p><img src="https://s1.vika.cn/space/2023/03/20/7a571c0e768f4bffaf95f024144c2ca0" alt="image-20230213203827784"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重装系统 </tag>
            
            <tag> 好用软件 </tag>
            
            <tag> 提升效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 图片自动上传至腾讯云Cos 服务</title>
      <link href="/posts/b2beb80f.html"/>
      <url>/posts/b2beb80f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Typora 图片自动上传至腾讯云Cos 服务</p><blockquote><p><strong><a href="https://gitee.com/liaozibo-dev">廖子博</a> &#x2F; <a href="https://gitee.com/liaozibo-dev/typroa_qcloud_cos">Typora QCloud Cos</a></strong></p><p><a href="https://www.bilibili.com/video/BV14k4y117Wd">Typora 图片上传插件使用教程</a></p></blockquote><p>参考说明文档无脑操作即可,这里着重说一下要改的配置文件</p><p>根据文档中的链接提示打开腾讯云API密钥管理界面,没有密钥的话就创建一个</p><p><img src="https://s1.vika.cn/space/2023/03/20/6677bb4015a44c73a8d12a9c942634fd" alt="image-20230318185318660"></p><p>将 <code>SecretId</code> 和 <code>SecretKey</code> 的值进行替换</p><p><img src="https://s1.vika.cn/space/2023/03/20/08fa4ac39d7a40f18bdb9cf5e913ecc3" alt="image-20230318185109989"></p><p>在存储桶列表可看到当前所拥有的存储桶，没有就创建一个</p><p><img src="https://s1.vika.cn/space/2023/03/20/31e558aaf3de4d659a8b3b0eeef84bb3" alt="image-20230318185617801"></p><p>然后按照文档说明配置自定义命令即可</p><p>支持拖拽图片以及剪切板粘贴</p><p><strong>注意：这是要收费的，先用后付</strong></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Cos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更换内存条</title>
      <link href="/posts/815da170.html"/>
      <url>/posts/815da170.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何更换内存条"><a href="#如何更换内存条" class="headerlink" title="如何更换内存条"></a>如何更换内存条</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1R441167Zy/">三分钟教你给笔记本升级安装内存条，惠普745G5升级内存实例</a></p><p><a href="https://www.bilibili.com/video/BV1fv411i7ds">笔记本内存条选择和安装教程，不会来打死我</a></p><p><a href="https://www.bilibili.com/video/BV1GR4y11784">加个内存，电脑起飞？</a></p></blockquote><h2 id="一、查看当前内存大小和可支持升级内存大小"><a href="#一、查看当前内存大小和可支持升级内存大小" class="headerlink" title="一、查看当前内存大小和可支持升级内存大小"></a>一、查看当前内存大小和可支持升级内存大小</h2><p>此电脑右键  -&gt;  属性 即可看到当前电脑内存大小和系统类型、32位系统最高支持4G内存</p><p><img src="https://s1.vika.cn/space/2023/03/20/402affddbb414f2684d78018aac28e30" alt="image-20230317225102225"></p><p>也可以按快捷键 Ctrl+Alt+Del 或者 Ctrl+Shift+Esc 调出 任务管理器界面</p><p><img src="https://s1.vika.cn/space/2023/03/20/74a95c406d774b3995b90f164ccc3c02" alt="image-20230317225821600"></p><p>选择性能界面,可以看到当前内存容量和使用情况,下方可以看到当前电脑内存插槽使用情况 （不准确,建议问客服或查看相同电脑型号拆机视频确认）</p><p>很多笔记本电脑内存插槽是焊死的，或者有一个是焊死的，预留了一个可拓展的插槽</p><p>64位系统可以按 Windows + R 调出运行窗口,输入cmd回车 打开命令提示符界面,输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic memphysical get maxcapacity</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/20/0953de3e323443518b9f2acad2d66eea" alt="image-20230317223136897"></p><p>返回数值的单位为KB，换算成GB，计算式如下：</p><p>33554432÷1024÷1024&#x3D;32GB</p><p>即我的电脑最大支持32G内存，</p><p>我有两个卡槽最合适的搭配是买两个16G内存组成双通道</p><p>两个相同大小、相同规格、相同频率的内存条即可组成双通道，双通道比单通道的性能要好</p><p>即用两个相同的16G内存条要比用单个32G内存条效果要好</p><p>若有两个内存条，分别为 8G和16G,则这个16内存条有8G和另一个内存条组成双通道，剩余的8G为单通道</p><h2 id="二、如何购买内存条"><a href="#二、如何购买内存条" class="headerlink" title="二、如何购买内存条"></a>二、如何购买内存条</h2><p>只要购买形同容量、相同型号、相同频率的内存即可、生产厂商可以不相同</p><p>小白可以下载鲁大师查看</p><p><img src="https://s1.vika.cn/space/2023/03/20/8ee76cab69834e88a390db0900db16b4" alt="image-20230317230552708"></p><p>专业选手也可以用图吧工具箱查看</p><p><img src="https://s1.vika.cn/space/2023/03/20/4ac3a38d64ff45f6a5515469c79ecafc" alt="image-20230317231001272"></p><p><img src="https://s1.vika.cn/space/2023/03/20/521d7b61c210463c92002d6bac83e1c2" alt="image-20230317230903657"></p><p>可以看到我的内存是 DDR4 型号、频率为3200MHz、购买的时候也要买相同规格、相同频率的内存条</p><p>DDR4就是第四代内存的意思，每代接口不通用</p><p>目前主流的内存规格有DDR3、DDR3L、DDR4</p><p>DDR3内存条兼容DDR3 和DDR3L,DDR3L 和DDR4只兼容相同规格的内存条</p><p>另外笔记本和台式内存也不通用</p><p>若使用两个不同频率的内存条，系统会按照较低的那个频率进行工作</p><h2 id="三、拆机更换步骤"><a href="#三、拆机更换步骤" class="headerlink" title="三、拆机更换步骤"></a>三、拆机更换步骤</h2><p>1.断开电源</p><p>2.卸下后壳</p><p>3.断开电池电源</p><p>4.释放静电、防止<a href="https://baike.baidu.com/item/%E9%9D%99%E7%94%B5%E5%87%BB%E7%A9%BF/9280711?fr=aladdin">静电击穿</a>损伤电子元件</p><p>可佩戴静电手环，或者拆机前洗洗手,双手接触金属物品释放静电,或者光脚接触地面</p><p>断开电池电源后按几次开机键也可有效释放静电</p><p>5.更换内存条</p><p>内存条插槽两侧一般都有拨片，往两侧一拉即可弹出内存条</p><p>插内存条的时候按照内存条方向斜45度插入然后轻轻按压即可</p><p>升级后直接起飞</p><p><img src="https://s1.vika.cn/space/2023/03/20/b091bf0493bd45a88dfa62004dafab4c" alt="image-20230317234550280"></p>]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存条 </tag>
            
            <tag> 内存 </tag>
            
            <tag> 拆机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 打开虚拟机就蓝屏修复方法</title>
      <link href="/posts/fe9bd80c.html"/>
      <url>/posts/fe9bd80c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="VMware-打开虚拟机就蓝屏-修复方法"><a href="#VMware-打开虚拟机就蓝屏-修复方法" class="headerlink" title="VMware 打开虚拟机就蓝屏 修复方法"></a>VMware 打开虚拟机就蓝屏 修复方法</h1><p><img src="https://s1.vika.cn/space/2023/03/20/c86e597d0d424268987213abcd0eb79c" alt="image-20230204174851246"></p><p>其产生原因可能是未开启虚拟化支持</p><p>控制面板 &gt; 程序 &gt; 启用或关闭Windows功能 &gt; 勾选 虚拟化平台</p><p>重启即可</p><p><img src="https://s1.vika.cn/space/2023/03/20/b849d73fa86848f2b603413d0a6baa1a" alt="image-20230204174718777"></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
